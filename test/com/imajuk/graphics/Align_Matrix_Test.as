package com.imajuk.graphics{    import org.libspark.as3unit.after;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;    import flash.display.Sprite;	use namespace test;	use namespace before;	use namespace after;		internal class Align_Matrix_Test extends Sprite	{		before function setup () : void		{		}		//--------------------------------------------------------------------------//        ////        //  Align with Stage / target is transformed//        //  cordinateSpace : Stage//        //  guide          : cordinateSpace//        ////        //--------------------------------------------------------------------------//        //------------------------------------------//        //  target is on cordinateSpace//        //------------------------------------------//        test function alongGlobal_T_scaled():void//        {            //            coordinateSpaceTarget = AlignTestUtil.fillColor(StageReference.stage);//            testSpriteIn(coordinateSpaceTarget);//                    //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.Top);//            drawMockOrigin();//            assertTrue(testT());//        //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.Top);//            assertTrue(testT(0, 0, 1, 1));//            //            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.Top);//            assertTrue(testT(0, 0, 1, 2));//        }////        test function alongGlobal_TL_scaled():void//        {//            coordinateSpaceTarget = AlignTestUtil.fillColor(StageReference.stage);//            testSpriteIn(coordinateSpaceTarget);//                    //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.TopLeft);//            drawMockOrigin();//            assertTrue(testTL());//        //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.TopLeft);//            assertTrue(testTL(0, 0, 1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.TopLeft);//            assertTrue(testTL(0, 0, 1, 2));//        }////        test function alongGlobal_TR_scaled():void//        {//            coordinateSpaceTarget = AlignTestUtil.fillColor(StageReference.stage);//            testSpriteIn(coordinateSpaceTarget);//        //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.TopRight);//            drawMockOrigin();//            assertTrue(testTR());//        //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.TopRight);//            assertTrue(testTR(0, 0, 1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.TopRight);//            assertTrue(testTR(0, 0, 2, 2));//        }////        //------------------------------------------//        //  target is on DocumentClass//        //------------------------------------------//        test function alongDocumentClass_TL_scaled():void//        {//            coordinateSpaceTarget = AlignTestUtil.fillColor(DocumentClass.container);//            testSpriteIn(coordinateSpaceTarget);//                    //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.TopLeft);//            drawMockOrigin();//            assertTrue(testTL());//                    //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.TopLeft);//            drawMockOrigin();//            assertTrue(testTL(0, 0, 1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.TopLeft);//            drawMockOrigin();//            assertTrue(testTL(0, 0, 2, 2));//        }////        test function alongDocumentClass_TR_scaled():void//        {            //            coordinateSpaceTarget = AlignTestUtil.fillColor(DocumentClass.container);//            testSpriteIn(coordinateSpaceTarget);//                    //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.TopRight);//            drawMockOrigin();//            assertTrue(testTR());//                    //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.TopRight);//            drawMockOrigin();//            assertTrue(testTR(0, 0, 1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.TopRight);//            drawMockOrigin();//            assertTrue(testTR(0, 0, 2, 2));//        }////        //------------------------------------------//        //  target is on level 1 of cordinateSpace//        //------------------------------------------//        test function global_TL_nested_scaled():void//        {            //            coordinateSpaceTarget = AlignTestUtil.fillColor(DocumentClass.container.addChild(new Sprite()) as DisplayObjectContainer, 400, 300);//            AlignTestUtil.placeRandomPos(coordinateSpaceTarget);//            testSpriteIn(coordinateSpaceTarget);//                    //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.TopLeft);//            drawMockOrigin();//            assertTrue(testTL());//                    //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.TopLeft);//            drawMockOrigin();//            assertTrue(testTL(0, 0, 1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.TopLeft);//            drawMockOrigin();//            assertTrue(testTL(0, 0, 2, 2));//        }////        test function global_TR_nested_scaled():void//        {            //            coordinateSpaceTarget = AlignTestUtil.fillColor(DocumentClass.container.addChild(new Sprite()) as DisplayObjectContainer, 400, 300);//            AlignTestUtil.placeRandomPos(coordinateSpaceTarget);//            testSpriteIn(coordinateSpaceTarget);//                    //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.TopRight);//            drawMockOrigin();//            assertTrue(testTR());//                    //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.TopRight);//            drawMockOrigin();//            assertTrue(testTR(0, 0, 1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.TopRight);//            drawMockOrigin();//            assertTrue(testTR(0, 0, 2, 2));//        }////        //--------------------------------------------------------------------------//        ////        //  Align with DocumentClass's child / target is scaled//        //  cordinateSpace : Level 1//        //  guide          : cordinateSpace//        ////        //--------------------------------------------------------------------------//        //------------------------------------------//        //  target is on level 1 of cordinateSpace//        //------------------------------------------//        test function local_TL_Container1_scaled():void//        {//            var container:DisplayObjectContainer = DocumentClass.container.addChild(new Sprite()) as DisplayObjectContainer;//            coordinateSpaceTarget = AlignTestUtil.fillColor(container, 400, 300);//            testSpriteIn(coordinateSpaceTarget);//            AlignTestUtil.placeRandomPos(coordinateSpaceTarget);//                    //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.TopLeft).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testTL_local());//                    //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.TopLeft).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testTL_local(1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.TopLeft).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testTL_local(2, 2));//        }////        test function local_T_Container1_scaled():void//        {//            var container:DisplayObjectContainer = DocumentClass.container.addChild(new Sprite()) as DisplayObjectContainer;//            coordinateSpaceTarget = AlignTestUtil.fillColor(container, 400, 300);//            testSpriteIn(coordinateSpaceTarget);//            AlignTestUtil.placeRandomPos(coordinateSpaceTarget);//                    //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.Top).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testT_local());//                    //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.Top).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testT_local(null, 1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.Top).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testT_local(null, 2, 2));//        }////        test function local_TR_Container1_scaled():void//        {//            var container:DisplayObjectContainer = DocumentClass.container.addChild(new Sprite()) as DisplayObjectContainer;//            coordinateSpaceTarget = AlignTestUtil.fillColor(container, 400, 300);//            testSpriteIn(coordinateSpaceTarget);//            AlignTestUtil.placeRandomPos(coordinateSpaceTarget);//            //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.TopRight).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testTR_local());//            //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.TopRight).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testTR_local(1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.TopRight).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testTR_local(2, 2));//        }////        //------------------------------------------//        //  target is on level 2 of cordinateSpace//        //------------------------------------------//        test function local_T_Container2_scaled():void//        {//            var container:DisplayObjectContainer = DocumentClass.container.addChild(new Sprite()) as DisplayObjectContainer;//            coordinateSpaceTarget = AlignTestUtil.fillColor(container, 400, 300);//            var container2:DisplayObjectContainer = coordinateSpaceTarget.addChild(new Sprite()) as DisplayObjectContainer;//            container2 = AlignTestUtil.fillColor(container2, 200, 200);//            container2.x = 400;//            testSpriteIn(container2);//            AlignTestUtil.placeRandomPos(coordinateSpaceTarget);//                    //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.Top).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testT_local(container2));//                    //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.Top).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testT_local(container2, 1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.Top).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testT_local(container2, 2, 2));//        }////        test function local_TL_Container2_scaled():void//        {//            var container:DisplayObjectContainer = DocumentClass.container.addChild(new Sprite()) as DisplayObjectContainer;//            coordinateSpaceTarget = AlignTestUtil.fillColor(container, 400, 300);//            var container2:DisplayObjectContainer = coordinateSpaceTarget.addChild(new Sprite()) as DisplayObjectContainer;//            container2 = AlignTestUtil.fillColor(container2, 200, 200);//            testSpriteIn(container2);//            AlignTestUtil.placeRandomPos(coordinateSpaceTarget);//            AlignTestUtil.placeRandomPos(container2);//            //            //SCALE//            displayObject.scaleX = displayObject.scaleY = AlignTestUtil.TEST_SCALE;//            Align.align(displayObject, Align.TopLeft).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testTL_local());//            //            //ROTATION//            displayObject.rotation = AlignTestUtil.TEST_ROTATION;//            Align.align(displayObject, Align.TopLeft).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testTL_local(1, 1));////            //SHEAR//            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);//            Align.align(displayObject, Align.TopLeft).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testTL_local(2, 2));//        }                //--------------------------------------------------------------------------        //        //  Align with DocumentClass's child / cordinateSpace is scaled        //  cordinateSpace : Level 1        //  guide          : cordinateSpace        //        //--------------------------------------------------------------------------        //------------------------------------------        //  target is on level 1 of cordinateSpace        //------------------------------------------//        test function scaled_cordinateSpace_TL_level1():void//        {//            var container:Sprite = DocumentClass.container.addChild(new Sprite()) as Sprite;//            coordinateSpaceTarget = AlignTestUtil.fillColor(container, 400, 300);//            testSpriteIn(coordinateSpaceTarget);//            AlignTestUtil.placeRandomPos(coordinateSpaceTarget);//            trace("##", coordinateSpaceTarget.x, coordinateSpaceTarget.y);//                    //            //SCALE//            coordinateSpaceTarget.scaleX = .7;//            coordinateSpaceTarget.scaleY = .2;//            Align.align(displayObject, Align.TopLeft).along(coordinateSpaceTarget);//            drawMockOrigin();//            assertTrue(testTL_local());//                    ////            //ROTATION////            displayObject.rotation = AlignTestUtil.TEST_ROTATION;////            Align.align(displayObject, Align.TopLeft).along(coordinateSpaceTarget);////            drawMockOrigin();////            assertTrue(testTL_local(1, 1));////////            //SHEAR////            displayObject.transform.matrix = new Matrix(1, Math.tan(Math.PI * .2), Math.tan(Math.PI * .2), 1, 0, 0);////            Align.align(displayObject, Align.TopLeft).along(coordinateSpaceTarget);////            drawMockOrigin();////            assertTrue(testTL_local(2, 2));//        }		after function teardown () : void		{		}	}}