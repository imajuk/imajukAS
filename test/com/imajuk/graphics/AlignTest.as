package com.imajuk.graphics{    import com.imajuk.constructions.DocumentClass;    import com.imajuk.logs.Logger;    import com.imajuk.testImajuk;    import com.imajuk.utils.StageReference;    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.assertEquals;    import org.libspark.as3unit.assert.assertFalse;    import org.libspark.as3unit.assert.assertTrue;    import org.libspark.as3unit.assert.fail;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;    import flash.display.DisplayObject;    import flash.display.DisplayObjectContainer;    import flash.display.Sprite;    import flash.display.Stage;    use namespace test;    use namespace before;    use namespace after;    
    internal class AlignTest extends Sprite    {        /**         * Align.align(displayObject, Align.TopLeft).along(stage).withOffsetH(30).withOffsetV(30).usingAnimation().always();         */        private var displayObject:Sprite;                private var coordinateSpaceTarget:DisplayObjectContainer;        before function setupSample():void        {        	AlignTestUtil.initialize();            /**             * テスト用Sprite             * 自身の原点からランダムな位置に50x100の矩形が描画されている.             */            displayObject = AlignTestUtil.getTestView();        }        //--------------------------------------------------------------------------        //        //  Error        //        //--------------------------------------------------------------------------        //StageReferenceに依存        test function dependsSR():void        {
            Logger.release("dependsSR");            
            AlignTestUtil.testSpriteIn(new Sprite());                            var stageRef:Stage = StageReference.stage;            //StageReferenceを一時的にまだ初期化してない状態にする            StageReference.testImajuk::clear();            assertFalse(StageReference.isEnabled);                        try            {              //StageReferenceの初期化前に使用するとエラー                Align.align(displayObject, Align.TopLeft);                fail("fail() won't be execute.");            }            catch(e:Error)            {                assertEquals(AlignError.UNINITIALIZATION, e.message);            }
            finally
            {
                //StageReferenceを元に戻す                StageReference.testImajuk::repair(stageRef);
                assertTrue(StageReference.isEnabled);
            }        }        //ターゲットはStageであってはならない        test function targetMustNotBeStage():void        {            try            {                Align.align(StageReference.stage as DisplayObject, Align.TopLeft);                fail("fail() won't be execute.");            }            catch(e:Error)            {                assertEquals(AlignError.INVALID_TARGET_STAGE, e.message);            }        }        //ターゲットはドキュメントクラスであってはならない        test function targetMustNotBeDocumentClass():void        {            try            {                Align.align(DocumentClass.container, Align.TopLeft);                fail("fail() won't be execute.");            }            catch(e:Error)            {                assertEquals(AlignError.INVALID_TARGET_DOCUMENTCLASS, e.message);            }        }        //ターゲットと座標系オブジェクトが同一であってはならない        test function targetMustNotBeCoordinalObject():void        {            try            {                AlignTestUtil.testSpriteIn(StageReference.stage);                Align.align(displayObject, Align.TopLeft).along(displayObject);                fail("fail() won't be execute.");            }            catch(e:Error)            {                assertEquals(AlignError.INVALID_CONTAINER_SAMEASTARGET, e.message);            }        }        //ターゲットは表示リストにいなければならない        test function targetNeedsBeInDisplayList():void        {            try            {                Align.align(displayObject, Align.TopLeft);                fail("fail() won't be execute.");            }            catch(e:Error)            {                assertEquals(AlignError.INVALID_TARGET_DISPLAYLIST, e.message);            }        }        //座標系オブジェクトとターゲットオブジェクトが親子関係にある時、        //座標系オブジェクトはターゲットオブジェクトを考えずにサイズをもっていなければならない        test function containerHasOnlyTarget():void        {            try            {                coordinateSpaceTarget = DocumentClass.container.addChild(new Sprite()) as Sprite;                coordinateSpaceTarget.name = "testContainer";                AlignTestUtil.testSpriteIn(coordinateSpaceTarget);                                            Align.align(displayObject, Align.TopRight).along(coordinateSpaceTarget);                fail("fail() won't be execute.");            }            catch(e:Error)            {                assertEquals("testContainerを座標系オブジェクトとして実行しようとしましたが、testContainerはターゲット以外の子をもちません.", e.message);            }        }        //--------------------------------------------------------------------------        //        //  properties and default setting        //        //--------------------------------------------------------------------------                        //AlignはDisplayObjectをターゲットに持つ        test function target():void        {            AlignTestUtil.testSpriteIn(StageReference.stage);            assertTrue(Align.align(displayObject, Align.TopLeft) is Align);        }        //Align定義        test function defination():void        {            AlignTestUtil.testSpriteIn(StageReference.stage);            assertTrue(Align.TopLeft is IALignAction);        }        //デフォルトの座標系オブジェクトはStage        test function defaultCoordinatesSystem():void        {            AlignTestUtil.testSpriteIn(StageReference.stage);            assertTrue(Align.align(displayObject, Align.TopLeft).testImajuk::getCoordinateSpace() is Stage);        }                after function teardownSample():void        {        	AlignTestUtil.tearDown(coordinateSpaceTarget);        }    }}