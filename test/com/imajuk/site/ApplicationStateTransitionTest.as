package com.imajuk.site{    import com.imajuk.constructions.AppDomainRegistry;    import com.imajuk.constructions.DocumentClass;    import com.imajuk.logs.Logger;    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.assertEquals;    import org.libspark.as3unit.assert.async;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;    import org.libspark.thread.EnterFrameThreadExecutor;    import org.libspark.thread.Thread;    import flash.display.Sprite;    import flash.utils.setTimeout;    use namespace test;    use namespace before;    use namespace after;    internal class ApplicationStateTransitionTest extends Sprite    {        private static const WAIT : int = 800;
        private static const A : Reference = new Reference(StateA);
        private static const B : Reference = new Reference(StateB);
        private static const C : Reference = new Reference(StateC);
        private static const D : Reference = new Reference(StateD);
        private static const E : Reference = new Reference(StateE);
        private static const F : Reference = new Reference(StateF);        private static const G : Reference = new Reference(StateG);        private static const H : Reference = new Reference(StateH);        private static const I : Reference = new Reference(StateI);        private static const J : Reference = new Reference(StateJ);
        private var application : Application;
        private var state : ApplicationStateModel;
        private var assetReceipt : XML;
        private var stateReceipt : XML;        private static const VIEW_A : Reference = new Reference(ViewA);
        before function setup() : void        {            if (!Thread.isReady) Thread.initialize(new EnterFrameThreadExecutor());            Log.clear();                        MockStateThread.sid = 0;			            application = new Application("app", DocumentClass.container);                        //=================================            // ステートのレシピ            // これらのステートはステートの遷移時に            // フレームワークにより生成されます.            //=================================            stateReceipt = <{Recipe.STATE}>                    <{A}>                        <{B}>                            <{F}>                                <{H} />                            </{F}>                        </{B}>                        <{C}>                            <{F}>                                <{H} />                            </{F}>                        </{C}>                        <{D}>                            <{G}>                                <{H} />                            </{G}>                        </{D}>                        <{E} />                    </{A}>                    <{I} />                    <{J} />                </{Recipe.STATE}>;            state = new ApplicationStateModel(application, A, stateReceipt);         }        //=================================        // ○   ○        // A → B        // 子への移動：親ステートは終了しない        //=================================        test function A_B() : void        {        	Logger.release("A_B");        	            application.start(null, stateReceipt, A);            var f : Function = async(function():void            {                assertEquals("initialize[A(0)]initialize[B(1)]", Log.getLog());            });             setTimeout(function():void            {                application.changeState(B);                setTimeout(f, WAIT);            }, WAIT);        }        //=================================        // ○   ○   ○        // A → C → F        // 子孫への移動：祖先ステートは終了しない        //=================================        test function A_C_F() : void        {        	Logger.release("A_C_F");        	            application.start(null, stateReceipt, A);            var f : Function = async(function():void            {            	var res:String;            	//Aのスタート            	res = "initialize[A(0)]";            	//Cのスタート            	res += "initialize[C(1)]";            	//Fのスタート            	res += "initialize[F(2)]";            	                assertEquals(res, Log.getLog());            });             setTimeout(function():void            {                application.changeState(C);                setTimeout(function():void                {                    application.changeState(F);                	setTimeout(f, WAIT);                }, WAIT);            }, WAIT);        }                //=================================        // ○   x   ○        // A → B → A        // 親への移動：子ステートは終了        //=================================        test function A_B_A() : void        {        	Logger.release("A_B_A");        	            application.start(null, stateReceipt, A);            var f : Function = async(function():void            {                var res : String;                //Aのスタート                res = "initialize[A(0)]";                //Bのスタート                res += "initialize[B(1)]";                //Bの終了                res += "finalize[B(1)]";                                assertEquals(res, Log.getLog());            });             setTimeout(function():void            {                application.changeState(B);                setTimeout(function():void                {                    application.changeState(A);                    setTimeout(f, WAIT);                }, WAIT);            }, WAIT);        }                //=================================        // ○   x   x   ○        // A → D → G → A        // 祖先への移動：子孫ステートは終了        //=================================        test function A_D_G_A() : void        {        	Logger.release("A_D_G_A");        	        	assetReceipt = <{Recipe.ASSET}><{VIEW_A} src="testAsset/dammy.gif" /></{Recipe.ASSET}>;            application.start(assetReceipt, stateReceipt, A);                        var f : Function = async(function():void            {            	var res : String;                //Aのスタート                res = "initialize[A(0)]";                //Dのスタート                res += "initialize[D(1)]";                //Gのスタート                res += "initialize[G(2)]";                //Aにもどる                res += "finalize[D(1)]";                res += "finalize[G(2)]";                                assertEquals(res, Log.getLog());            });             setTimeout(function():void            {                application.changeState(D);                setTimeout(function():void                {                    application.changeState(G);                    setTimeout(function():void                    {                        application.changeState(A);                        setTimeout(f, WAIT);                    }, WAIT);                }, WAIT);            }, WAIT);        }        //=================================        // ○   x   x   ○        // A → C → F → D         // 別ツリーへの移動：現在のツリーは終了        //=================================        test function A_C_F_D() : void        {        	Logger.release("A_C_F_D");        	            application.start(null, stateReceipt, A);            var f : Function = async(function():void            {            	var res : String;                //Aのスタート                res = "initialize[A(0)]";                //Cのスタート                res += "initialize[C(1)]";                //Fのスタート                res += "initialize[F(2)]";                //Dのスタート                res += "finalize[C(1)]";                res += "finalize[F(2)]";                res += "initialize[D(3)]";                assertEquals(res, Log.getLog());            });             setTimeout(function():void            {                application.changeState(C);                setTimeout(function():void                {                    application.changeState(F);                    setTimeout(function():void                    {                        application.changeState(D);                        setTimeout(f, WAIT);                    }, WAIT);                }, WAIT);            }, WAIT);        }                //=================================        // ○   x   x   ○  ○        // A → C → F → G（D）         // 別ツリーへの移動（ステートの自動起動）：現在のツリーは終了        //=================================        test function A_C_F_G() : void        {            Logger.release("A_C_F_G");                        assetReceipt = <{Recipe.ASSET}><{VIEW_A} src="testAsset/dammy.gif" /></{Recipe.ASSET}>;            application.start(assetReceipt, stateReceipt, A);                        var f : Function = async(function():void            {                var res : String;                //Aのスタート                res = "initialize[A(0)]";                //Cのスタート                res += "initialize[C(1)]";                //Fのスタート                res += "initialize[F(2)]";                //Gのスタート                res += "finalize[C(1)]";                res += "finalize[F(2)]";                res += "initialize[D(3)]";                res += "initialize[G(4)]";                assertEquals(res, Log.getLog());            });             setTimeout(function():void            {                application.changeState(C);                setTimeout(function():void                {                    application.changeState(F);                    setTimeout(function():void                    {                        application.changeState(G);                        setTimeout(f, WAIT + 1000);                    }, WAIT);                }, WAIT);            }, WAIT);        }                //=================================        // x   ○        // A → I         // 別ツリーへの移動（往復）：現在のツリーは終了        //=================================        test function A_I() : void        {            Logger.release("A_I");                        application.start(null, stateReceipt, A);            var f : Function = async(function():void            {                var res : String;                //Aのスタート                res = "initialize[A(0)]";                //Iのスタート                res += "finalize[A(0)]";                res += "initialize[I(1)]";                //Aのスタート                res += "finalize[I(1)]";                res += "initialize[A(2)]";                assertEquals(res, Log.getLog());            });             setTimeout(function():void            {                application.changeState(I);                setTimeout(function():void                {
                    application.changeState(A);
                    setTimeout(f, WAIT);                }, WAIT);            }, WAIT);        }                //=================================        // x   ○   ○        // B → A → B        // 子から親へ移動後、同じ子に戻る：新しい子ステートが開始        //=================================        test function B_A_B() : void        {            Logger.release("B_A_B");                        application.start(null, stateReceipt, B);                        var f : Function = async(function():void            {                var res : String;                //Aのスタート                res = "initialize[A(0)]";                //Bのスタート                res += "initialize[B(1)]";                //Bの終了                res += "finalize[B(1)]";                //新しいBのスタート                res += "initialize[B(2)]";                                assertEquals(res, Log.getLog());            });             setTimeout(function():void            {                application.changeState(B);                setTimeout(function():void                {                    application.changeState(A);                    setTimeout(function():void                    {                        application.changeState(B);                        setTimeout(f, WAIT);                    }, WAIT);                }, WAIT);            }, WAIT);        }        after function teardown() : void        {        	AppDomainRegistry.getInstance().reset();        }    }}