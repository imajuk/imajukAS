package com.imajuk.site{    import flash.display.Sprite;    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.*;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;        use namespace test;        use namespace before;        use namespace after;    internal class ApplicationStateModelTest extends Sprite    {        private static const A : Reference = new Reference(StateA);        private static const B : Reference = new Reference(StateB);        private static const C : Reference = new Reference(StateC);        private static const D : Reference = new Reference(StateD);        private static const E : Reference = new Reference(StateE);        private static const F : Reference = new Reference(StateF);        private static const G : Reference = new Reference(StateG);        private static const H : Reference = new Reference(StateH);        private static const I : Reference = new Reference(StateI);        private static const J : Reference = new Reference(StateJ);        
        private var state : ApplicationStateModel;
        before function setup() : void        {            var stateReceipt : XML =                 <{Recipe.STATE}>                    <{A}>                        <{B}>                            <{F}>                                <{H} />                            </{F}>                        </{B}>                        <{C}>                            <{F}>                                <{H} />                                <{J} />                            </{F}>                        </{C}>                        <{D}>                            <{G}>                                <{H} />                            </{G}>                        </{D}>                        <{E} />                    </{A}>                    <{I} />                </{Recipe.STATE}>;                            state = new ApplicationStateModel(null, A, stateReceipt);         }                test function isSameTree() : void        {        	//祖先方向            state.currentStateType = H;            assertTrue(state.isSameTree(G));            assertTrue(state.isSameTree(D));            assertTrue(state.isSameTree(F));            assertTrue(state.isSameTree(C));            assertTrue(state.isSameTree(A));            assertFalse(state.isSameTree(J));            assertFalse(state.isSameTree(E));            assertFalse(state.isSameTree(I));            //子孫方向            state.currentStateType = D;            assertTrue(state.isSameTree(G));            assertTrue(state.isSameTree(H));            assertFalse(state.isSameTree(F));            assertFalse(state.isSameTree(E));                        state.currentStateType = F;            assertTrue(state.isSameTree(H));            assertTrue(state.isSameTree(J));                        state.currentStateType = J;            assertTrue(state.isSameTree(F));            assertFalse(state.isSameTree(H));        }        test function isCurrent() : void        {            state.currentStateType = A;            assertTrue(state.isCurrent(A));                        state.currentStateType = H;            assertTrue(state.isCurrent(H));        }        test function isAncestor() : void        {            state.currentStateType = H;            assertTrue(state.isAncestor(F));            assertTrue(state.isAncestor(C));            assertTrue(state.isAncestor(G));            assertTrue(state.isAncestor(D));            assertFalse(state.isAncestor(E));            assertFalse(state.isAncestor(I));            state.currentStateType = C;            assertTrue(state.isAncestor(A));            assertFalse(state.isAncestor(F));            assertFalse(state.isAncestor(E));                    }        test function isParent():void        {            state.currentStateType = H;            assertTrue(state.isParent(F));            assertTrue(state.isParent(G));            assertFalse(state.isParent(C));            assertFalse(state.isParent(D));            assertFalse(state.isParent(A));        }        test function getDecendants():void        {        	assertArrayEquals([F.encode(), H.encode(), J.encode()], state.getDecendants(C));        	assertArrayEquals([H.encode(), J.encode()], state.getDecendants(F));        	assertArrayEquals([], state.getDecendants(H));        	assertArrayEquals([], state.getDecendants(I));        }                after function teardown() : void        {        }    }}