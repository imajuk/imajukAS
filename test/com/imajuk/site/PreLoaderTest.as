package com.imajuk.site
{
    import com.imajuk.logs.Logger;
    import com.imajuk.service.Asset;
    import com.imajuk.service.PreLoader;

    import org.libspark.as3unit.after;
    import org.libspark.as3unit.assert.*;
    import org.libspark.as3unit.before;
    import org.libspark.as3unit.test;

    import flash.display.*;
    import flash.events.Event;
    import flash.events.HTTPStatusEvent;
    import flash.events.IOErrorEvent;
    import flash.events.ProgressEvent;
    import flash.net.URLRequest;
    use namespace test;    use namespace before;    use namespace after;    internal class PreLoaderTest extends Sprite    {        before function setupSample():void        {        }        test function asset():void        {
        	Logger.release("asset");
        	            var preLoader:PreLoader = new PreLoader();            var content1:Asset = preLoader.request(new URLRequest("testAsset/testAsset.swf"));            var content2:Asset = preLoader.request(new URLRequest("testAsset/testAsset.jpg"));            var content3:Asset = preLoader.request(new URLRequest("testAsset/testAsset.xml"));            var content4:Asset = preLoader.request(new URLRequest("testAsset/testAsset.txt"));			            preLoader.addEventListener(Event.COMPLETE, async(function():void            {                assertTrue(content1.content is MovieClip);                assertTrue(content2.content is Bitmap);                assertTrue(content3.content is XML);                assertTrue(content4.content is String);                assertEquals(4, XML(content3.content).child("type").length());            }, 3000));			            preLoader.execute();        }                test function join():void        {
        	Logger.release("join");
        	            var preLoader:PreLoader = new PreLoader();            var content1:Asset = preLoader.request(new URLRequest("testAsset/testAsset.swf"));            var content2:Asset = preLoader.request(new URLRequest("testAsset/testAsset.jpg"));			            var parentPreloader:PreLoader = new PreLoader();            var content3:Asset = parentPreloader.request(new URLRequest("testAsset/testAsset.xml"));			            parentPreloader.join(preLoader);						            preLoader.addEventListener(Event.COMPLETE, async(function():void            {                assertTrue(content1.content is MovieClip);                assertTrue(content2.content is Bitmap);                assertTrue(content3.content is XML);                assertEquals(4, XML(content3.content).child("type").length());            }, 1000));			            parentPreloader.execute();        }        test function progress_passProgress():void        {
        	Logger.release("progress_passProgress");
        	            var preLoader:PreLoader = new PreLoader();            preLoader.request(new URLRequest("testAsset/testAsset.swf"));            preLoader.request(new URLRequest("testAsset/testAsset.jpg"));            preLoader.request(new URLRequest("testAsset/testAsset.xml"));                        var chk:Number = 0;            preLoader.addEventListener(ProgressEvent.PROGRESS, function(e:ProgressEvent):void            {                var l:Number = PreLoader(e.target).percentLoaded;                assertTrue(chk <= l);                chk = l;            });			            preLoader.addEventListener(Event.COMPLETE, async(function():void            {                assertEquals(1, preLoader.percentLoaded);            }, 1000));			            preLoader.execute();        }                test function progress_withoutProgress():void        {
        	Logger.release("progress_withoutProgress");
        	            var preLoader:PreLoader = new PreLoader();            preLoader.request(new URLRequest("testAsset/testAsset.swf"));            preLoader.request(new URLRequest("testAsset/testAsset.jpg"));            preLoader.request(new URLRequest("testAsset/testAsset.xml"));                        var chk:Number = 0;            preLoader.addEventListener(ProgressEvent.PROGRESS, function(e:ProgressEvent):void            {                var l:Number = PreLoader(e.target).percentLoaded;                assertTrue(chk <= l);                chk = l;            });                        preLoader.addEventListener(Event.COMPLETE, async(function():void            {                assertEquals(1, preLoader.percentLoaded);            }, 1000));                        preLoader.execute();        }        test function isExecuting_progress():void        {
        	Logger.release("isExecuting_progress");
        	            var preLoader:PreLoader = new PreLoader();            preLoader.request(new URLRequest("testAsset/testAsset.swf"));            preLoader.request(new URLRequest("testAsset/testAsset.jpg"));            preLoader.request(new URLRequest("testAsset/testAsset.xml"));						            preLoader.addEventListener(ProgressEvent.PROGRESS, async(function(e:ProgressEvent):void            {                assertTrue(PreLoader(e.target).isExecuting);            }, 1000));						assertFalse(preLoader.isExecuting);            preLoader.execute();			assertTrue(preLoader.isExecuting);        }                test function isExecuting_completion():void        {
        	Logger.release("isExecuting_completion");
        	            var preLoader:PreLoader = new PreLoader();            preLoader.request(new URLRequest("testAsset/testAsset.swf"));            preLoader.request(new URLRequest("testAsset/testAsset.jpg"));            preLoader.request(new URLRequest("testAsset/testAsset.xml"));			            preLoader.addEventListener(Event.COMPLETE, async(function(e:Event):void            {                assertFalse(PreLoader(e.target).isExecuting);            }, 1000));			            preLoader.execute();        }        /**         * IOErrorEvent         */        test function ioErrorEvent():void        {
        	Logger.release("ioErrorEvent");
        	            var preLoader:PreLoader = new PreLoader();            var content1:Asset = preLoader.request(new URLRequest("notFound.swf"));            preLoader.addEventListener(IOErrorEvent.IO_ERROR, async(function(e:IOErrorEvent):void            {                assertEquals(null, content1.content);            }, 1000));            preLoader.execute();        }        /**         * httpStatus404         */        test function httpStatusEvent_404():void        {
        	Logger.release("httpStatusEvent_404");
        	            var preLoader:PreLoader = new PreLoader();            var content2:Asset = preLoader.request(new URLRequest("http://www.imajuk.com/notFound.jpg"));            preLoader.addEventListener(HTTPStatusEvent.HTTP_STATUS, async(function(e:HTTPStatusEvent):void            {                assertEquals(null, content2.content);                assertEquals(404, e.status);            }, 5000));            preLoader.addEventListener(IOErrorEvent.IO_ERROR, function():void{});            preLoader.execute();        }        /**         * loaderInfo         */        test function loaderInfo():void        {
        	Logger.release("loaderInfo");
        	            var preLoader:PreLoader = new PreLoader();            var content1:Asset = preLoader.request(new URLRequest("testAsset/testAsset.swf"));            var content3:Asset = preLoader.request(new URLRequest("testAsset/testAsset.xml"));			            preLoader.addEventListener(Event.COMPLETE, async(function():void            {//                assertEquals("file:///Users/shin yamaharu/Documents/workspace/imajukLib/test/testAsset/testAsset.swf", content1.loaderInfo.url);                assertTrue(content1.loaderInfo.url.indexOf("/test/testAsset/testAsset.swf") > -1);                assertEquals(null, content3.loaderInfo);            }, 1000));			            preLoader.execute();        }        /**         * stop         */        test function stop():void        {
        	Logger.release("stop");
        	            var preLoader:PreLoader = new PreLoader();            preLoader.request(new URLRequest("testAsset/testAsset.swf"));            preLoader.request(new URLRequest("testAsset/testAsset.xml"));                        preLoader.addEventListener(Event.COMPLETE, function():void            {                fail("このイベントは発行されない.");            });                        preLoader.execute();            assertTrue(preLoader.stop());        }        /**         * resume         */        test function resume():void        {
        	Logger.release("resume");
        	            var preLoader:PreLoader = new PreLoader();            var content1:Asset = preLoader.request(new URLRequest("testAsset/testAsset.swf"));            var content2:Asset = preLoader.request(new URLRequest("testAsset/testAsset.xml"));            var content3:Asset = preLoader.request(new URLRequest("testAsset/testAsset.jpg"));                        preLoader.addEventListener(ProgressEvent.PROGRESS, function(e:ProgressEvent):void            {                preLoader.removeEventListener(ProgressEvent.PROGRESS, arguments.callee);                preLoader.pause();                assertTrue(preLoader.resume());            });                        preLoader.addEventListener(Event.COMPLETE, async(function():void            {                assertTrue(content1.content is MovieClip);                assertTrue(content2.content is XML);                assertTrue(content3.content is Bitmap);                assertEquals(4, XML(content2.content).child("type").length());            }));                        assertFalse(preLoader.resume());            preLoader.execute();            assertFalse(preLoader.resume());        }        /**         * pause         */        test function pause1():void        {
        	Logger.release("pause1");
        	            var preLoader:PreLoader = new PreLoader();            preLoader.request(new URLRequest("testAsset/testAsset.xml"));                        preLoader.addEventListener(ProgressEvent.PROGRESS, function(e:ProgressEvent):void            {                preLoader.removeEventListener(ProgressEvent.PROGRESS, arguments.callee);                assertTrue(preLoader.pause());            });                        preLoader.addEventListener(Event.COMPLETE, function():void            {                trace("COMPLETE");                fail("このイベントは発行されない.");            });                        assertFalse(preLoader.pause());            preLoader.execute();        }
        /**
         * 2回続けたpuase()は2度目は無視する
         */        test function pause2():void        {
        	Logger.release("pause2");
        	            var preLoader:PreLoader = new PreLoader();            preLoader.request(new URLRequest("testAsset/testAsset.swf"));                        preLoader.addEventListener(ProgressEvent.PROGRESS, function(e:ProgressEvent):void            {                preLoader.removeEventListener(ProgressEvent.PROGRESS, arguments.callee);                assertTrue(preLoader.pause());            });                        preLoader.addEventListener(Event.COMPLETE, function():void            {                fail("このイベントは発行されない.");            });                        assertFalse(preLoader.pause());            preLoader.execute();        }
        /**
         * 終了イベントは一度だけしか発行されない
         */        test function completion():void        {        	Logger.release("completion");        	            var preLoader:PreLoader = new PreLoader();            preLoader.request(new URLRequest("testAsset/testAsset.swf"));            preLoader.request(new URLRequest("testAsset/testAsset.xml"));            preLoader.request(new URLRequest("testAsset/testAsset.jpg"));                        var c:int = 0;            preLoader.addEventListener(Event.COMPLETE, function():void            {                if(c++ > 0)                    throw new Error("2回以上のEvent.COMPLETE");            });                        preLoader.pause();            preLoader.execute();        }//        //        test function additionalProgress():void//        {//        	var preLoader2:PreLoader = new PreLoader();//            //            var preLoader:PreLoader = new PreLoader();//            preLoader.request(new URLRequest("testAsset/testAsset.swf"));//            //            preLoader.join(preLoader2);//            //            preLoader.addEventListener(ProgressEvent.PROGRESS, function(e:ProgressEvent):void//            {//                trace(preLoader.percentLoaded);//                if (preLoader.percentLoaded == .5)//                {//                }//            });//            //            preLoader.addEventListener(Event.COMPLETE, async(function() : void
//            {
//                assertTrue(true);
//            }));//            //            //            preLoader.execute();//        }    }}