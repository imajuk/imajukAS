package com.imajuk.site{    import com.imajuk.constructions.AppDomainRegistry;    import com.imajuk.constructions.DocumentClass;    import com.imajuk.logs.Logger;    import com.imajuk.utils.DisplayObjectUtil;    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.assertEquals;    import org.libspark.as3unit.assert.assertTrue;    import org.libspark.as3unit.assert.async;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;    import org.libspark.thread.EnterFrameThreadExecutor;    import org.libspark.thread.Thread;    import flash.display.Bitmap;    import flash.display.Sprite;    import flash.utils.setTimeout;        use namespace test;    use namespace before;    use namespace after;    internal class ViewRecipeTest extends Sprite    {        private static const WAIT : int = 800;        private static const A : Reference = new Reference(StateA);        private static const G : Reference = new Reference(StateG);        private var application : Application;        private var assetReceipt : *;
        private var contentLayer : Sprite;
        private var stateReceipt : XML;
        before function setup() : void        {            if (!Thread.isReady) Thread.initialize(new EnterFrameThreadExecutor());            Log.clear();                        MockStateThread.sid = 0;                        //=================================            // アプリケーションを生成            //=================================            application = new Application("app", DocumentClass.container as Sprite);        	contentLayer = ApplicationLayer.getLayer(ApplicationLayer.CONTENT);        	DisplayObjectUtil.removeAllChildren(contentLayer);        }                //--------------------------------------------------------------------------        //  生アセット、addChildは自動でされない        //--------------------------------------------------------------------------        test function withoutView_notInDisplayList() : void        {            Logger.release("withoutView_notInDisplayList");                        assetReceipt =                            <{ Recipe.ASSET }>                   <{ Reference.INBOX } src="dammy.gif" />               </{ Recipe.ASSET }>;                           //=================================            // ステートのレシピ            // これらのステートはステートの遷移時に            // フレームワークにより生成されます.            //=================================            stateReceipt =                 <{Recipe.STATE}>                    <{A} />                </{Recipe.STATE}>;            //=================================            // アプリケーションをスタート            //=================================            application.start(assetReceipt, stateReceipt, A);                        setTimeout(async(function():void            {            	assertEquals(0, contentLayer.numChildren);            }), WAIT);        }                //--------------------------------------------------------------------------        //  Viewでラップ、addChildは自動でされない        //--------------------------------------------------------------------------        test function wrapByView_notInDisplayList() : void        {        	Logger.release("wrapByView_notInDisplayList");        	            assetReceipt =                            <{ Recipe.ASSET }>                   <{ new Reference(ViewA) } src="dammy.gif" />               </{ Recipe.ASSET }>;                           //=================================            // ステートのレシピ            // これらのステートはステートの遷移時に            // フレームワークにより生成されます.            //=================================            var stateReceipt:XML =                 <{Recipe.STATE}>                    <{G} />                </{Recipe.STATE}>;                            //=================================            // アプリケーションをスタート            //=================================            application.start(assetReceipt, stateReceipt, G);                        setTimeout(async(function():void            {            	//addChildされてない            	assertEquals(0, contentLayer.numChildren);            	//Viewは取得できる            	assertTrue(InstanceRegistory.getInstance().getAsset(new Reference(ViewA)) is ViewA);            	//Viewのアセットをチェック            	assertTrue(ViewA(InstanceRegistory.getInstance().getAsset(new Reference(ViewA))).asset is Bitmap);            }), WAIT);        }        after function teardown() : void        {        	DisplayObjectUtil.removeAllChildren(contentLayer);        	AppDomainRegistry.getInstance().reset();        }    }}