package com.imajuk.site{    import com.imajuk.constructions.AppDomainRegistry;    import com.imajuk.constructions.DocumentClass;    import com.imajuk.logs.Logger;    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.assertEquals;    import org.libspark.as3unit.assert.async;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;    import org.libspark.thread.EnterFrameThreadExecutor;    import org.libspark.thread.Thread;    import flash.display.Sprite;    import flash.utils.setTimeout;    use namespace test;    use namespace before;    use namespace after;    internal class ApplicationProgressTest extends Sprite    {        private static const WAIT : int = 800;
        private static const A : Reference = new Reference(StateA);
        private static const A_progress : Reference = new Reference(State_withProgressView_A);        private static const D_progress : Reference = new Reference(State_withProgressView_D);
        private var application : Application;
        private var assetReceipt : *;
        private var stateReceipt : XML;
        before function setup() : void        {        	//=================================        	// 初期化        	//=================================            if (!Thread.isReady) Thread.initialize(new EnterFrameThreadExecutor());            Log.clear();            MockStateThread.sid = 0;            MockStateThread2.sid = 0;            ProgressView.sid = 0;            InstanceRegistory.reset();						//=================================			// アプリケーション			//=================================            application = new Application("app", DocumentClass.container);        }                /**         * ステートのプログレス         * プログレスビューの終了を待ってステートを開始する         */        test function waitFinishingAndRun() : void        {        	Logger.release("waitFinishingAndRun");        	        	//=================================            // アセットレシピ            //=================================            assetReceipt =                 <{Recipe.ASSET}>                    <{new Reference(ViewA)}        src="dammy.gif" />                    <{new Reference(ProgressView)} src="dammy2.gif" />                </{Recipe.ASSET}>;             //=================================            // ステートレシピ            //=================================            stateReceipt =                 <{Recipe.STATE}>                    <{A}>                        <{A_progress} />                    </{A}>                </{Recipe.STATE}>;        	        	//アプリケーションをスタート            application.start(assetReceipt, stateReceipt, A);                        CallbackInvoker.setCallback(                 A_progress,                async(function():void                {                	trace(Log.getLog());                	var s:String =                 	   "initialize[A(0)]" +                           //ステートA開始                 	   "progressCreated(0)" +                                  	   "progressBuilded(0)progressShow(0)" +   //ProgressViewの初期化と表示                	   "progressHide(0)progressDestroyed(0)" + //ProgressViewの非表示と破棄                	   "initialize[A_progress(1)]";                   //ステートA'の開始                	                        assertEquals(s, Log.getLog());                }));                         setTimeout(function():void            {                application.changeState(A_progress);            }, WAIT);        }                                //=================================        // アセットレシピに存在しないプログレスビューを指定        // プログレスビューは生成されない        //=================================        test function no_progress() : void        {            Logger.release("fail_progress");                        //=================================            // アセットレシピ            //=================================            assetReceipt =                 <{Recipe.ASSET}>                    <{new Reference(ViewA)} src="dammy.gif" lazy="true"/>                </{Recipe.ASSET}>;             //=================================            // ステートレシピ            //=================================            stateReceipt =                 <{Recipe.STATE}>                    <{D_progress} />                </{Recipe.STATE}>;                                    //アプリケーションをスタート
            application.start(assetReceipt, stateReceipt, D_progress);                        CallbackInvoker.setCallback(D_progress,                 async(                    function():void                    {                        var s:String =                            "finalize[D_progress(0)]";                                                                      assertEquals(s, Log.getLog());                    }                )            );        }                //=================================        // プログレスフェーズが終わる前にpercentの値が1になってしまわないかどうか        //=================================                after function teardown() : void        {        	AppDomainRegistry.getInstance().reset();        }    }}