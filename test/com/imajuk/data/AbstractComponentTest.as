package com.imajuk.data{	import com.imajuk.data.IIterator;		import com.imajuk.data.ComponentIterator;		import flash.display.*;	import org.libspark.as3unit.after;	import org.libspark.as3unit.assert.*;	import org.libspark.as3unit.before;	import org.libspark.as3unit.test;	use namespace test;	use namespace before;	use namespace after;	internal class AbstractComponentTest extends Sprite	{		before function setupSample () : void		{		}		test function add () : void		{			var group : AbstractComponent;			group = new AbstractComponent();						group.add(new AbstractComponent());			assertEquals(1, group.numChildren);			group.add(new AbstractComponent());			assertEquals(2, group.numChildren);						/**			 * nullをaddしても無視			 */			group.add(null);			assertEquals(2, group.numChildren);		}		test function remove () : void		{			var group : AbstractComponent;			group = new AbstractComponent();					var item1 : AbstractComponent = new AbstractComponent();				var item2 : AbstractComponent = new AbstractComponent();				group.add(item1);			group.add(item2);			group.remove(item2);			assertEquals(1, group.numChildren);			assertTrue(group.contains(item1));			group.remove(item1);			assertEquals(0, group.numChildren);						/**			 * 存在しないchildのremove()			 */			group.remove(item2);			group.remove(null);		}		/**		 * リーフがコンポジットに含まれているかどうかを返す		 */		test function contain () : void		{			var group : AbstractComponent = new AbstractComponent();			var item1 : AbstractComponent = new AbstractComponent();				group.add(item1);			assertTrue(group.contains(item1));		}		/**		 * 直下の子供のイテレーションを返す		 */		test function childiterator () : void		{			var group : AbstractComponent = new AbstractComponent();			var item1 : AbstractComponent = new AbstractComponent();			var item2 : AbstractComponent = new AbstractComponent();			var item3 : AbstractComponent = new AbstractComponent();			group.add(item1);			group.add(item2);			group.add(item3);			assertTrue(group.childIterator is IIterator);						var c : int = 0;			var i : IIterator = group.childIterator;			while(i.hasNext())			{				c ++;				i.next();				assertEquals(c, i.position);			}			assertEquals(3, c);		}		/**		 * 再帰的に全ての子供のイテレーションを返す		 */		test function iterator () : void		{			var group1 : AbstractComponent = new AbstractComponent();			var group2 : AbstractComponent = new AbstractComponent();			var group3 : AbstractComponent = new AbstractComponent();			var item1 : AbstractComponent = new AbstractComponent();				var item2 : AbstractComponent = new AbstractComponent();				group1.add(group2);			group1.add(group3);			group2.add(item1);			group2.add(item2);			assertTrue(group1.iterator is ComponentIterator);						var c : int = 0;			var i : ComponentIterator = group1.iterator as ComponentIterator;			//イテレーションは group2-item1-item2-group3 			while(i.hasNext())			{				c ++;				i.next();				assertEquals(c, i.position);			}			assertEquals(4, i.position);		}		after function teardownSample () : void		{		}	}}