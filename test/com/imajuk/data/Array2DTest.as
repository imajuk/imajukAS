package com.imajuk.data{	import flash.display.*;
	import flash.geom.Point;
	import org.libspark.as3unit.after;	import org.libspark.as3unit.assert.*;	import org.libspark.as3unit.before;	import org.libspark.as3unit.test;	use namespace test;	use namespace before;	use namespace after;	import com.imajuk.data.Array2D;
	import com.imajuk.data.IIterator;	import com.imajuk.data.IArray2DIterator;	import com.imajuk.data.ReverseIterator;		internal class Array2DTest extends Sprite	{		before function setupSample () : void		{		}
						/**		 * Array2Dは2次元配列であり、縦横のサイズを持つ		 */		test function getSize () : void		{			var a : Array2D;			a = new Array2D();			assertEquals(0, a.cols);			assertEquals(0, a.rows);		}
						test function setSize () : void		{			/**			 * コンストラクタによるサイズの変更			 */			var a : Array2D;			a = new Array2D(4, 3);			assertEquals(4, a.cols);			assertEquals(3, a.rows);						/**			 * セッターによるサイズの変更			 */			//元のサイズより小さい			a.cols = 3;			a.rows = 2;			assertEquals(3, a.cols);			assertEquals(2, a.rows);			assertSame(undefined, a.getElement(2, 0));			assertSame(undefined, a.getElement(2, 1));			assertSame(null, a.getElement(3, 0));			assertSame(null, a.getElement(3, 2));			//元のサイズより大きい			a.cols = 5;			assertEquals(5, a.cols);									/**			 * 要素の追加によるサイズの変更			 */			a = new Array2D();			a.setElement(0, 0, "0_0");			assertEquals(1, a.cols);			a.setElement(1, 0, "1_0");			assertEquals(2, a.cols);			a.setElement(0, 1, "0_1");			assertEquals(2, a.rows);						a = new Array2D();			a.setElement(2, 1, "1_1");			assertEquals(3, a.cols);			assertEquals(2, a.rows);		}
						test function iterator () : void		{			var a : Array2D;			a = new Array2D(4, 3);			var i : IArray2DIterator = a.iterator();			var c : int = 0;			while(i.hasNext())			{				c ++;				var p : Point = i.position as Point;				assertNotSame(p, i.position);				i.next();			}			assertEquals(4 * 3, i.size);			assertEquals(4 * 3, c);		}
						test function toArray () : void		{			var a : Array2D;			var b : Array;			a = new Array2D(4, 3);			b = a.toArray();			var i : IIterator = a.iterator();			var c : int = 0;			while(i.hasNext())			{				assertEquals(b[c], i.next());				c ++;			}		}
						test function appendRows () : void		{			var a : Array2D;			a = new Array2D(4, 3);			a.appendRows(2);			assertEquals(5, a.rows);			assertEquals(4, a.cols);			a.appendRows(0);			assertEquals(5, a.rows);			assertEquals(4, a.cols);			a.appendRows(- 1);			assertEquals(5, a.rows);			assertEquals(4, a.cols);		}
						test function appendCols () : void		{			var a : Array2D;			a = new Array2D(4, 3);			a.appendCols(2);			assertEquals(6, a.cols);			assertEquals(3, a.rows);			a.appendCols(0);			assertEquals(6, a.cols);			assertEquals(3, a.rows);			a.appendCols(- 1);			assertEquals(6, a.cols);			assertEquals(3, a.rows);		}
						test function getCol () : void		{			var a : Array2D;			a = new Array2D(4, 3);			a.setElement(1, 0, "A");			a.setElement(1, 1, "A");			a.setElement(1, 2, "A");						var c0 : Array = a.getColElement(0);			assertEquals(3, c0.length);			var c1 : Array = a.getColElement(1);			assertEquals(3, c1.length);			for (var i : Number = 0;i < c0.length; i ++) 			{				assertEquals(undefined, c0[i]);				assertEquals("A", c1[i]);			}		}
						test function getRows () : void		{			var a : Array2D;			a = new Array2D(4, 3);			a.setElement(0, 1, "A");			a.setElement(1, 1, "A");			a.setElement(2, 1, "A");			a.setElement(3, 1, "A");						var c0 : Array = a.getRowElement(0);			assertEquals(4, c0.length);			var c1 : Array = a.getRowElement(1);			assertEquals(4, c1.length);			for (var i : Number = 0;i < c0.length; i ++) 			{				assertEquals(undefined, c0[i]);				assertEquals("A", c1[i]);			}		}
						/**		 * diagonalIteratorは、対角線上のノードを返す		 */		test function diagonalIterator () : void		{			var a : Array2D = new Array2D(4, 3);			var i : IArray2DIterator = a.iterator();			while(i.hasNext())			{				var x : int = i.cursorX;				var y : int = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}						var result : Array = [ "0_0", "1_0", "1_1", "2_1", "2_2", "3_2" ];						var gi : IArray2DIterator = a.diagonalIterator();			while(gi.hasNext())			{				var ex : String = result[gi.position];				assertEquals(ex, gi.next());			}			assertEquals(6, gi.size);		}
						/**		 * aroundHalfIterator()はRoundHalfIteratorを返す		 */		test function aroundHalfIterator () : void		{			var a : Array2D = new Array2D(4, 3);			var i : IArray2DIterator = a.iterator();			while(i.hasNext())			{				var x : int = i.cursorX;				var y : int = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}						var result : Array = [ "0_0", "1_0", "2_0", "3_0", "3_1", "3_2" ];						var gi : IArray2DIterator = a.aroundHalfIterator();			var c : int = 0;			while(gi.hasNext())			{				var e : String = gi.next() as String;				assertEquals(result[c ++], e);			}			assertEquals(result.length, c);			assertEquals(result.length, gi.size);		}
						/**		 * u_r_Iterator()はU_R_Iteratorを返す		 */		test function u_r_Iterator () : void		{			var x : int;			var y : int;			var a : Array2D;			a = new Array2D(4, 3);			var i : IArray2DIterator = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}						var result : Array = [ "0_2", "0_1", "0_0", "1_2", "1_1", "1_0", "2_2", "2_1", "2_0", "3_2", "3_1", "3_0" ];						var gi : IArray2DIterator;			gi = a.u_r_Iterator();			var c : int;			c = 0;			while(gi.hasNext())			{				var resultTemp : String = result[c];				var rx : int = int(resultTemp.split("_")[0]);				var ry : int = int(resultTemp.split("_")[1]);				x = gi.cursorX;				y = gi.cursorY;				assertEquals(rx, x);				assertEquals(ry, y);				var e : String = gi.next() as String;				assertEquals(result[c], e);				c ++;			}			assertEquals(result.length, c);			assertEquals(result.length, gi.size);		}
						test function getPositionByIndex () : void		{			var a : Array2D;			var i : IArray2DIterator;			var x : int;			var y : int;			a = new Array2D(3, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}						var c : int = 0;			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				assertEquals(new Point(x, y), a.getPositionByIndex(c ++));				i.next();			}		}
						test function getElementByIndex () : void		{			var a : Array2D;			var i : IArray2DIterator;			a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}						var c : int = 0;			i = a.iterator();			while(i.hasNext())			{				assertEquals(i.next(), a.getElementByIndex(c ++));			}		}
						test function shiftDown () : void		{			var a : Array2D;			var i : IArray2DIterator;			var x : int;			var y : int;			a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a = a.shiftDown(1);			assertEquals(undefined, a.getElement(0, 0));			assertEquals("0_0", a.getElement(0, 1));			assertEquals("0_1", a.getElement(0, 2));			assertEquals(undefined, a.getElement(0, 3));						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a = a.shiftDown(2);			assertEquals(undefined, a.getElement(0, 0));			assertEquals(undefined, a.getElement(0, 1));			assertEquals("0_0", a.getElement(0, 2));			assertEquals(undefined, a.getElement(0, 3));						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a = a.shiftDown(1, true);			assertEquals("0_2", a.getElement(0, 0));			assertEquals("0_0", a.getElement(0, 1));			assertEquals("0_1", a.getElement(0, 2));			assertEquals(undefined, a.getElement(0, 3));		}
						test function shiftUp () : void		{			var a : Array2D;			var i : IArray2DIterator;			var x : int;			var y : int;						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a = a.shiftUp(1, true);			assertEquals("0_1", a.getElement(0, 0));			assertEquals("0_2", a.getElement(0, 1));			assertEquals("0_0", a.getElement(0, 2));			assertEquals(undefined, a.getElement(0, 3));			a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a = a.shiftUp(2);			assertEquals("0_2", a.getElement(0, 0));			assertEquals(undefined, a.getElement(0, 1));			assertEquals(undefined, a.getElement(0, 2));			assertEquals(undefined, a.getElement(0, 3));		}
						test function shiftLeft () : void		{			var a : Array2D;			var i : IArray2DIterator;			var x : int;			var y : int;						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a = a.shiftLeft(1, true);			assertEquals("1_0", a.getElement(0, 0));			assertEquals("2_0", a.getElement(1, 0));			assertEquals("3_0", a.getElement(2, 0));			assertEquals("0_0", a.getElement(3, 0));			assertEquals(undefined, a.getElement(4, 0));			assertEquals(12, a.size);			a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a = a.shiftLeft(2);			assertEquals("2_0", a.getElement(0, 0));			assertEquals("3_0", a.getElement(1, 0));			assertEquals(undefined, a.getElement(2, 0));			assertEquals(undefined, a.getElement(3, 0));			assertEquals(12, a.size);						a = new Array2D(2, 2);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, false);				i.next();			}			a = a.shiftLeft(1, true);			assertEquals(false, a.getElement(1, 0));			assertEquals("boolean", typeof a.getElement(1, 0));		}
						test function shiftRight () : void		{			var a : Array2D;			var i : IArray2DIterator;						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a = a.shiftRight(1, true);			assertEquals("3_0", a.getElement(0, 0));			assertEquals("0_0", a.getElement(1, 0));			assertEquals("1_0", a.getElement(2, 0));			assertEquals("2_0", a.getElement(3, 0));			assertEquals(undefined, a.getElement(4, 0));			assertEquals(12, a.size);			a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a = a.shiftRight(2);			assertEquals(undefined, a.getElement(0, 0));			assertEquals(undefined, a.getElement(1, 0));			assertEquals("0_0", a.getElement(2, 0));			assertEquals("1_0", a.getElement(3, 0));			assertEquals(undefined, a.getElement(4, 0));			assertEquals(12, a.size);						a = new Array2D(2, 2);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, false);				i.next();			}			a = a.shiftRight(1, true);			assertEquals(false, a.getElement(1, 0));		}
						test function getIndexByPosition () : void		{			var a : Array2D;						a = new Array2D(4, 2);			assertEquals(0, a.getIndexByPosition(0, 0));			assertEquals(3, a.getIndexByPosition(3, 0));			assertEquals(4, a.getIndexByPosition(0, 1));			assertEquals(7, a.getIndexByPosition(3, 1));		}
						test function map () : void		{			var a : Array2D;			var i : IArray2DIterator;						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a = a.map(a.u_r_Iterator());						var result : Array = [ "2_0","1_1","0_2","3_2","1_0","0_1","3_1","2_2","0_0","3_0","2_1","1_2" ];			i = a.iterator();			while(i.hasNext())			{				assertEquals(result[i.position], i.next());			}		}
						test function removeRow () : void		{			var a : Array2D;			var i : IArray2DIterator;						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a.removeRow(2);			assertEquals(1, a.rows);						a.appendRows(5);			assertEquals(6, a.rows);			a.removeRow(6);			assertEquals(1, a.rows);		}
						test function removeCol () : void		{			var a : Array2D;			var i : IArray2DIterator;						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}			a.removeCol(2);			assertEquals(2, a.cols);						a.appendCols(5);			assertEquals(7, a.cols);			a.removeCol(6);			assertEquals(1, a.cols);		}
						test function removeAndAppend () : void		{			var a : Array2D;			var i : IArray2DIterator;						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}						a.removeRow(2);			a.appendRows(2);			assertEquals(3, a.rows);		}						test function spliceCols () : void		{			var a : Array2D;			var i : IArray2DIterator;						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}						var sp : Array2D;			sp = a.spliceCols(0, 1);			assertEquals(1, sp.cols);			assertEquals("0_0", sp.getElement(0, 0));			assertEquals(3, a.cols);						sp = a.spliceCols(0, 2);			assertEquals(2, sp.cols);			assertEquals("2_0", sp.getElement(1, 0));			assertEquals(1, a.cols);						sp = a.spliceCols(0, 1);			assertEquals(null, sp);			assertEquals(1, a.cols);		}				test function concatCols () : void		{			var a : Array2D;			var i : IArray2DIterator;						a = new Array2D(4, 3);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, x + "_" + y);				i.next();			}						var sp : Array2D;			sp = a.spliceCols(1, 1);			assertEquals(1, sp.cols);			assertEquals(3, sp.rows);			assertEquals("1_0", sp.getElement(0, 0));			assertEquals(3, a.cols);			assertEquals(3, a.rows);			assertEquals("0_0", a.getElement(0, 0));			assertEquals("2_0", a.getElement(1, 0));			assertEquals("3_2", a.getElement(2, 2));						a = sp.concat(a);			assertEquals(4, a.cols);			assertEquals(3, a.rows);			assertEquals("1_0", a.getElement(0, 0));			assertEquals("0_0", a.getElement(1, 0));			assertEquals("2_0", a.getElement(2, 0));					}						test function reverseIterator () : void		{			var a : Array2D;			var i : IArray2DIterator;			var c : int;			var x : int;			var y : int;						c = 0;			a = new Array2D(13, 10);			i = a.iterator();			while(i.hasNext())			{				x = i.cursorX;				y = i.cursorY;				a.setElement(x, y, ++ c);				i.next();			}						var reverse : IArray2DIterator = a.reverseIterator();			assertTrue(reverse is ReverseIterator);						c = 130;			while(reverse.hasNext())			{				x = reverse.cursorX;				y = reverse.cursorY;				var data : int = int(reverse.next());				assertEquals(c --, data);			}						assertEquals(130, reverse.size);		}
						after function teardownSample () : void		{		}	}}