package com.imajuk.commands{	import com.imajuk.events.AsyncEvent;		import flash.events.Event;		import flash.display.*;	import org.libspark.as3unit.after;	import org.libspark.as3unit.assert.*;	import org.libspark.as3unit.before;	import org.libspark.as3unit.test;	use namespace test;	use namespace before;	use namespace after;	internal class CommandCompositeTest extends Sprite    {        private var emptyFunction:Function;                before function setupSample () : void        {            emptyFunction = function():void            {            };        }        test function isExecuting () : void		{			var comp : CommandComponent = new CommandComposite();						comp.add(new CommandLeaf(new AsyncTestCommand(emptyFunction)));			comp.addEventListener(Event.COMPLETE, async(function():void			{				assertFalse(comp.isExecuting);			}, 1000));						assertFalse(comp.isExecuting);			comp.execute();			assertTrue(comp.isExecuting);		}		test function isComplete () : void		{			var comp : CommandComponent = new CommandComposite();						comp.add(new CommandLeaf(new AsyncTestCommand(emptyFunction)));			comp.addEventListener(Event.COMPLETE, async(function():void			{				assertTrue(comp.isCompleted);			}, 1000));						assertFalse(comp.isCompleted);			comp.execute();			assertFalse(comp.isCompleted);		}		test function async_startEvent () : void		{			var comp : CommandComposite = new CommandComposite();						comp.add(new CommandLeaf(new AsyncTestCommand(emptyFunction)));			comp.addEventListener(AsyncEvent.START, async(function():void			{				assertTrue(comp.isExecuting);				assertFalse(comp.isCompleted);			}, 1000));						comp.execute();		}		test function async_complete () : void		{			var comp : CommandComposite = new CommandComposite();						comp.add(new CommandLeaf(new AsyncTestCommand(emptyFunction)));			comp.addEventListener(Event.COMPLETE, async(function():void			{				assertFalse(comp.isExecuting);				assertTrue(comp.isCompleted);			}, 1000));						comp.execute();        }        test function pause():void        {            var comp:CommandComposite = new CommandComposite();                        comp.add(new CommandLeaf(new AsyncTestCommand(emptyFunction)));            comp.addEventListener(Event.COMPLETE, function():void            {                //このイベントは発生しない                fail();            });            //execute()前のpause()は無効            assertFalse(comp.pause());            comp.execute();            assertTrue(comp.pause());            assertTrue(comp.isPausing);            assertFalse(comp.isExecuting);            assertFalse(comp.isCompleted);        }        test function stop():void        {            var comp:CommandComposite = new CommandComposite();                        comp.add(new CommandLeaf(new AsyncTestCommand(emptyFunction)));            comp.addEventListener(Event.COMPLETE, function():void            {                //このイベントは発生しない                fail();            });            comp.execute();            comp.pause();            comp.resume();            comp.stop();            assertFalse(comp.isPausing);            assertFalse(comp.isExecuting);            assertFalse(comp.isCompleted);        }        test function resume():void        {            var comp:CommandComposite = new CommandComposite();                        comp.add(new CommandLeaf(new AsyncTestCommand(emptyFunction)));            comp.addEventListener(Event.COMPLETE, async(function():void            {                assertFalse(comp.isPausing);                assertFalse(comp.isExecuting);                assertTrue(comp.isCompleted);            }));            //pause()前のresume()は無効            assertFalse(comp.resume());            comp.execute();            //pause()前のresume()は無効            assertFalse(comp.resume());            comp.pause();            assertTrue(comp.resume());        }        test function loop():void        {            var comp:CommandComposite = new CommandComposite();            comp.loop = true;            comp.add(new CommandLeaf(new AsyncTestCommand(emptyFunction)));            comp.addEventListener(Event.COMPLETE, function():void            {                fail("loop指定されているコマンドはCOMPLETEしない");            });        }                after function teardownSample () : void		{		}	}}