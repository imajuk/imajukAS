package com.imajuk.commands{    import com.imajuk.events.AsyncEvent;	    import flash.events.Event;	    import flash.display.*;    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.*;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;    use namespace test;    use namespace before;    use namespace after;    internal class CommandItemTest extends Sprite    {        private var emptyFunction:Function;                before function setupSample():void        {        	emptyFunction = function():void            {            };        }        test function isExecuting():void        {            var comp:CommandComponent = new CommandComposite();            var item:CommandLeaf = new CommandLeaf(new AsyncTestCommand(function():void            {            }));			            comp.add(item);            comp.addEventListener(Event.COMPLETE, async(function():void            {                assertFalse(item.isExecuting);            }, 1000));			            assertFalse(item.isExecuting);            comp.execute();            assertTrue(item.isExecuting);        }        test function isPausing():void        {            var item:CommandLeaf = new CommandLeaf(new AsyncTestCommand(emptyFunction));            item.addEventListener(Event.COMPLETE, function():void            {                fail();            });                        item.execute();            assertFalse(item.isPausing);            item.pause();            assertTrue(item.isPausing);            assertFalse(item.isExecuting);        }        test function isComplete():void        {            var comp:CommandComponent = new CommandComposite();            var item:CommandLeaf = new CommandLeaf(new AsyncTestCommand(emptyFunction));			            comp.add(item);            comp.addEventListener(Event.COMPLETE, async(function():void            {                assertTrue(item.isCompleted);            }, 1000));			            assertFalse(item.isCompleted);            comp.execute();            assertFalse(item.isCompleted);        }        test function async_start():void        {            var comp:CommandComposite = new CommandComposite();            var item:CommandLeaf = new CommandLeaf(new AsyncTestCommand(emptyFunction));			            comp.add(item);            comp.addEventListener(AsyncEvent.START, async(function():void            {                assertTrue(item.isExecuting);                assertFalse(item.isCompleted);            }, 1000));			            comp.execute();        }        test function async_complete():void        {            var comp:CommandComposite = new CommandComposite();            var item:CommandLeaf = new CommandLeaf(new AsyncTestCommand(emptyFunction));			            comp.add(item);            comp.addEventListener(Event.COMPLETE, async(function():void            {                assertFalse(item.isExecuting);                assertTrue(item.isCompleted);            }, 1000));			            comp.execute();        }        test function add():void        {            var item:CommandLeaf = new CommandLeaf(new Command(emptyFunction));            var item2:CommandLeaf = new CommandLeaf(new Command(emptyFunction));            item.add(item2);            assertEquals(0, item.numChildren);        }        test function contain():void        {            //Leafは子をもたない            var item:CommandLeaf = new CommandLeaf(new Command(emptyFunction));            var item2:CommandLeaf = new CommandLeaf(new Command(emptyFunction));            item.add(item2);            assertFalse(item.contains(item2));        }        test function pause_syncCommand():void        {            var item:CommandLeaf = new CommandLeaf(new Command(emptyFunction));            item.addEventListener(Event.COMPLETE, async(function():void            {                assertFalse(item.isPausing);            }, 1500));                        //同期コマンドのpauseは常に無効            assertFalse(item.isPausing);            assertFalse(item.pause());            assertFalse(item.isPausing);                        item.execute();            //同期コマンドのpauseは常に無効            assertFalse(item.isPausing);            assertFalse(item.pause());            assertFalse(item.isPausing);        }                test function pause_asyncCommand():void        {            var item:CommandLeaf = new CommandLeaf(new AsyncTestCommand(emptyFunction));            item.addEventListener(Event.COMPLETE, function():void            {                //このイベントは発生しない.                fail();             });            assertFalse(item.isPausing);            //execute()されてないpause()は無効.            assertFalse(item.pause());            assertFalse(item.isPausing);                        item.execute();            assertFalse(item.isPausing);            assertTrue(item.pause());            assertTrue(item.isPausing);            assertFalse(item.isExecuting);        }        test function resume_afterExecute_asyncCommand():void        {            var item:CommandLeaf = new CommandLeaf(new AsyncTestCommand(emptyFunction));            item.addEventListener(Event.COMPLETE, async(function():void            {                assertFalse(item.isPausing);            }, 1500));                        item.execute();            item.pause();            item.resume();            assertFalse(item.isPausing);            assertTrue(item.isExecuting);        }        test function resume_beforeExecute_asyncCommand():void        {            var item:CommandLeaf = new CommandLeaf(new AsyncTestCommand(emptyFunction));            item.addEventListener(Event.COMPLETE, function():void            {                fail();            });                        //execute()前のresume()は無効.            item.resume();            assertFalse(item.isPausing);        }        test function stop_afterExecute_asyncCommand():void        {            var item:CommandLeaf = new CommandLeaf(new AsyncTestCommand(emptyFunction));            item.addEventListener(Event.COMPLETE, function():void            {                fail();            });                        item.execute();            item.pause();            item.resume();            item.stop();            assertFalse(item.isPausing);            assertFalse(item.isExecuting);        }        test function loop():void        {            var item:CommandLeaf = new CommandLeaf(new AsyncTestCommand(emptyFunction));            item.loop = true;            item.addEventListener(Event.COMPLETE, function():void            {                fail("loop指定されているコマンドはCOMPLETEしない");            });        }        after function teardownSample():void        {        }    }}