package com.imajuk.utils{    import flash.geom.Point;    import flash.display.*;	import org.libspark.as3unit.after;	import org.libspark.as3unit.assert.*;	import org.libspark.as3unit.before;	import org.libspark.as3unit.test;	use namespace test;	use namespace before;	use namespace after;	internal class MathUtilTest extends Sprite	{		test function radiansToDegrees():void		{			assertEquals(0, MathUtil.radiansToDegrees(0));			assertEquals(180, Math.round(MathUtil.radiansToDegrees(3.14)));			assertEquals(360, Math.round(MathUtil.radiansToDegrees(6.28)));			assertEquals(-180, Math.round(MathUtil.radiansToDegrees(-3.14)));		}				test function degreesToRadians():void		{			assertEquals(0, MathUtil.degreesToRadians(0));			assertEquals(3.14, Math.round(MathUtil.degreesToRadians(180) * 100) / 100);			assertEquals(6.28, Math.round(MathUtil.degreesToRadians(360) * 100) / 100);			assertEquals(-3.14, Math.round(MathUtil.degreesToRadians(-180) * 100) / 100);		}		test function normalizeDegrees () : void		{			//反時計回り			assertEquals(0, MathUtil.normalizeDegrees(0));			assertEquals(90, MathUtil.normalizeDegrees(90));			assertEquals(-180, MathUtil.normalizeDegrees(180));			assertEquals(-179, MathUtil.normalizeDegrees(181));			assertEquals(0, MathUtil.normalizeDegrees(360));			assertEquals(1, MathUtil.normalizeDegrees(361));			assertEquals(-180, MathUtil.normalizeDegrees(540));			assertEquals(-179, MathUtil.normalizeDegrees(541));						//時計回り			assertEquals(-90, MathUtil.normalizeDegrees(-90));			assertEquals(-180, MathUtil.normalizeDegrees(-180));			assertEquals(179, MathUtil.normalizeDegrees(-181));			assertEquals(0, MathUtil.normalizeDegrees(-360));			assertEquals(-1, MathUtil.normalizeDegrees(-361));			assertEquals(-180, MathUtil.normalizeDegrees(-540));			assertEquals(179, MathUtil.normalizeDegrees(-541));		}				test function remainder():void		{			assertEquals(0.1, MathUtil.getRemainder(1.12345, 1, 2));			assertEquals(0.12, MathUtil.getRemainder(1.12345, 1, 3));			assertEquals(0.123, MathUtil.getRemainder(1.12345, 1, 4));			assertEquals(-0.1, MathUtil.getRemainder(-1.12345, 1, 2));			assertEquals(-0.12, MathUtil.getRemainder(-1.12345, 1, 3));			assertEquals(-0.123, MathUtil.getRemainder(-1.12345, 1, 4));        }        test function getRadianFrom2Point() : void        {            //原点と考える点はp1            var p1 : Point = new Point();            var p2 : Point = new Point();            assertEquals(0, MathUtil.getRadianFrom2Point(p1, p2));            p2 = new Point(1, 0);            assertEquals(0, MathUtil.getRadianFrom2Point(p1, p2));            p2 = new Point(0, 1);            assertEquals(Math.PI * .5, MathUtil.getRadianFrom2Point(p1, p2));            p2 = new Point(-1, 0);            assertEquals(Math.PI, MathUtil.getRadianFrom2Point(p1, p2));            p2 = new Point(0, -1);            assertEquals(-Math.PI * .5, MathUtil.getRadianFrom2Point(p1, p2));                        p2 = new Point(1, 0);            //-Math.PIはMath.PIに変換される            assertEquals(Math.PI, MathUtil.getRadianFrom2Point(p2, p1));            p2 = new Point(0, 1);            assertEquals(-Math.PI * .5, MathUtil.getRadianFrom2Point(p2, p1));            p2 = new Point(-1, 0);            assertEquals(0, MathUtil.getRadianFrom2Point(p2, p1));            p2 = new Point(0, -1);            assertEquals(Math.PI * .5, MathUtil.getRadianFrom2Point(p2, p1));        }    }}