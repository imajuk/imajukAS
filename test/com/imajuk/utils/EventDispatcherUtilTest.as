package com.imajuk.utils{    import com.imajuk.testImajuk;	
    import com.imajuk.utils.EventDispatcherUtil;		import flash.events.Event;		import flash.events.IEventDispatcher;		import flash.display.*;	import org.libspark.as3unit.after;	import org.libspark.as3unit.assert.*;	import org.libspark.as3unit.before;	import org.libspark.as3unit.test;	use namespace test;	use namespace before;	use namespace after;	internal class EventDispatcherUtilTest extends Sprite	{		before function setupSample () : void		{			EventDispatcherUtil.reset();		}						test function addEventListener_ () : void		{			var dispatcher : IEventDispatcher = new Sprite();						EventDispatcherUtil.addEventListenr(dispatcher, Event.INIT, eventHandler);			EventDispatcherUtil.addEventListenr(dispatcher, Event.INIT, eventHandler2);			EventDispatcherUtil.addEventListenr(dispatcher, Event.COMPLETE, eventHandler);			assertTrue(dispatcher.hasEventListener(Event.INIT));			assertTrue(dispatcher.hasEventListener(Event.COMPLETE));			assertEquals(1, EventDispatcherUtil.testImajuk::hasManagingDispatcher());		}						test function removeAllEventListener () : void		{			var dispatcher : IEventDispatcher = new Sprite();								EventDispatcherUtil.addEventListenr(dispatcher, Event.INIT, eventHandler);			EventDispatcherUtil.addEventListenr(dispatcher, Event.INIT, eventHandler2);			EventDispatcherUtil.removeEventListener(dispatcher);			assertFalse(dispatcher.hasEventListener(Event.INIT));			assertEquals(0, EventDispatcherUtil.testImajuk::hasManagingDispatcher());		}						test function removeEventListener_ () : void		{			var dispatcher : IEventDispatcher = new Sprite();						EventDispatcherUtil.addEventListenr(dispatcher, Event.INIT, eventHandler);			EventDispatcherUtil.addEventListenr(dispatcher, Event.COMPLETE, eventHandler2);						EventDispatcherUtil.removeEventListener(dispatcher, Event.INIT);			assertFalse(dispatcher.hasEventListener(Event.INIT));			assertTrue(dispatcher.hasEventListener(Event.COMPLETE));			assertEquals(1, EventDispatcherUtil.testImajuk::hasManagingDispatcher());						EventDispatcherUtil.removeEventListener(dispatcher, Event.COMPLETE);			assertFalse(dispatcher.hasEventListener(Event.COMPLETE));			assertEquals(0, EventDispatcherUtil.testImajuk::hasManagingDispatcher());		}						test function hasEventListener_ () : void		{			var dispatcher : IEventDispatcher = new Sprite();						EventDispatcherUtil.addEventListenr(dispatcher, Event.INIT, eventHandler);			EventDispatcherUtil.addEventListenr(dispatcher, Event.COMPLETE, eventHandler2);						assertTrue(EventDispatcherUtil.hasEventListener(dispatcher));			EventDispatcherUtil.removeEventListener(dispatcher, Event.COMPLETE);			assertTrue(EventDispatcherUtil.hasEventListener(dispatcher));			EventDispatcherUtil.removeEventListener(dispatcher, Event.INIT);			assertFalse(EventDispatcherUtil.hasEventListener(dispatcher));		}						test function addEventListenerTimes () : void		{			var dispatcher : DispatcherMock = new DispatcherMock();								/**			 * リスナ追加時に、イベントを受け取る回数を指定できる			 * 指定した回数イベントを受け取ると、自動的にリスナから削除される			 */			EventDispatcherUtil.addEventListenr(dispatcher, Event.INIT, eventHandler, 1);			EventDispatcherUtil.addEventListenr(dispatcher, Event.COMPLETE, eventHandler, 2);			dispatcher.dispatchInitEvent();			assertFalse(dispatcher.hasEventListener(Event.INIT));			assertTrue(dispatcher.hasEventListener(Event.COMPLETE));			dispatcher.dispatchCompleteEvent();			assertTrue(dispatcher.hasEventListener(Event.COMPLETE));			dispatcher.dispatchCompleteEvent();			assertFalse(dispatcher.hasEventListener(Event.COMPLETE));		}						private function eventHandler (e : Event) : void		{		}						private function eventHandler2 () : void		{		}	}}import flash.events.EventDispatcher;import flash.events.Event;class DispatcherMock extends EventDispatcher{	public function dispatchInitEvent () : void	{		dispatchEvent(new Event(Event.INIT));	}			public function dispatchCompleteEvent () : void	{		dispatchEvent(new Event(Event.COMPLETE));	}}