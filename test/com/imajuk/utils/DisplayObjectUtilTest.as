package com.imajuk.utils{    import com.imajuk.graphics.AspectRatio;    import com.imajuk.constructions.DocumentClass;    import com.imajuk.logs.Logger;    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.assertEquals;    import org.libspark.as3unit.assert.assertFalse;    import org.libspark.as3unit.assert.assertTrue;    import org.libspark.as3unit.assert.fail;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;    import flash.display.Bitmap;    import flash.display.BitmapData;    import flash.display.DisplayObjectContainer;    import flash.display.Graphics;    import flash.display.Shape;    import flash.display.Sprite;    import flash.display.Stage;    import flash.geom.Rectangle;    import flash.text.TextField;        use namespace test;    use namespace before;    use namespace after;        internal class DisplayObjectUtilTest extends Sprite    {        private var _spr:Sprite;        private var _con:Sprite;        private var _docClass:DisplayObjectContainer;        before function setupSample():void        {            _docClass = StageReference.documentClass;			            _spr = new Sprite();            var s:Shape = new Shape();            var g:Graphics = s.graphics;            g.beginFill(0);            g.drawRect(0, 0, 111, 222);            g.endFill();            _spr.addChild(s);            _con = new Sprite();            var s2:Shape = new Shape();            var g2:Graphics = s2.graphics;            g2.beginFill(0);            g2.drawRect(0, 0, 333, 444);            g2.endFill();            _con.addChild(s2);            _con.addChild(_spr);            DisplayObjectContainer(StageReference.documentClass).addChild(_con);        }                test function getGlobalPosition():void        {            _con.x = 1;            _con.y = 2;            assertEquals(1, DisplayObjectUtil.getGlobalPosition(_spr).x);            assertEquals(2, DisplayObjectUtil.getGlobalPosition(_spr).y);            assertEquals(1, DisplayObjectUtil.getGlobalPosition(_con).x);            assertEquals(2, DisplayObjectUtil.getGlobalPosition(_con).y);        }        test function isStageChild():void        {            var sp1:Sprite = new Sprite();            StageReference.stage.addChild(sp1);            assertTrue(DisplayObjectUtil.isStageChild(sp1));			            var sp2:Sprite = new Sprite();            sp1.addChild(sp2);            assertFalse(DisplayObjectUtil.isStageChild(sp2));			            StageReference.stage.removeChild(sp1);        }        test function setGlobalPosition():void        {            _con.x = 1;            _con.y = 2;            assertEquals(0, _spr.x);            assertEquals(0, _spr.y);                        DisplayObjectUtil.setGlobalPosition(_spr, 100, 200);            assertEquals(99, _spr.x);            assertEquals(198, _spr.y);            assertEquals(100, DisplayObjectUtil.getGlobalPosition(_spr).x);            assertEquals(200, DisplayObjectUtil.getGlobalPosition(_spr).y);			            _spr.parent.removeChild(_spr);                        DisplayObjectContainer(StageReference.documentClass).addChild(_spr);            assertEquals(99, _spr.x);            assertEquals(198, _spr.y);            assertEquals(99, DisplayObjectUtil.getGlobalPosition(_spr).x);            assertEquals(198, DisplayObjectUtil.getGlobalPosition(_spr).y);            DisplayObjectContainer(StageReference.documentClass).removeChild(_spr);			            /**             * 表示リストにないオブジェクトを渡すとエラー             */            var container:Sprite = new Sprite();            var child:Sprite = new Sprite();            container.addChild(child);            try            {                DisplayObjectUtil.setGlobalPosition(child, 100, 200);                fail();            }			catch(e:Error)            {                assertEquals(e.message, "指定されたDisplayObject[[object Sprite]]は表示リストに追加されていません。");            }        }
        test function getGlobalWidth():void        {            _con.scaleX = 2;            _con.scaleY = 0.5;            assertEquals(111, _spr.width);            assertEquals(111 * 2, DisplayObjectUtil.getRenderedWidth(_spr));			            var spr:Sprite = new Sprite();            spr.addChild(_con);            StageReference.stage.addChild(spr);            spr.scaleX = 3;            spr.scaleY = 0.1;            assertEquals(111 * 2 * 3, DisplayObjectUtil.getRenderedWidth(_spr));            StageReference.stage.removeChild(spr);						            var s1:Sprite = new Sprite();            s1.name = "S1";            var s2:Sprite = new Sprite();            s2.name = "S2";            s2.scaleX = 2;            s2.scaleY = 0.2;            var s3:Sprite = new Sprite();            s3.name = "S3";            s3.scaleX = 3;            s3.scaleY = 0.3;            var s4:Sprite = new Sprite();            s4.name = "S4";            var s:Shape = new Shape();            var g:Graphics = s.graphics;            g.beginFill(0);            g.drawRect(0, 0, 111, 222);            g.endFill();            s4.addChild(s);            s4.scaleX = 4;            s4.scaleY = 0.4;            s1.addChild(s2);            s2.addChild(s3);            s3.addChild(s4);			            assertEquals(111 * 4, s4.width);            assertEquals(111 * 4 * 3 * 2, DisplayObjectUtil.getRenderedWidth(s4));            assertEquals(int(222 * 0.4 * 1000) * 0.001, s4.height);            assertEquals(int(222 * 0.4 * 0.3 * 0.2), DisplayObjectUtil.getRenderedHeight(s4));			            assertEquals(111 * 4 * 3 * 2, DisplayObjectUtil.getRenderedWidth(s1));            assertEquals(int(222 * 0.4 * 0.3 * 0.2), DisplayObjectUtil.getRenderedHeight(s1));        }        test function getGlobalHeight():void        {            _con.scaleX = 2;            _con.scaleY = 0.5;            assertEquals(222, _spr.height);            assertEquals(222 * 0.5, DisplayObjectUtil.getRenderedHeight(_spr));            var spr:Sprite = new Sprite();            spr.addChild(_con);            StageReference.stage.addChild(spr);            spr.scaleX = 3;            spr.scaleY = 0.1;            assertEquals(int(222 * 0.5 * 0.1), DisplayObjectUtil.getRenderedHeight(_spr));            StageReference.stage.removeChild(spr);        }        test function isScaled():void        {            //自身が変形されている            var spr1:Sprite = new Sprite();            assertFalse(DisplayObjectUtil.isScaled(spr1));            spr1.scaleX = 2;            assertTrue(DisplayObjectUtil.isScaled(spr1));            spr1.scaleY = 2;            assertTrue(DisplayObjectUtil.isScaled(spr1));			            //親が変形されている            var spr2:Sprite = new Sprite();            spr2.addChild(spr1);            assertTrue(DisplayObjectUtil.isScaled(spr1));            assertFalse(DisplayObjectUtil.isScaled(spr2));            spr1.scaleX = 1;            spr1.scaleY = 1;            spr2.scaleX = 3;            assertTrue(DisplayObjectUtil.isScaled(spr1));            assertTrue(DisplayObjectUtil.isScaled(spr2));			            //親の親が変形されている            var spr3:Sprite = new Sprite();            spr3.addChild(spr2);            spr2.scaleX = 1;            assertFalse(DisplayObjectUtil.isScaled(spr3));            assertFalse(DisplayObjectUtil.isScaled(spr2));            assertFalse(DisplayObjectUtil.isScaled(spr1));            spr3.scaleY = 5;            assertTrue(DisplayObjectUtil.isScaled(spr3));            assertTrue(DisplayObjectUtil.isScaled(spr2));            assertTrue(DisplayObjectUtil.isScaled(spr1));        }        //		        test function removeAllChildren():void        {            //Stage上にDocumentClassのみ存在            assertEquals(StageReference.stage.numChildren, 1);            /**             * Stageを対象に実行             */            DisplayObjectUtil.removeAllChildren(StageReference.stage);            //DocumentClassはリムーブされない            assertEquals(StageReference.stage.numChildren, 1);            assertTrue(StageReference.stage.getChildAt(0) == StageReference.documentClass);            //引数を省略するとStageが渡される            DisplayObjectUtil.removeAllChildren();            assertEquals(StageReference.stage.numChildren, 1);            assertTrue(StageReference.stage.getChildAt(0) == StageReference.documentClass);            /**             * StageReferenceが初期化されてない             */            var s:Stage = StageReference.stage;            StageReference.reset();            //引数なしだとエラー            try            {                DisplayObjectUtil.removeAllChildren();                fail("did't throw Error");            }			catch(e:DisplayObjectUtilError)
            {
                assertEquals(DisplayObjectUtilError.FAILED_STAGE_REFERENCE_INIT, e.message);                //引数を渡すと、ObjectUtilがStageReferenceを初期化してくれる                StageReference.reset();                DisplayObjectUtil.removeAllChildren(s);            }            assertEquals(StageReference.stage.numChildren, 1);            assertTrue(StageReference.stage.getChildAt(0) == StageReference.documentClass);									            s.addChild(new Sprite());            _docClass.addChild(new Sprite());            assertEquals(2, s.numChildren);            assertEquals(1, _docClass.numChildren);            DisplayObjectUtil.removeAllChildren(_docClass);            assertEquals(2, s.numChildren);            assertEquals(0, _docClass.numChildren);			            DisplayObjectUtil.removeAllChildren(s);            assertEquals(StageReference.stage.numChildren, 1);            assertTrue(StageReference.stage.getChildAt(0) == StageReference.documentClass);        }        test function getAllChildren():void        {            var spr1:Sprite = new Sprite();            var spr2:Sprite = new Sprite();            var spr3:Sprite = new Sprite();            var spr4:Sprite = new Sprite();            spr3.addChild(spr4);            spr1.addChild(spr2);	            spr1.addChild(spr3);            assertEquals(2, spr1.numChildren);			            assertEquals([spr2, spr3], DisplayObjectUtil.getAllChildren(spr1));	            assertEquals([spr4], DisplayObjectUtil.getAllChildren(spr3));            assertEquals([], DisplayObjectUtil.getAllChildren(spr4));        }        test function hasVectorShape():void        {            var spr1:Sprite = new Sprite();            spr1.name = "spr1";            assertFalse(DisplayObjectUtil.hasVectorShape(spr1));                        //シェイプを描画            var g:Graphics = spr1.graphics;            g.beginFill(0);            g.drawCircle(10, 10, 5);            assertTrue(DisplayObjectUtil.hasVectorShape(spr1));                        //Bitmapを追加            var b1:Bitmap = new Bitmap();            b1.name = "bmp1";            spr1.addChild(b1);            assertTrue(DisplayObjectUtil.hasVectorShape(spr1));                        //シェイプを消去            g.clear();            assertFalse(DisplayObjectUtil.hasVectorShape(spr1));                        //Bitmapに描画            b1.bitmapData = new BitmapData(50, 50);            assertFalse(DisplayObjectUtil.hasVectorShape(spr1));                        //サイズ0のシェイプを描画            g.beginFill(0);            g.drawCircle(0, 0, 0);            assertFalse(DisplayObjectUtil.hasVectorShape(spr1));                        //Bitmapに完全に隠れたシェイプ            g.beginFill(0);            g.drawCircle(20, 20, 5);            assertFalse(DisplayObjectUtil.hasVectorShape(spr1));                        //Bitmapを除去            spr1.removeChild(b1);            assertTrue(DisplayObjectUtil.hasVectorShape(spr1));                        //シェイプを消去            g.clear();            assertFalse(DisplayObjectUtil.hasVectorShape(spr1));                        //シェイプを持った子供を追加            var spr2:Sprite = new Sprite();            spr2.name = "spr2";            var g2:Graphics = spr2.graphics;            g2.beginFill(0);            g2.drawCircle(10, 10, 5);            spr1.addChild(spr2);            assertFalse(DisplayObjectUtil.hasVectorShape(spr1));            assertTrue(DisplayObjectUtil.hasVectorShape(spr2));        }        test function getRenderedDecendantNum():void        {            var spr1:Sprite = new Sprite();            spr1.name = "spr1";            StageReference.documentClass.addChild(spr1);                        //空のコンテナはカウントされない            assertEquals(0, DisplayObjectUtil.getRenderedDecendantNum(spr1));                        //空のコンテナでも、ベクターシェイプが描画されている場合はカウントする            var g:Graphics = spr1.graphics;            g.beginFill(0);            g.drawCircle(0, 0, 5);            assertEquals(1, DisplayObjectUtil.getRenderedDecendantNum(spr1));                        //表示リストに含まれない場合はカウントしない            StageReference.documentClass.removeChild(spr1);            assertEquals(0, DisplayObjectUtil.getRenderedDecendantNum(spr1));            StageReference.documentClass.addChild(spr1);            assertEquals(1, DisplayObjectUtil.getRenderedDecendantNum(spr1));                        //空のコンテナを追加してもカウントされない            var spr2:Sprite = new Sprite();            spr2.name = "spr2";            spr1.addChild(spr2);            assertEquals(1, DisplayObjectUtil.getRenderedDecendantNum(spr1));                        //Bitmapを追加            var b1:Bitmap = new Bitmap();            b1.name = "bmp1";            spr2.addChild(b1);                        //Bitmapに大きさがないのでカウントされない            assertEquals(1, DisplayObjectUtil.getRenderedDecendantNum(spr1));                        //Bitmapを描画するとカウントされる            b1.bitmapData = new BitmapData(50, 50);            assertEquals(2, DisplayObjectUtil.getRenderedDecendantNum(spr1));                        //TextFieldを追加            var tf1:TextField = new TextField();            tf1.name = "tf1";            spr2.addChild(tf1);                        //TextFieltに大きさがないのでカウントされない            assertEquals(2, DisplayObjectUtil.getRenderedDecendantNum(spr1));                        //TextFieldに文字があるとカウントされる            tf1.text = ".";            assertEquals(3, DisplayObjectUtil.getRenderedDecendantNum(spr1));        }                test function getDisplayListPath():void        {        	var p:Sprite =         	   DisplayObjectUtil.createHierarchy(        	       <{"PARENT"}>        	           <{"CHILD1"}>                           <{"GRAND_CHILD1"}/>                           <{"GRAND_CHILD2"}/>        	           </{"CHILD1"}>        	           <{"CHILD2"}>                           <{"GRAND_CHILD3"}/>        	           </{"CHILD2"}>        	       </{"PARENT"}>        	   );        	   //        	   DisplayObjectUtil.dumpChildren(p)        	//=================================        	// 表示リスト内にない        	//=================================        	assertEquals("PARENT.CHILD1.GRAND_CHILD2", DisplayObjectUtil.getDisplayListPath(DisplayObjectUtil.getChildByUniqueName(p, "GRAND_CHILD2")));        	assertEquals("PARENT.CHILD2.GRAND_CHILD3", DisplayObjectUtil.getDisplayListPath(DisplayObjectUtil.getChildByUniqueName(p, "GRAND_CHILD3")));        	        	//=================================        	// ステージにaddChild()        	//=================================        	StageReference.stage.addChild(p);        	assertEquals("STAGE.PARENT.CHILD1.GRAND_CHILD2", DisplayObjectUtil.getDisplayListPath(DisplayObjectUtil.getChildByUniqueName(p, "GRAND_CHILD2")));            //=================================            // ドキュメントクラスにaddChild()            //=================================        	DocumentClass.container.addChild(p);        	assertEquals("STAGE.DOCUMENTCLASS.PARENT.CHILD1.GRAND_CHILD2", DisplayObjectUtil.getDisplayListPath(DisplayObjectUtil.getChildByUniqueName(p, "GRAND_CHILD2")));        }                test function fitToRectangle():void        {        	Logger.release("fitToRectangle");        	            //------------------------
            // オリジナルサイズ100x80の表示オブジェクト
            //------------------------
            var target : Shape = new Shape();
            target.graphics.beginFill(0);            target.graphics.drawRect(0, 0, 100, 80);            var aspectRatio:Number = 100 / 80;                        //--------------------------------------------------------------------------
            // ターゲットの比率を保ったままストレッチする
            //--------------------------------------------------------------------------                //--------------------------------------------------------------------------                //  枠からはみ出さないようにフィット                //--------------------------------------------------------------------------                    //--------------------------------------------------------------------------                    //  ターゲットよりも大きいフィット枠                    //--------------------------------------------------------------------------                        //--------------------------------------------------------------------------                        // 横方向に隙間が出来る                        //--------------------------------------------------------------------------                        DisplayObjectUtil.fitToRectangle(target, 1000, 700, AspectRatio.KEEP_ASPECT_INSIDE_RECTANGLE);                        assertEquals(875, target.width);                        assertEquals(700, target.height);                        assertEquals(aspectRatio, target.width / target.height);
                                //--------------------------------------------------------------------------
                        // 縦方向に隙間が出来る                        //--------------------------------------------------------------------------                        DisplayObjectUtil.fitToRectangle(target, 500, 800, AspectRatio.KEEP_ASPECT_INSIDE_RECTANGLE);                        assertEquals(500, target.width);                        assertEquals(400, target.height);                        assertEquals(aspectRatio, target.width / target.height);                                    //--------------------------------------------------------------------------                    //  ターゲットよりも小さいフィット枠                    //--------------------------------------------------------------------------                        //--------------------------------------------------------------------------                        // 横方向に隙間が出来る                        //--------------------------------------------------------------------------                        DisplayObjectUtil.fitToRectangle(target, 50, 30, AspectRatio.KEEP_ASPECT_INSIDE_RECTANGLE, false);                        assertEquals(37.5, target.width);                        assertEquals(30, target.height);                        assertEquals(aspectRatio, target.width / target.height);                                                //--------------------------------------------------------------------------                        // 縦方向に隙間が出来る                        //--------------------------------------------------------------------------                        DisplayObjectUtil.fitToRectangle(target, 25, 40, AspectRatio.KEEP_ASPECT_INSIDE_RECTANGLE);                        assertEquals(25, target.width);                        assertEquals(20, target.height);                        assertEquals(aspectRatio, target.width / target.height);                                //--------------------------------------------------------------------------                //  隙間が出来ないようにフィット                //--------------------------------------------------------------------------                    //--------------------------------------------------------------------------                    //  ターゲットよりも大きいフィット枠                    //--------------------------------------------------------------------------                        //--------------------------------------------------------------------------                        // 縦方向にはみ出す                        //--------------------------------------------------------------------------                        DisplayObjectUtil.fitToRectangle(target, 1100, 800, AspectRatio.KEEP_ASPECT_OVER_RECTANGLE);                        assertEquals(1100, target.width);                        assertEquals(880, target.height);                        assertEquals(aspectRatio, target.width / target.height);                            //--------------------------------------------------------------------------                        // 横方向にはみ出す                        //--------------------------------------------------------------------------                        DisplayObjectUtil.fitToRectangle(target, 500, 1200, AspectRatio.KEEP_ASPECT_OVER_RECTANGLE);                        assertEquals(1500, target.width);                        assertEquals(1200, target.height);                        assertEquals(aspectRatio, target.width / target.height);                                    //--------------------------------------------------------------------------                    //  ターゲットよりも小さいフィット枠                    //--------------------------------------------------------------------------                        //--------------------------------------------------------------------------                        // 縦方向にはみ出す                        //--------------------------------------------------------------------------                        DisplayObjectUtil.fitToRectangle(target, 50, 30, AspectRatio.KEEP_ASPECT_OVER_RECTANGLE);                        assertEquals(50, target.width);                        assertEquals(40, target.height);                        assertEquals(aspectRatio, target.width / target.height);                                    //--------------------------------------------------------------------------                        // 横方向にはみ出す                        //--------------------------------------------------------------------------                        DisplayObjectUtil.fitToRectangle(target, 20, 20, AspectRatio.KEEP_ASPECT_OVER_RECTANGLE);                        assertEquals(25, target.width);                        assertEquals(20, target.height);                        assertEquals(aspectRatio, target.width / target.height);        }                test function getPixelBounce():void        {        	Logger.release("getPixelBounce");                        //100x10の四角            var target : Shape = new Shape();            target.graphics.beginFill(0xFF0000);            target.graphics.drawRect(0, 0, 100, 10);                                    var stage:Stage = StageReference.stage;            var spr:Sprite = stage.addChild(new Sprite()) as Sprite;            spr.addChild(target);                        //sprはグローバル座標系300,200に配置            spr.x = 300;            spr.y = 200;            //targetはグローバル座標系350,225に配置            target.x = 50;            target.y = 25;                        //=================================            // グローバル座標系でのピクセルバウンス            //=================================            assertEquals(new Rectangle(350, 225, 100, 10), DisplayObjectUtil.getPixelBounce(target, stage));            //親座標が負の値            spr.x = -10;            spr.y = -5;            assertEquals(new Rectangle(40, 20, 100, 10), DisplayObjectUtil.getPixelBounce(target, stage));            //ターゲットがグローバル座標系から見切れている            target.x = -40;            target.y = -4;            assertEquals(new Rectangle(-50, -9, 100, 10), DisplayObjectUtil.getPixelBounce(target, stage));            //ターゲットがグローバル座標系外            spr.x = -60;            spr.y = -6;            assertEquals(new Rectangle(-100, -10, 100, 10), DisplayObjectUtil.getPixelBounce(target, stage));                        //=================================            // 親座標系でのピクセルバウンス            //=================================            //sprはグローバル座標系300,200に配置            spr.x = 300;            spr.y = 200;            //targetはグローバル座標系50,25に配置            target.x = 50;            target.y = 25;            assertEquals(new Rectangle(50, 25, 100, 10), DisplayObjectUtil.getPixelBounce(target, spr));            //親座標が負の値            spr.x = -10;            spr.y = -5;            assertEquals(new Rectangle(50, 25, 100, 10), DisplayObjectUtil.getPixelBounce(target, spr));            //ターゲットが親座標系から見切れている            target.x = -40;            target.y = -4;            assertEquals(new Rectangle(-40, -4, 100, 10), DisplayObjectUtil.getPixelBounce(target, spr));            //ターゲットが親座標系外            spr.x = 100;
            spr.y = 10;            target.x = -100;            target.y = -10;            assertEquals(new Rectangle(-100, -10, 100, 10), DisplayObjectUtil.getPixelBounce(target, spr));                    }                test function getPixelBounce_rotate():void        {            Logger.release("getPixelBounce_rotate");                        var target : Shape = new Shape();            target.graphics.beginFill(0xFF0000);            target.graphics.drawRect(0, 0, 100, 10);            target.rotation = 90;            
            var stage:Stage = StageReference.stage;            var spr:Sprite = stage.addChild(new Sprite()) as Sprite;            spr.addChild(target);                        //sprはグローバル座標系300,200に配置            spr.x = 300;            spr.y = 200;            //targetはグローバル座標系350,225に配置            target.x = 50;            target.y = 25;            //=================================            // グローバル座標系でのピクセルバウンス（回転）            //=================================            assertEquals(new Rectangle(340, 225, 10, 100), DisplayObjectUtil.getPixelBounce(target, stage));            //親座標が負の値            spr.x = -10;            spr.y = -5;            assertEquals(new Rectangle(30, 20, 10, 100), DisplayObjectUtil.getPixelBounce(target, stage));            //ターゲットがグローバル座標系から見切れている            target.x = 15;            target.y = -45;            assertEquals(new Rectangle(-5, -50, 10, 100), DisplayObjectUtil.getPixelBounce(target, stage));            //ターゲットがグローバル座標系外            spr.x = -15;            spr.y = 45;            assertEquals(new Rectangle(-10, 0, 10, 100), DisplayObjectUtil.getPixelBounce(target, stage));                        //=================================            // 親座標系でのピクセルバウンス（回転）            //=================================            //sprはグローバル座標系300,200に配置            spr.x = 300;            spr.y = 200;            //targetはグローバル座標系50,25に配置            target.x = 50;            target.y = 25;            assertEquals(new Rectangle(40, 25, 10, 100), DisplayObjectUtil.getPixelBounce(target, spr));            //親座標が負の値            spr.x = -10;            spr.y = -5;            assertEquals(new Rectangle(40, 25, 10, 100), DisplayObjectUtil.getPixelBounce(target, spr));            //ターゲットが親座標系から見切れている            target.x = 5;            target.y = -50;            assertEquals(new Rectangle(-5, -50, 10, 100), DisplayObjectUtil.getPixelBounce(target, spr));            //ターゲットが親座標系外            spr.x = 100;            spr.y = 10;            target.x = 0;            target.y = -100;            assertEquals(new Rectangle(-10, -100, 10, 100), DisplayObjectUtil.getPixelBounce(target, spr));        }                test function getPixelBounce_masked():void        {            Logger.release("getPixelBounce_masked");                        //200x100の中央を50x10でマスク            var target : Sprite = new Sprite();            target.graphics.beginFill(0xFF0000);            target.graphics.drawRect(0, 0, 200, 100);                                    var px:int = 75;            var py:int = 45;            var pw:int = 50;            var ph:int = 10;            var m : Shape = new Shape();            m.graphics.beginFill(0xFF0000);            m.graphics.drawRect(px, py, pw, 10);            
            target.addChild(m);            target.mask = m;                        var stage:Stage = StageReference.stage;            var spr:Sprite = stage.addChild(new Sprite()) as Sprite;            spr.addChild(target);                        //sprはグローバル座標系300,200に配置            var sx:int = 300;            var sy:int = 200;            spr.x = sx;            spr.y = sy;            //targetはグローバル座標系350,225に配置            var tx:int = 50;            var ty:int = 25;            target.x = tx;            target.y = ty;            //=================================            // グローバル座標系でのピクセルバウンス（回転）            //=================================            assertEquals(new Rectangle(sx + tx + px,  sy + ty + py, pw, ph), DisplayObjectUtil.getPixelBounce(target, stage));            //親座標が負の値            sx = spr.x = -10;            sy = spr.y = -5;            assertEquals(new Rectangle(sx + tx + px, sy + ty + py, pw, ph), DisplayObjectUtil.getPixelBounce(target, stage));            //ターゲットがグローバル座標系から見切れている            tx = target.x = -100;            ty = target.y = -45;            assertEquals(new Rectangle(sx + tx + px, sy + ty + py, pw, ph), DisplayObjectUtil.getPixelBounce(target, stage));            //ターゲットがグローバル座標系外            spr.x = sx -= 15;            spr.y = sy -= 5;            assertEquals(new Rectangle(sx + tx + px, sy + ty + py, pw, ph), DisplayObjectUtil.getPixelBounce(target, stage));                        //=================================            // 親座標系でのピクセルバウンス（回転）            //=================================            //sprはグローバル座標系300,200に配置            sx = spr.x = 300;            sy = spr.y = 200;            //targetはグローバル座標系50,25に配置            tx = target.x = 50;            ty = target.y = 25;            assertEquals(new Rectangle(tx + px, ty + py, pw, ph), DisplayObjectUtil.getPixelBounce(target, spr));            //親座標が負の値            sx = spr.x = -10;            sy = spr.y = -5;            assertEquals(new Rectangle(tx + px, ty + py, pw, ph), DisplayObjectUtil.getPixelBounce(target, spr));            //ターゲットが親座標系から見切れている            tx -= 145;            ty -= 75;            target.x = tx;            target.y = ty;            assertEquals(new Rectangle(tx + px, ty + py, pw, ph), DisplayObjectUtil.getPixelBounce(target, spr));            //ターゲットが親座標系外            tx -= 30;
            ty -= 5;
            target.x = tx;
            target.y = ty;            assertEquals(new Rectangle(tx + px, ty + py, pw, ph), DisplayObjectUtil.getPixelBounce(target, spr));        }        after function teardownSample():void        {            StageReference.initialize(_docClass);            DisplayObjectUtil.removeAllChildren(DocumentClass.container);            DisplayObjectUtil.removeAllChildren(StageReference.stage);        }            }}