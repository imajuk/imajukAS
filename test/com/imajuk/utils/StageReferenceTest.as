package com.imajuk.utils{	import flash.display.*;	import org.libspark.as3unit.after;	import org.libspark.as3unit.assert.*;	import org.libspark.as3unit.before;	import org.libspark.as3unit.test;	use namespace test;	use namespace before;	use namespace after;	import com.imajuk.utils.StageReferenceError;		internal class StageReferenceTest extends Sprite	{		private var _root : DisplayObjectContainer;		private var _stage : Stage;				before function setupSample () : void		{			_root = StageReference.documentClass as DisplayObjectContainer;			_stage = _root.stage;		}				/**		 * StageReferenceは、最初に一度初期化しなければならない。		 * 表示リストに含まれるDisplayObjectを渡す必要がある		 */		test function initialize () : void		{						assertTrue(StageReference.isEnabled);			StageReference.reset();			assertFalse(StageReference.isEnabled);						try			{				StageReference.stage;					fail("didn't throw exception");						}			catch(notInitialize : StageReferenceError)			{				assertEquals("Error: StageReferenceは初期化されていません。\n（stageプロパティを使用する前に、一度だけinitialize(DisplayObject)を呼び出す必要があります。）\n", notInitialize);			}						try			{				StageReference.documentClass;					fail("didn't throw exception");						}			catch(notInitialize2 : StageReferenceError)			{				assertEquals("Error: StageReferenceは初期化されていません。\n（stageプロパティを使用する前に、一度だけinitialize(DisplayObject)を呼び出す必要があります。）\n", notInitialize2);			}						try			{				StageReference.initialize(null);				fail("didn't throw exception");						}			catch(invaildArgment : StageReferenceError)			{				assertEquals("Error: 初期化にはDisplayObjectを渡す必要があります", invaildArgment);			}			try			{				StageReference.initialize(new Sprite());				fail("didn't throw exception");						}			catch(notInDisplayListObject : StageReferenceError)			{				assertEquals("Error: initializeメソッドに渡すdisplayObjectは表示リストに含まれている必要があります。", notInDisplayListObject);			}						try			{				assertEquals(null, StageReference.getDisplayObjectByName(""));				fail("didn't throw exception");						}			catch(notInitialize3 : StageReferenceError)			{				assertEquals("Error: StageReferenceは初期化されていません。\n（stageプロパティを使用する前に、一度だけinitialize(DisplayObject)を呼び出す必要があります。）\n", notInitialize3);			}						StageReference.initialize(_root);			assertEquals(_stage, StageReference.stage);			assertEquals(_root, StageReference.documentClass);						assertEquals(null, StageReference.getDisplayObjectByName("spr"));			var spr : Sprite = new Sprite();			spr.name = "spr";			_root.addChild(spr);			assertEquals(spr, StageReference.getDisplayObjectByName("spr"));		}				test function stage () : void		{			/**			 * ステージに直接追加したDisplayObjectからのStageへのアクセス			 */			var spr : Sprite = new Sprite();			StageReference.stage.addChild(spr);						var stg : Stage = spr.stage;			//StageのstageはStage			assertTrue(stg.stage == stg);			assertTrue(stg.stage.stage == stg);			//StageのrootはStage			assertTrue(stg.root == stg);			assertTrue(stg.root.root == stg);						assertTrue(spr.parent == stg);			assertTrue(StageReference.stage == stg);						//ステージに直接追加したDisplayObjectのrootはStage			assertEquals(spr.root, stg);									/**			 * ドキュメントクラスからのステージへのアクセス			 */			 var docClass : DisplayObject = StageReference.documentClass;			//ドキュメントクラスのrootはドキュメントクラス			assertEquals(docClass.root, docClass);			assertEquals(docClass.stage, stg);			assertEquals(docClass.stage, spr.stage);					}		test function documentClass () : void		{			var sp1 : Sprite = new Sprite();			var sp2 : Sprite = new Sprite();			_root.addChild(sp1);			_root.addChild(sp2);			assertEquals(sp1.root, sp2.root);			StageReference.initialize(sp2);			assertEquals(StageReference.documentClass, sp1.root);        }
        test function isEnabled():void        {            assertTrue(StageReference.isEnabled);            StageReference.reset();            assertFalse(StageReference.isEnabled);            StageReference.initialize(_root);        }
        after function teardownSample () : void		{			StageReference.initialize(_root);			DisplayObjectUtil.removeAllChildren();		}	}}