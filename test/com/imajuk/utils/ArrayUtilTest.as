package com.imajuk.utils{    import flash.display.*;
    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.*;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;        use namespace test;        use namespace before;        use namespace after;
    internal class ArrayUtilTest extends Sprite    {        test function shuffle():void        {            //ArrayUtil.shuffle([0,1,2,3,4]            var src:Array = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];            //100回シャッフルしてチェック            var n:int = 100;            for (var i:int = 0;i < n; i++)            {                var shuffled:Array = src.concat();                ArrayUtil.shuffle(shuffled);                assertEquals(false, ArrayUtil.equals(src, shuffled));            }			            //同じ要素が帰ってきているかチェック。            shuffled.sort();            assertEquals(true, ArrayUtil.equals(src, shuffled));        }
        test function clone():void        {            var src:Array = [ 0, 1, 2, 3 ];            var copy:Array = ArrayUtil.clone(src);            //同じものが複製されているかチェック            assertEquals(true, ArrayUtil.equals(copy, src));            //違う配列になっているかチェック            ArrayUtil.swap(copy, 0, 1);            assertEquals(false, ArrayUtil.equals(copy, src));                        //参照もcloneされているかチェック            var nest:Array = [ [ 0, 1 ], [ 0, 1 ] ];            var copyNest:Array = ArrayUtil.clone(nest);            assertEquals(true, ArrayUtil.equals(nest[0], copyNest[0]));            assertEquals(true, ArrayUtil.equals(nest[1], copyNest[1]));            assertNotSame(nest[0], copyNest[0]);                        //参照の参照もcloneされているかチェック            var nestNestObject:Object = {id:1};            var nestNestObject2:Object = {obj:nestNestObject};            var nestNestArray:Array = [ nestNestObject2 ];            var copyNestNestArray:Array = ArrayUtil.clone(nestNestArray);            assertEquals(nestNestObject["id"], copyNestNestArray[0].obj.id);            assertNotSame(nestNestObject, copyNestNestArray[0].obj);        }
        test function swap():void        {            var array:Array = [ 0, 1, 2, 3 ];            ArrayUtil.swap(array, 0, 1);            assertEquals(true, ArrayUtil.equals(array, [ 1, 0, 2, 3 ]));        }
        test function equals():void        {            assertEquals(true, ArrayUtil.equals([ 0, 1, 2, 3 ], [ 0, 1, 2, 3 ]));            assertEquals(true, ArrayUtil.equals([], []));            assertEquals(false, ArrayUtil.equals([ 1, 2, 3, 0 ], [ 0, 1, 2, 3 ]));            assertEquals(false, ArrayUtil.equals([ 0 ], [ 0, 1 ]));            assertEquals(false, ArrayUtil.equals([ 0 ], []));                        //型チェック            assertEquals(false, ArrayUtil.equals([ "0" ], [ 0 ]));            assertEquals(false, ArrayUtil.equals([ true ], [ 1 ]));            assertEquals(false, ArrayUtil.equals([ false ], [ 0 ]));                        assertEquals(false, ArrayUtil.equals([ {} ], [ 0 ]));            assertEquals(false, ArrayUtil.equals([ {} ], [ [] ]));            assertEquals(false, ArrayUtil.equals([ {} ], [ true ]));            assertEquals(false, ArrayUtil.equals([ {} ], [ false ]));        }                test function contain():void        {        	//string        	assertTrue(ArrayUtil.contains(["A"], "A"));        	assertFalse(ArrayUtil.contains(["A"], "B"));        	//number        	assertTrue(ArrayUtil.contains([9], 9));        	assertFalse(ArrayUtil.contains([10], 9));        	assertFalse(ArrayUtil.contains(["9"], 9));        	assertTrue(ArrayUtil.contains(["9"], 9, true));        }        test function selectRandom():void        {            assertEquals(9, ArrayUtil.selectRandom([ 9 ], 1));                        try            {                assertEquals(9, ArrayUtil.selectRandom([ 9 ], 2));            }            catch(e:Error)            {                assertEquals("ランダムに選択したい要素数が配列の長さを超えています.このメソッドは要素の重複を許可しません.", e.message);            }                        var a:Array = [ "A", "B" ];            var a2:Array = ArrayUtil.selectRandom(a, 2);            assertEquals(2, a2.length);            assertTrue(ArrayUtil.contains(a2, "A"));            assertTrue(ArrayUtil.contains(a2, "B"));            //副作用はないか            assertEquals(2, a.length);            assertTrue(ArrayUtil.contains(a, "A"));            assertTrue(ArrayUtil.contains(a, "B"));                        //配列の要素が配列            var o:Object = {};            var c:Array = [ o ];            var b:Array = ArrayUtil.selectRandom([ c ], 1);            assertTrue(b[0] === c);            assertEquals(1, b.length);            //副作用はないか            assertEquals(1, c.length);            assertTrue(o == c[0]);        }                test function substract():void        {        	var o1:Object = {};        	var o2:Object = {};        	        	var a:Array;        	            a = ArrayUtil.substract([o1, o2], [o1]);            assertEquals(1, a.length);            assertEquals(o2, a[0]);            a = ArrayUtil.substract([o1, o2], [o1, o2]);            assertEquals(0, a.length);                    	var o3:Object = {};            a = ArrayUtil.substract([o1, o2], [o3]);            assertEquals(2, a.length);            assertEquals(o1, a[0]);            assertEquals(o2, a[1]);        }    }}