package com.imajuk.date{    import flash.display.Sprite;
    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.*;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;        use namespace test;        use namespace before;        use namespace after;
    internal class CalendarTest extends Sprite    {        private var date:Date;        private var calendar:Calendar;
        before function setupSample():void        {            //2007.8.15の日付でカレンダーを生成            date = new Date(2007, 7, 15);            calendar = new Calendar(date);        }
        test function equals():void        {            var d1:Date = new Date(2007, 9, 10);            var d2:Date = new Date(2007, 9, 10, 15, 30, 45);            var d3:Date = new Date(2007, 9, 10, 15, 30, 45);            var d4:Date = new Date(2007, 8, 10, 15, 30, 45);            //d1 と d2 は同じ日            assertTrue(Calendar.equals(d1, d2));            //d2 と d3 は同じ日            assertTrue(Calendar.equals(d2, d3));            //d1 と d3 は同じ日            assertTrue(Calendar.equals(d1, d3));            //d1 と d4 は違う日            assertFalse(Calendar.equals(d1, d4));            //d2 と d4 は違う日            assertFalse(Calendar.equals(d2, d4));            //d3 と d4 は違う日            assertFalse(Calendar.equals(d3, d4));        }
        test function getLastDayOfMonth():void        {            //"1月は31日ある"            assertEquals(31, Calendar.getLastDayOfMonth(new Date(2007, 0)));            assertEquals(31, Calendar.getLastDayOfMonth(new Date(2007, 0, 31)));            //"2月は28日ある"            assertEquals(28, Calendar.getLastDayOfMonth(new Date(2007, 1)));            //"2004年の2月は29日ある"            assertEquals(29, Calendar.getLastDayOfMonth(new Date(2004, 1)));            //"3月は31日ある"            assertEquals(31, Calendar.getLastDayOfMonth(new Date(2007, 2)));            //"4月は30日ある"            assertEquals(30, Calendar.getLastDayOfMonth(new Date(2007, 3)));            //"5月は31日ある"            assertEquals(31, Calendar.getLastDayOfMonth(new Date(2007, 4)));            //"6月は30日ある"            assertEquals(30, Calendar.getLastDayOfMonth(new Date(2007, 5)));            //"7月は31日ある"            assertEquals(31, Calendar.getLastDayOfMonth(new Date(2007, 6)));            //"8月は31日ある"            assertEquals(31, Calendar.getLastDayOfMonth(new Date(2007, 7)));            //"9月は30日ある"            assertEquals(30, Calendar.getLastDayOfMonth(new Date(2007, 8)));            //"10月は31日ある"            assertEquals(31, Calendar.getLastDayOfMonth(new Date(2007, 9)));            //"11月は30日ある"            assertEquals(30, Calendar.getLastDayOfMonth(new Date(2007, 10)));            //"12月は31日ある"            assertEquals(31, Calendar.getLastDayOfMonth(new Date(2007, 11)));        }
        test function isLeapYear():void        {            //"2000年は閏年"            assertTrue(Calendar.isLeapYear(new Date(2000, 0, 1)));            //"2004年は閏年"            assertTrue(Calendar.isLeapYear(new Date(2004, 0, 1)));            //"2100年は閏年でない"            assertFalse(Calendar.isLeapYear(new Date(2100, 0, 1)));            //"2005年は閏年でない"            assertFalse(Calendar.isLeapYear(new Date(2005, 0, 1)));        }
        test function getMonthString():void        {            assertEquals("January", Calendar.getMonthAsEnglishString(new Date(2007, 0)));            assertEquals("Jan", Calendar.getMonthAsEnglishString(new Date(2007, 0), true));                        assertEquals("February", Calendar.getMonthAsEnglishString(new Date(2007, 1)));            assertEquals("Feb", Calendar.getMonthAsEnglishString(new Date(2007, 1), true));                        assertEquals("March", Calendar.getMonthAsEnglishString(new Date(2007, 2)));            assertEquals("Mar", Calendar.getMonthAsEnglishString(new Date(2007, 2), true));                        assertEquals("April", Calendar.getMonthAsEnglishString(new Date(2007, 3)));            assertEquals("Apr", Calendar.getMonthAsEnglishString(new Date(2007, 3), true));                        assertEquals("May", Calendar.getMonthAsEnglishString(new Date(2007, 4)));            assertEquals("May", Calendar.getMonthAsEnglishString(new Date(2007, 4), true));                        assertEquals("June", Calendar.getMonthAsEnglishString(new Date(2007, 5)));            assertEquals("Jun", Calendar.getMonthAsEnglishString(new Date(2007, 5), true));                        assertEquals("July", Calendar.getMonthAsEnglishString(new Date(2007, 6)));            assertEquals("Jul", Calendar.getMonthAsEnglishString(new Date(2007, 6), true));                        assertEquals("August", Calendar.getMonthAsEnglishString(new Date(2007, 7)));            assertEquals("Aug", Calendar.getMonthAsEnglishString(new Date(2007, 7), true));                        assertEquals("September", Calendar.getMonthAsEnglishString(new Date(2007, 8)));            assertEquals("Sep", Calendar.getMonthAsEnglishString(new Date(2007, 8), true));                        assertEquals("October", Calendar.getMonthAsEnglishString(new Date(2007, 9)));            assertEquals("Oct", Calendar.getMonthAsEnglishString(new Date(2007, 9), true));                        assertEquals("November", Calendar.getMonthAsEnglishString(new Date(2007, 10)));            assertEquals("Nov", Calendar.getMonthAsEnglishString(new Date(2007, 10), true));                        assertEquals("December", Calendar.getMonthAsEnglishString(new Date(2007, 11)));            assertEquals("Dec", Calendar.getMonthAsEnglishString(new Date(2007, 11), true));        }
        test function getYesterday():void        {            assertTrue(Calendar.equals(new Date(2007, 7, 14), Calendar.getYesterday(new Date(2007, 7, 15))));        }
        test function getTomorrow():void        {            assertTrue(Calendar.equals(new Date(2007, 7, 16), Calendar.getTomorrow(new Date(2007, 7, 15))));        }
        test function getWeekLength():void        {            //2007年9月は6週間ある            assertEquals(6, Calendar.getWeekLength(new Date(2007, 8)));        }
        /**         * ここからインスタンスプロパティとインスタンスメソッドのテスト         */
        test function header():void        {            //仮想ヘッダは2008年8月15日            assertTrue(Calendar.equals(new Date(2007, 7, 15), calendar.header));        }
        test function yesterday():void        {            //仮想ヘッダの前の日は2007.8.14            assertTrue(Calendar.equals(new Date(2007, 7, 14), calendar.yesterday));            //"仮想ヘッダの移動はない"            assertTrue(Calendar.equals(new Date(2007, 7, 15), calendar.header));        }
        test function tomorrow():void        {            //date + "の次の日は2007.8.16"            assertTrue(Calendar.equals(new Date(2007, 7, 16), calendar.tomorrow));            //"仮想ヘッダの移動はない"            assertTrue(Calendar.equals(new Date(2007, 7, 15), calendar.header));        }
        test function previousMonth():void        {            //仮想ヘッダのひと月前は2007.7.15            assertTrue(Calendar.equals(new Date(2007, 6, 15), calendar.previousMonth));            //"仮想ヘッダはそのまま"            assertTrue(Calendar.equals(new Date(2007, 7, 15), calendar.header));        }
        test function nextMonth():void        {            //仮想ヘッダの次の月は2007.9.15            assertTrue(Calendar.equals(new Date(2007, 8, 15), calendar.nextMonth));            //"仮想ヘッダはそのまま"            assertTrue(Calendar.equals(new Date(2007, 7, 15), calendar.header));        }
        test function weekLength():void        {            //"仮想ヘッダのある2007年8月は5週間ある"            assertEquals(5, calendar.weekLength);        }
        test function getFirstDayInWeek():void        {            //"仮想ヘッダのある2007年8月の最初の週の1日目は2007.7.29"            assertTrue(Calendar.equals(new Date(2007, 6, 29), calendar.getFirstDayInWeek(0)));            //"仮想ヘッダのある2007年8月の第2週の1日目は2007.8.5"            assertTrue(Calendar.equals(new Date(2007, 7, 5), calendar.getFirstDayInWeek(1)));            //"仮想ヘッダのある2007年8月の第3週の1日目は2007.8.12"            assertTrue(Calendar.equals(new Date(2007, 7, 12), calendar.getFirstDayInWeek(2)));            //"仮想ヘッダのある2007年8月の第4週の1日目は2007.8.19"            assertTrue(Calendar.equals(new Date(2007, 7, 19), calendar.getFirstDayInWeek(3)));            //"仮想ヘッダのある2007年8月の第5週の1日目は2007.8.26"            assertTrue(Calendar.equals(new Date(2007, 7, 26), calendar.getFirstDayInWeek(4)));            //"仮想ヘッダのある2007年8月の第6週は存在しない"            assertEquals(null, calendar.getFirstDayInWeek(5));        }
        test function testGetLastDayInWeek():void
        {            //"仮想ヘッダのある2007年8月の最初の週の最後の日は2007.8.4"            assertTrue(Calendar.equals(new Date(2007, 7, 4), calendar.getLastDayInWeek(0)));            //"仮想ヘッダのある2007年8月の第2週の最後の日は2007.8.11"            assertTrue(Calendar.equals(new Date(2007, 7, 11), calendar.getLastDayInWeek(1)));            //"仮想ヘッダのある2007年8月の第3週の最後の日は2007.8.18"            assertTrue(Calendar.equals(new Date(2007, 7, 18), calendar.getLastDayInWeek(2)));            //"仮想ヘッダのある2007年8月の第4週の最後の日は2007.8.25"            assertTrue(Calendar.equals(new Date(2007, 7, 25), calendar.getLastDayInWeek(3)));            //"仮想ヘッダのある2007年8月の第5週の最後の日は2007.9.1"            assertTrue(Calendar.equals(new Date(2007, 8, 1), calendar.getLastDayInWeek(4)));            //"仮想ヘッダのある2007年8月の第6週は存在しない"            assertEquals(null, calendar.getLastDayInWeek(5));        }        test function getWeekIndex():void        {            //"仮想ヘッダのある2007年8月の1日は1週目にある"            assertEquals(0, calendar.getWeekIndex(1));            //"仮想ヘッダのある2007年8月の5日は2週目にある"            assertEquals(1, calendar.getWeekIndex(5));            //"仮想ヘッダのある2007年8月の31日は5週目にある"            assertEquals(4, calendar.getWeekIndex(31));            //"仮想ヘッダのある2007年8月の32日は存在しない"            try            {                calendar.getWeekIndex(32);                fail();            }            catch(e:Error)            {                assertEquals("存在しない日にちが渡されました.", e.message);            }        }        test function getDateByMatrix():void        {            //"仮想ヘッダのある2007年8月の0,0"            assertTrue(Calendar.equals(new Date(2007, 6, 29), calendar.getDateInMatrix(0, 0)));            //"仮想ヘッダのある2007年8月の6,4"            assertTrue(Calendar.equals(new Date(2007, 8, 1), calendar.getDateInMatrix(6, 4)));            //"仮想ヘッダのある2007年8月の3,2"            assertTrue(Calendar.equals(new Date(2007, 7, 15), calendar.getDateInMatrix(3, 2)));        }        test function gotoPreviousDay():void        {            //仮想ヘッダの前の日は2007.8.14            assertTrue(Calendar.equals(new Date(2007, 7, 14), calendar.gotoPreviousDay()));            //メソッド呼び出し後、仮想ヘッダも移動            assertTrue(Calendar.equals(new Date(2007, 7, 14), calendar.header));        }        test function gotoNextDay():void        {            //仮想ヘッダ"の次の日は2007.8.16"            assertTrue(Calendar.equals(new Date(2007, 7, 16), calendar.gotoNextDay()));            //"仮想ヘッダも移動"            assertTrue(Calendar.equals(new Date(2007, 7, 16), calendar.header));        }        test function gotoPreviousMonth():void        {            //仮想ヘッダの前の月は2007.7.15"            assertTrue(Calendar.equals(new Date(2007, 6, 15), calendar.gotoPreviousMonth()));            //"仮想ヘッダも移動"            assertTrue(Calendar.equals(new Date(2007, 6, 15), calendar.header));        }                test function gotoNextMonth():void        {            //仮想ヘッダの次の月は2007.9.15"            assertTrue(Calendar.equals(new Date(2007, 8, 15), calendar.gotoNextMonth()));            //"仮想ヘッダも移動"            assertTrue(Calendar.equals(new Date(2007, 8, 15), calendar.header));        }
        after function teardownSample():void        {        }    }}