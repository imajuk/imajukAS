package com.imajuk.geom{    import flash.geom.Point;    import flash.display.Sprite;    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.*;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;        use namespace test;        use namespace before;        use namespace after;    internal class SegmentTest extends Sprite    {        private static const RADIAN_45 : Number = 0.7853981633974483;        private static const RADIAN_135 : Number = 2.356194490192345;        private static const SQRT_2 : Number = 1.4142135623730951;        before function setup() : void        {        }        test function create() : void        {            var p1 : Point = new Point(1, 1);            var p2 : Point = new Point(2, 2);            var v : Vector2D = Vector2D.createFromPoint(p1);            var s1 : Segment = Segment.createFromPoint(p1, p2);            var s2 : Segment = Segment.createFromVector2D(p1, v);            assertEquals(s1, s2);                        //ベクトルが違うので等価ではない            v.velocity += 1;            var s3 : Segment = Segment.createFromVector2D(p1, v);            assertNotSame(s1, s3);                        //始点が違うので等価ではない            var s4 : Segment = Segment.createFromPoint(p1.add(new Point(1, 0)), p2);            assertNotSame(s1, s4);                        //終点が違うので等価ではない            var s5 : Segment = Segment.createFromPoint(p1, p2.add(new Point(1, 0)));            assertNotSame(s1, s5);        }        test function clone() : void        {            var p1 : Point = new Point(1, 1);            var p2 : Point = new Point(2, 2);            var s1 : Segment = Segment.createFromPoint(p1, p2);            assertEquals(s1, s1.clone());                        var s2:Segment = Segment.createFromPoint(new Point(50, 200), new Point(749, 0));            s2.end.y = 201;             assertTrue(s2.equals(s2.clone()));        }        test function begin() : void        {            var p1 : Point = new Point(1, 1);            var p2 : Point = new Point(2, 2);            var v : Vector2D = Vector2D.createFromPoint(p2);            //=================================            // 生成後の値の確認            //=================================            //Segment.createFromVector2Dで生成            assertEquals(p1, Segment.createFromVector2D(p1, v).begin);            //Vector2D.createFromPointで生成            assertEquals(p1, Segment.createFromPoint(p1, p2).begin);            //=================================            // beginを変更するとendも影響を受ける            //=================================            var p3 : Point = new Point(3, 3);            var s : Segment = Segment.createFromPoint(p1, p2);            s.begin = p3;            assertEquals(p3, s.begin);            assertEquals(new Point(4, 4), s.end);        }        test function end() : void        {            var p1 : Point = new Point(1, 1);            var p2 : Point = new Point(2, 2);            var v : Vector2D = Vector2D.createFromPoint(p1);            //=================================            // 生成後の値の確認            //=================================            //Segment.createFromVector2Dで生成            assertEquals(p2, Segment.createFromVector2D(p1, v).end);            //Vector2D.createFromPointで生成            assertEquals(p2, Segment.createFromPoint(p1, p2).end);            //=================================            // endを変更してもbeginは影響を受けないがangleは影響を受ける            //=================================            var p3 : Point = new Point();            var s : Segment = Segment.createFromPoint(p1, p2);            s.end = p3;            assertEquals(p1, s.begin);            assertEquals(p3, s.end);            assertEquals(-RADIAN_135, s.angle);        }        test function angle() : void        {            var p1 : Point = new Point(1, 1);            var p2 : Point = new Point(2, 2);            var v : Vector2D = Vector2D.createFromPoint(p2);            //=================================            // 生成後の値の確認            //=================================            //Segment.createFromVector2Dで生成            assertEquals(RADIAN_45, Segment.createFromVector2D(p1, v).angle);            //Vector2D.createFromPointで生成            assertEquals(RADIAN_45, Segment.createFromPoint(p1, p2).angle);                        //=================================            // このプロパティを変更すると終点も変更される            //=================================            var s : Segment = Segment.createFromPoint(p1, p2);            s.angle += -Math.PI;            assertEquals(new Point(1, 1), s.begin);            assertEquals(new Point(0, 0), s.end);        }        test function rotate() : void        {            var p1 : Point = new Point(1, 1);            var p2 : Point = new Point(2, 2);            //=================================            // このメソッドはendプロパティを変更する            //=================================            var s1 : Segment = Segment.createFromPoint(p1, p2);            var s2 : Segment = s1.clone();            s1.angle += -Math.PI;            s2.rotate(-Math.PI);            assertEquals(s1, s2);        }                test function translate() : void        {            var p1 : Point = new Point(1, 1);            var p2 : Point = new Point(2, 2);            //=================================            // このメソッドはbegin, endプロパティを変更する            //=================================            var s1 : Segment = Segment.createFromPoint(p1, p2);            var s2 : Segment = s1.clone();            s1.begin = p2.clone();            s2.translate(1, 1);            assertEquals(s1, s2);        }                test function length() : void        {            var p1 : Point = new Point(1, 1);            var p2 : Point = new Point(2, 2);            var v : Vector2D = Vector2D.createFromPoint(p1);            //=================================            // 生成後の値の確認            //=================================            //Segment.createFromVector2Dで生成            assertEquals(SQRT_2, Segment.createFromVector2D(p1, v).length);            //Vector2D.createFromPointで生成            assertEquals(SQRT_2, Segment.createFromPoint(p1, p2).length);                        //=================================            // このプロパティを変更すると終点も変更される            //=================================            var s : Segment = Segment.createFromPoint(p1, p2);            s.length *= 2;            assertEquals(new Point(1, 1), s.begin);            assertEquals(new Point(3.0000000000000004, 3), s.end);            assertEquals(RADIAN_45, s.angle);        }                test function vector() : void        {            var p1 : Point = new Point(1, 1);            var p2 : Point = new Point(2, 2);            var v : Vector2D = Vector2D.createFromPoint(p1);            //=================================            // 生成後の値の確認            //=================================            //Segment.createFromVector2Dで生成            assertEquals(v, Segment.createFromVector2D(p1, v).vector);            //Vector2D.createFromPointで生成            assertEquals(v, Segment.createFromPoint(p1, p2).vector);                        //=================================            // このプロパティを変更するとend, angleも変更される            //=================================            var s : Segment = Segment.createFromPoint(p1, p2);            s.vector = Vector2D.create(0,1);            assertEquals(new Point(1, 1), s.begin);            assertEquals(new Point(2, 1), s.end);            assertEquals(0, s.angle);        }                test function isRightSide():void        {        	var s:Segment;        	s = Segment.createFromPoint(new Point(-1,-1), new Point(1,1));        	assertFalse(s.isRightSide(new Point(1,0)));        	assertTrue(s.isRightSide(new Point(-1,0)));        }        after function teardown() : void        {        }    }}