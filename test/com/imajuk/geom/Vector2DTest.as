package com.imajuk.geom{    import flash.geom.Point;        import flash.display.*;    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.*;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;        use namespace test;    use namespace before;    use namespace after;    internal class Vector2DTest extends Sprite    {        private static const RADIAN_45 : Number = 0.7853981633974483;
        private static const RADIAN_135 : Number = 2.356194490192345;
        private static const RADIAN_30 : Number = 0.5235987755982988;
        private static const RADIAN_90 : Number = Math.PI * .5;
        private static const SQRT_2 : Number = 1.4142135623730951;
        private static const SQRT_3 : Number = 1.7320508075688772;
        private static const RADIAN_150 : Number = 2.6179938779914944;
        /**         * 生成と等価性         * Vector2D.create(angle : Number, velocity : Number = 1) : Vector2D         * Vector2D.createFromPoint(p1:Point, p2:Point = null):Vector2D         * Vector2D::equals(v:Vector2D):Boolean         */        test function equals() : void        {            //コンストラクタ引数なしは0ベクトル            assertEquals(Vector2D.create(0,0), new Vector2D());                        //0ベクトル同士            assertTrue(Vector2D.create(0, 0).equals(Vector2D.create(0, 0)));            assertEquals(Vector2D.create(0, 0), Vector2D.createFromPoint(new Point(1, 1), new Point(1, 1)));                        //45°、ベロシティ1のベクトル            assertEquals(Vector2D.create(RADIAN_45, SQRT_2), Vector2D.createFromPoint(new Point(1, 1)));            assertEquals(Vector2D.create(RADIAN_45, SQRT_2), Vector2D.createFromPoint(new Point(1, 1), new Point(2, 2)));                        //同じ引数            assertTrue(Vector2D.create(1, 1).equals(Vector2D.create(1, 1)));                        //方向が違うので等価ではない            assertFalse(Vector2D.create(1.1, 1).equals(Vector2D.create(1, 1)));            //ベロシティが違うので等価ではない            assertFalse(Vector2D.create(1, 1).equals(Vector2D.create(1, 1.1)));        }                /**         * 角度プロパティ         */        test function angle() : void        {            //=================================            // 生成後の値の確認            //=================================            //Vector2D.createで生成            assertEquals(0, Vector2D.create(0, 1).angle);            assertEquals(Math.PI, Vector2D.create(Math.PI).angle);            //Vector2D.createFromPointで生成            assertEquals(RADIAN_45, Vector2D.createFromPoint(new Point(1, 1)).angle);                        //=================================            // このプロパティを変更するとvx,vyも変更される            //=================================            var v:Vector2D = Vector2D.create(RADIAN_45, 1);            v.angle = -Math.PI;            assertEquals(-1, v.vx);            assertEquals(0,  v.vy);                        //=================================            // かけ算            //=================================            v.angle = RADIAN_45;            v.angle *= -1;            assertEquals(-RADIAN_45, v.angle);            assertEquals(0.7071067811865476, v.vx);            assertEquals(-0.7071067811865475, v.vy);                    }                /**         * 強さプロパティ         */        test function velocity() : void        {            //=================================            // 生成後の値の確認            //=================================            assertEquals(1, Vector2D.create(Math.PI, 1).velocity);            assertEquals(SQRT_2, Vector2D.createFromPoint(new Point(1,1)).velocity);            //ベロシティ省略（デフォルトは1）            assertEquals(1, Vector2D.create(0).velocity);            //0ベクトル            assertEquals(0, Vector2D.create(0, 0).velocity);                        //=================================            // このプロパティを変更するとvx,vyも変更される            //=================================            var v:Vector2D = Vector2D.create(RADIAN_45, 1);            v.velocity = 1.1;            assertEquals(Math.cos(RADIAN_45) * 1.1, v.vx);            assertEquals(Math.sin(RADIAN_45) * 1.1, v.vy);        }                /**         * coordinateプロパティ         */        test function coordinate() : void        {        	//coordinateプロパティは、単にvx,vyプロパティの値をPointにしたもの            var v : Vector2D = Vector2D.create(RADIAN_45, 1.1);            assertEquals(new Point(Math.cos(RADIAN_45) * 1.1, Math.sin(RADIAN_45) * 1.1), v.coordinate);        }                /**         * vx, vyプロパティ         */        test function vxAndvy_read() : void        {        	var v:Vector2D;        	        	//0ベクトル            v = Vector2D.createFromPoint(new Point(0, 0));            assertEquals(0, v.vx);            assertEquals(0, v.vy);                        v = Vector2D.createFromPoint(new Point(0, 1));            assertEquals(0, v.vx);            assertEquals(1, v.vy);            v = Vector2D.createFromPoint(new Point(1, 0));            assertEquals(1, v.vx);            assertEquals(0, v.vy);                        v = Vector2D.createFromPoint(new Point(1, 1));            assertEquals(1, v.vx);            assertEquals(1, v.vy);                        v = Vector2D.create(0);            assertEquals(1, v.vx);            assertEquals(0, v.vy);                        v = Vector2D.create(RADIAN_45, SQRT_2);            assertEquals(1, v.vx);            assertEquals(1, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(1, 1))));                        v = Vector2D.create(-RADIAN_45, SQRT_2);            assertEquals(1, v.vx);            assertEquals(-1, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(1, -1))));                        v = Vector2D.create(RADIAN_90, SQRT_2);            assertEquals(0, v.vx);            assertEquals(SQRT_2, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(0, SQRT_2))));                        v = Vector2D.create(-RADIAN_90, SQRT_2);            assertEquals(0, v.vx);            assertEquals(-SQRT_2, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(0, -SQRT_2))));                        v = Vector2D.create(RADIAN_90, 1);            assertEquals(0, v.vx);            assertEquals(1, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(0, 1))));                        v = Vector2D.create(Math.PI, SQRT_2);            assertEquals(-SQRT_2, v.vx);            assertEquals(0, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(-SQRT_2, 0))));                        v = Vector2D.create(0, SQRT_2);            assertEquals(SQRT_2, v.vx);            assertEquals(0, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(SQRT_2, 0))));            v = Vector2D.create(RADIAN_135, SQRT_2);            assertEquals(-1, v.vx);            assertEquals(1, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(-1, 1))));                        v = Vector2D.create(-RADIAN_135, SQRT_2);            assertEquals(-1, v.vx);            assertEquals(-1, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(-1, -1))));                        v = Vector2D.create(RADIAN_30, 2);            assertEquals(SQRT_3, v.vx);            assertEquals(1, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(SQRT_3, 1))));                        v = Vector2D.create(-RADIAN_30, 2);            assertEquals(SQRT_3, v.vx);            assertEquals(-1, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(SQRT_3, -1))));                        v = Vector2D.create(RADIAN_150, 2);            assertEquals(-SQRT_3, v.vx);            assertEquals(1, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(-SQRT_3, 1))));                        v = Vector2D.create(-RADIAN_150, 2);            assertEquals(-SQRT_3, v.vx);            assertEquals(-1, v.vy);            assertTrue(v.equals(Vector2D.createFromPoint(new Point(-SQRT_3, -1))));        }        test function vxAndvy_write() : void        {        	var v:Vector2D = new Vector2D();        	v.vx = 1;        	v.vy = 0;        	assertEquals(0, v.angle);        	assertEquals(1, v.velocity);        	v.vy = 1;            assertEquals(RADIAN_45, v.angle);            assertEquals(SQRT_2, v.velocity);        }                test function clone():void        {        	var v:Vector2D;        	v = Vector2D.createFromPoint(new Point(1,1));        	assertEquals(Vector2D.createFromPoint(new Point(1,1)), v.clone());        	        	v = Vector2D.create(RADIAN_45, 1);        	assertEquals(Vector2D.create(RADIAN_45, 1), v.clone());        }                test function normalize() : void        {        	var v:Vector2D;        	var nv:Vector2D;        	        	v = Vector2D.create(RADIAN_45, 10);        	nv = v.normalize();        	            assertEquals(Vector2D.create(RADIAN_45, 1), nv);            assertEquals(RADIAN_45, nv.angle);            assertEquals(1, nv.velocity);            //元のベクトルは変化しない            assertEquals(Vector2D.create(RADIAN_45, 10), v);        }        test function add() : void        {            assertFalse(isNaN(Vector2D.create(Math.PI).add(Vector2D.create(Math.PI*.5)).angle));                        var v1 : Vector2D = Vector2D.createFromPoint(new Point(8, 3));            var v2 : Vector2D = Vector2D.createFromPoint(new Point(5, 12));            var v3 : Vector2D = Vector2D.createFromPoint(new Point(13, 15));            assertEquals(v3, v1.add(v2));                    var v4 : Vector2D = Vector2D.createFromPoint(new Point(1, 4), new Point(8, 10));            var v5 : Vector2D = Vector2D.createFromPoint(new Point(1, 4), new Point(7, 3));            var v6 : Vector2D = Vector2D.createFromPoint(new Point(13, 5));            assertEquals(new Point(13, 5), v6.coordinate);                                var addV : Vector2D = v4.add(v5);            assertTrue(Math.abs(v6.angle - addV.angle) < 0.00001);            assertTrue(Math.abs(v6.velocity - addV.velocity) < 0.00001);            assertTrue(Math.abs(v6.coordinate.x - addV.coordinate.x) < 0.00001);            assertTrue(Math.abs(v6.coordinate.y - addV.coordinate.y) < 0.00001);        }        test function getRadiansWith() : void        {            assertFalse(isNaN(Vector2D.create(Math.PI).getRadiansWith(Vector2D.create(Math.PI*.5))));                        var v1 : Vector2D;            var v2 : Vector2D;                        v1 = Vector2D.createFromPoint(new Point(0, 1));            v2 = Vector2D.createFromPoint(new Point(0, -1));            assertEquals(Math.PI, v1.getRadiansWith(v2));                        v1 = Vector2D.createFromPoint(new Point(1, 0));            v2 = Vector2D.createFromPoint(new Point(-1, 0));            assertEquals(Math.PI, v1.getRadiansWith(v2));                        v1 = Vector2D.createFromPoint(new Point(0, 1));            v2 = Vector2D.createFromPoint(new Point(1, 0));            assertEquals(Math.PI * .5, v1.getRadiansWith(v2));                        v1 = Vector2D.createFromPoint(new Point(0, 1));            v2 = Vector2D.createFromPoint(new Point(-1, 0));            assertEquals(Math.PI * .5, v1.getRadiansWith(v2));            v1 = Vector2D.createFromPoint(new Point(0, 1));            v2 = Vector2D.createFromPoint(new Point(1, 1));            assertTrue(Math.abs(Math.PI * .25 - v1.getRadiansWith(v2)) < 0.00001);                        v1 = Vector2D.createFromPoint(new Point(0, 1));            v2 = Vector2D.createFromPoint(new Point(-1,- 1));            assertTrue(Math.abs(Math.PI * .75 - v1.getRadiansWith(v2)) < 0.00001);                        v1 = Vector2D.create(-0.4740473777789574, 1.6998238734471713);            v2 = Vector2D.create(-0.4788961190375246, 1.6947493394346838);            assertFalse(isNaN(v1.getRadiansWith(v2)));        }                test function rotate():void        {        	assertFalse(isNaN(Vector2D.create(Math.PI).rotate(0).angle));        	        	var v1 : Vector2D;            var v2 : Vector2D;                        v1 = Vector2D.create(0, 1);            v2 = Vector2D.create(RADIAN_45, 1);                        assertEquals(v2, v1.rotate(RADIAN_45));        }                test function verocity():void        {            var v:Vector2D;            v = Vector2D.create(Math.PI);            assertEquals(Math.PI, v.angle);            assertEquals(-1, v.vx);            assertEquals(0, v.vy);            v.velocity *= -1;            assertEquals(-Math.PI, v.angle);            assertEquals(1, v.vx);            assertEquals(0, v.vy);            v = Vector2D.create(Math.PI);            v.velocity *= -2;            assertEquals(-2, v.velocity);            assertEquals(-Math.PI, v.angle);            assertEquals(2, v.vx);            assertEquals(0, v.vy);        }            }}