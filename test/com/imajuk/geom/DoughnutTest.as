package com.imajuk.geom{	import flash.display.*;

	import org.libspark.as3unit.after;	import org.libspark.as3unit.assert.*;	import org.libspark.as3unit.before;	import org.libspark.as3unit.test;	use namespace test;	use namespace before;	use namespace after;
	internal class DoughnutTest extends Sprite	{		before function setupSample () : void		{		}
		/**		 * ドーナッツは円を継承する		 */		test function doughnutExtendsCircle () : void		{			var d : Doughnut = new Doughnut(0, 0, 0.5, 0.3);			assertTrue(d is Circle);						//サイズ変更後も太さを保つ			assertEquals(0.2, d.thickness);			d.size = 0.6;			assertEquals(0.2, d.thickness);			assertEquals(0.6, d.outside.size);			assertEquals(0.4, d.inside.size);			assertEquals(0.6, d.size);			assertEquals(0.3, d.radius);						d.size *= 0.5;			assertEquals(0.2, d.thickness);			assertEquals(0.3, d.size);			assertEquals(0.15, d.radius);			assertEquals(0.3, d.outside.size);			assertEquals(0.15, d.outside.radius);			assertEquals(0.1, d.inside.size);			assertEquals(0.05, d.inside.radius);						var d2 : Doughnut = new Doughnut(0.1, 0.2, 0.5, 0.3);			var d3 : Doughnut = d2.clone() as Doughnut;			d2.size *= 2;			d3.outside.size *= 2;			d3.inside.size *= 2;			assertFalse(d2.equals(d3));		}
								/**		 * ドーナッツは外円と内円で定義する		 */		test function create () : void		{			//第3引数は外円の直径、第4引数は内円の直径			var d : Doughnut = new Doughnut(0.1, 0.2, 0.5, 0.3);			assertEquals(0.5 * 0.5, d.radius);			assertEquals(0.5, d.outside.size);			assertEquals(0.3, d.inside.size);			assertEquals(0.5 - 0.3, d.thickness);			assertEquals(0.1, d.x);			assertEquals(0.2, d.y);									//セッターで外円を変更			d.outside = new Circle(0, 0, 0.4);			assertEquals(0.8, d.outside.size);			assertEquals(0.3, d.inside.size);			assertEquals(0.8 - 0.3, d.thickness);			assertEquals(0.1, d.outside.x);			assertEquals(0.2, d.outside.y);			assertEquals(0.1, d.x);			assertEquals(0.2, d.y);			//セッターで内円を変更			d.inside = new Circle(0.3, 0.4, 0.2);			assertEquals(0.8, d.outside.size);			assertEquals(0.4, d.inside.size);			assertEquals(0.8 - 0.4, d.thickness);			assertEquals(0.1, d.inside.x);			assertEquals(0.2, d.inside.y);			assertEquals(0.1, d.x);			assertEquals(0.2, d.y);						//セッターでsize,width,heightを変更すると、内円外円とも変更される。その際太さを保つ			d.width = 0.9;			assertEquals(0.9, d.outside.size);			assertEquals(0.5, d.inside.size);			assertEquals(0.4, d.thickness);			assertEquals(0.1, d.inside.x);			assertEquals(0.2, d.inside.y);			assertEquals(0.1, d.x);			assertEquals(0.2, d.y);						d.height = 0.7;			assertEquals(0.7, d.outside.size);			assertEquals(0.3, d.inside.size);			assertEquals(0.4, d.thickness);			assertEquals(0.1, d.inside.x);			assertEquals(0.2, d.inside.y);			assertEquals(0.1, d.x);			assertEquals(0.2, d.y);		}

		
		
		
		/**		 * ドーナツの移動は外円と内円の座標に影響する		 */		test function transiration () : void		{			var d : Doughnut = new Doughnut(0.8, 0.4, 0.5, 0.3);			assertEquals(0.8, d.outside.x);			assertEquals(0.4, d.outside.y);			assertEquals(0.8, d.inside.x);			assertEquals(0.4, d.inside.y);						/**			 * IGeomを移動する際は必ずtranslate()メソッドを使う			 */			d.x = 0.9;			d.y = 0.7;			assertEquals(0.9, d.x);			assertEquals(0.7, d.y);			assertEquals(0.9, d.outside.x);			assertEquals(0.7, d.outside.y);			assertEquals(0.9, d.inside.x);			assertEquals(0.7, d.inside.y);						d.x = 1;			assertEquals(1, d.x);			assertEquals(0.7, d.y);			assertEquals(1, d.outside.x);			assertEquals(0.7, d.outside.y);			assertEquals(1, d.inside.x);			assertEquals(0.7, d.inside.y);		}

		
		
		
		test function equals () : void		{			var d : Doughnut = new Doughnut(1, 2, 0.2, 0.1);			var d2 : Doughnut = new Doughnut(1, 2, 0.2, 0.1);			assertFalse(d == d2);						//複製と比較			assertTrue(d.clone() is Doughnut);			assertTrue(d.equals(d.clone()));			assertTrue(d.equals(d2));						//異なる座標			assertFalse(d.equals(new Doughnut(1.1, 2, 0.2, 0.1)));			//異なるサイズ			assertFalse(d.equals(new Doughnut(1, 2, 0.21, 0.1)));						//異なるIGeomとの比較			assertFalse(d.equals(new Rect(1, 2, 0.2, 0.2)));			assertFalse(d.equals(new Circle(1, 2, 0.2)));		}

		
		
		
		/**		 * 任意の点の矩形がドーナツ形状に触れているかどうかを返す		 */		test function doughnutReturnsIntersection () : void		{			var d : Doughnut = new Doughnut(0, 0, 0.5, 0.2);			for (var i : Number = - 300;i < 300; i ++)			{				var p : Point2D = new Point2D(i * 0.001, 0);				if(i >= - 250 && i <= 250)				{					/**					 * 外円の内側					 */					if(i >= 100 || i <= - 100)					{						/**						 * 内円の外側						 */						assertTrue(d.containsPoint(p));					}					else					{						/**						 * 内円の内側						 */						try						{							assertFalse(d.containsPoint(p));						}						catch(e : Error)						{							trace(e, i, p);						}					}				}				else				{					/**					 * 外円の外側					 */					assertFalse(d.containsPoint(p));				}			}									//移動してテスト			d.x = 1;			d.y = 0.5;			for (var j : Number = - 300;j < 300; j ++)			{				var p2 : Point2D = new Point2D(1, (500 + j) * 0.01);				if(j >= - 250 + 1000 && j <= 250 + 1000)				{					/**					 * 外円の内側					 */					if(j >= 100 + 1000 || j <= - 100 + 1000)					{						/**						 * 内円の外側						 */						assertTrue(d.containsPoint(p2));					}					else					{						/**						 * 内円の内側						 */						assertFalse(d.containsPoint(p2));					}				}				else				{					/**					 * 外円の外側					 */					assertFalse(d.containsPoint(p2));				}			}		}

		
		
		
		after function teardownSample () : void		{		}	}}