package com.imajuk.geom{    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.*;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;    import flash.display.*;    import flash.geom.Point;	use namespace test;	use namespace before;	use namespace after;	internal class CircleTest extends Sprite    {//        private var canvas : Shape;		before function setupSample () : void		{//            canvas = StageReference.stage.addChild(new Shape()) as Shape;//            StageReference.stage.quality = StageQuality.HIGH;		}                test function intersectionWithSegment() : void        {            var circle : Circle, seg:Segment, p:Point;            circle = new Circle(100, 200, 20);            p = circle.center;            p.offset(-100, -circle.radius-1);                        seg = Segment.createFromVector2D(p, Vector2D.create(0, 200));            assertFalse(circle.intersectionWithSegment(seg));            p.offset(0, 1);            seg = Segment.createFromVector2D(p, Vector2D.create(0, 200));            assertTrue(circle.intersectionWithSegment(seg));            p = circle.center;            p.offset(-100, circle.radius+1);            seg = Segment.createFromVector2D(p, Vector2D.create(0, 200));            assertFalse(circle.intersectionWithSegment(seg));            p.offset(0, -1);            seg = Segment.createFromVector2D(p, Vector2D.create(0, 200));            assertTrue(circle.intersectionWithSegment(seg));                        p = circle.center;            p.offset(-circle.radius-1,-100);            seg = Segment.createFromVector2D(p, Vector2D.create(Math.PI/2, 200));            assertFalse(circle.intersectionWithSegment(seg));            p.offset(1, 0);            seg = Segment.createFromVector2D(p, Vector2D.create(Math.PI/2, 200));            assertTrue(circle.intersectionWithSegment(seg));                        p = circle.center;            p.offset(circle.radius+1,-100);            seg = Segment.createFromVector2D(p, Vector2D.create(Math.PI/2, 200));            assertFalse(circle.intersectionWithSegment(seg));            p.offset(-1, 0);            seg = Segment.createFromVector2D(p, Vector2D.create(Math.PI/2, 200));            assertTrue(circle.intersectionWithSegment(seg));            p = circle.center;            p.offset(Math.cos(.3)*circle.radius, Math.sin(.3)*circle.radius);            seg = Segment.createFromVector2D(p, Vector2D.create(0, 200));            assertFalse(circle.intersectionWithSegment(seg));            p = circle.center;            p.offset(Math.cos(.3)*circle.radius-1, Math.sin(.3)*circle.radius-1);            seg = Segment.createFromVector2D(p, Vector2D.create(0, 200));            assertTrue(circle.intersectionWithSegment(seg));//            GraphicsUtil.drawCircle(canvas.graphics, circle, null, Color.fromRGB(0));//            GraphicsUtil.drawSegment(canvas.graphics, seg.begin, seg.end, 0);                    }                test function intersectionWithRect():void        {            var circle : Circle, rect : Rect;            circle = new Circle(100, 200, 50);            const radius : Number = circle.radius, center : Point = circle.center;            rect = new Rect(0, center.y - radius, circle.size, circle.size);            const left : Number = center.x - circle.size - radius;            const right : Number = center.x + radius;            const top : Number = center.y - radius - circle.size;            const bottom : Number = center.y + radius;            rect.x = left - 1;            assertFalse(circle.intersectionRect(rect));            rect.x = left;            assertTrue(circle.intersectionRect(rect));            rect.x = right + 1;            assertFalse(circle.intersectionRect(rect));            rect.x = right;            assertTrue(circle.intersectionRect(rect));            rect.x = center.x - radius;            rect.y = top - 1;            assertFalse(circle.intersectionRect(rect));            rect.y = top;            assertTrue(circle.intersectionRect(rect));            rect.y = bottom + 1;            assertFalse(circle.intersectionRect(rect));            rect.y = bottom;            assertTrue(circle.intersectionRect(rect));            rect.x = center.x - radius;            rect.y = center.y - radius;            assertTrue(circle.intersectionRect(rect));            // contain            circle.radius -= 1;            assertFalse(circle.intersectionRect(rect));            //            GraphicsUtil.drawCircle(canvas.graphics, circle, null, Color.fromRGB(0));//            GraphicsUtil.drawRect(canvas.graphics, rect.toRectangle(), null, Color.fromRGB(0));        }		
		test function size () : void		{			var c : Circle = new Circle(1, 2, 0.2);			assertEquals(0.2, c.radius);			assertEquals(0.4, c.size);			assertEquals(0.4, c.width);			assertEquals(0.4, c.height);						/**			 * セッターによる変更			 */			c.radius = 0.3;			assertEquals(0.3, c.radius);			assertEquals(0.6, c.size);			assertEquals(0.6, c.width);			assertEquals(0.6, c.height);						c.size = 0.8;			assertEquals(0.4, c.radius);			assertEquals(0.8, c.size);			assertEquals(0.8, c.width);			assertEquals(0.8, c.height);		}
		
		
		test function equals () : void		{			var c : Circle = new Circle(1, 2, 0.2);			var c2 : Circle = new Circle(1, 2, 0.2);			assertTrue(c.equals(c2));			assertFalse(c == c2);						//異なる座標			assertFalse(c.equals(new Circle(1.1, 2, 0.2)));						//異なるサイズ			assertFalse(c.equals(new Circle(1, 2, 0.21)));									//異なるIGeomとの比較			assertFalse(c.equals(new Rect(1, 2, 0.2, 0.2)));			assertFalse(c.equals(new Doughnut(1, 2, 0.2, 0.1)));		}
		
		
		
		test function clone () : void		{			var c : Circle = new Circle(1, 2, 0.2);			var c2 : Circle = c.clone() as Circle;			assertFalse(c2 == null);			assertTrue(c2 is Circle);			assertFalse(c == c2);						assertTrue(c.equals(c2));					}
		
		
		
		test function containsPoint () : void		{			var c : Circle = new Circle(1, 2, 0.2);			assertTrue(c.containsPoint(new Point2D(1, 2)));					assertTrue(c.containsPoint(new Point2D(1 + 0.2, 2)));					assertFalse(c.containsPoint(new Point2D(1 + 0.2, 2), false));			assertFalse(c.containsPoint(new Point2D(1 + 0.2 + 0.01, 2)));				}
		
		
		
		after function teardownSample () : void		{		}	}}