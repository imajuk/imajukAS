package com.imajuk.colors{	import com.imajuk.color.Color;    import flash.display.*;    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.*;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;        use namespace test;    use namespace before;    use namespace after;        internal class ColorTest extends Sprite    {        before function setupSample():void        {        }        test function instance_default():void        {            //デフォルト値は0xFF000000            var c:Color = new Color();            assertTrue(isNaN(c.argb));            assertTrue(isNaN(c.alpha));            assertEquals(0x000000, c.rgb);            assertEquals(0, c.red);            assertEquals(0, c.green);            assertEquals(0, c.blue);            assertEquals(0, c.h);            assertEquals(0, c.s);            assertEquals(0, c.v);        }                test function fromARGB():void        {            var argb:uint = 0x11223344;           	var c:Color = Color.fromARGB(argb);            assertEquals(argb, c.argb);            assertEquals(0x223344, c.rgb);            assertEquals(0x11, c.alpha);            assertEquals(0x22, c.red);            assertEquals(0x33, c.green);            assertEquals(0x44, c.blue);            assertEquals(210, c.h);            assertEquals(50, c.s);            assertEquals(26, c.v);        }                test function fromRGB():void        {            var rgb:uint = 0x223344;              var c:Color = Color.fromRGB(rgb);                        assertEquals(rgb, c.rgb);            assertTrue(isNaN(c.argb), "fromRGBで生成したColorのargbは未定義");            assertTrue(isNaN(c.alpha), "fromRGBで生成したColorのalphaは未定義");            assertEquals(0x22, c.red);            assertEquals(0x33, c.green);            assertEquals(0x44, c.blue);            assertEquals(210, c.h);            assertEquals(50, c.s);            assertEquals(26, c.v);        }                test function argb_RED():void        {            var c:Color = Color.fromARGB(0xFFFF0000);            assertEquals(0xFFFF0000, c.argb);            assertEquals(0xFF0000, c.rgb);            assertEquals(0xFF, c.alpha);            assertEquals(0xFF, c.red);            assertEquals(0, c.green);            assertEquals(0, c.blue);            assertEquals(0, c.h);            assertEquals(100, c.s);            assertEquals(100, c.v);        }                test function rgb_RED():void        {            var c:Color = Color.fromRGB(0xFF0000);            assertTrue(isNaN(c.argb));            assertTrue(isNaN(c.alpha));            assertEquals(0xFF0000, c.rgb);            assertEquals(0xFF, c.red);            assertEquals(0, c.green);            assertEquals(0, c.blue);            assertEquals(0, c.h);            assertEquals(100, c.s);            assertEquals(100, c.v);        }        test function argb_GREEN():void        {            var c:Color = Color.fromARGB(0xFF00FF00);            assertEquals(0xFF00FF00, c.argb);            assertEquals(0xFF, c.alpha);            assertEquals(0x00FF00, c.rgb);            assertEquals(0, c.red);            assertEquals(0xFF, c.green);            assertEquals(0, c.blue);            assertEquals(120, c.h);            assertEquals(100, c.s);            assertEquals(100, c.v);        }                test function argb_BLUE():void        {            var c:Color = Color.fromARGB(0xFF0000FF);            assertEquals(0xFF0000FF, c.argb);            assertEquals(0x0000FF, c.rgb);            assertEquals(0xFF, c.alpha);            assertEquals(0, c.red);            assertEquals(0, c.green);            assertEquals(0xFF, c.blue);            assertEquals(240, c.h);            assertEquals(100, c.s);            assertEquals(100, c.v);        }                test function argb_ALPHA():void        {            var c:Color = Color.fromARGB(0x7f0000FF);            assertEquals(0x7f0000FF, c.argb);            assertEquals(0x0000FF, c.rgb);            assertEquals(0x7F, c.alpha);            assertEquals(0, c.red);            assertEquals(0, c.green);            assertEquals(0xFF, c.blue);            assertEquals(240, c.h);            assertEquals(100, c.s);            assertEquals(100, c.v);        }        test function hsv_RED():void        {            var c:Color = Color.fromHSV(0, 100, 100, 1);            assertEquals(0xFFFF0000, c.argb);            assertEquals(0xFF0000, c.rgb);            assertEquals(0xFF, c.alpha);            assertEquals(0xFF, c.red);            assertEquals(0, c.green);            assertEquals(0, c.blue);            assertEquals(0, c.h);            assertEquals(100, c.s);            assertEquals(100, c.v);        }                test function hsv_GREEN():void        {            var c:Color = Color.fromHSV(120, 100, 100, 1);            assertEquals(0xFF00FF00, c.argb);            assertEquals(0x00FF00, c.rgb);            assertEquals(0xFF, c.alpha);            assertEquals(0, c.red);            assertEquals(0xFF, c.green);            assertEquals(0, c.blue);            assertEquals(120, c.h);            assertEquals(100, c.s);            assertEquals(100, c.v);        }                test function hsv_BLUE():void        {            var c:Color = Color.fromHSV(240, 100, 100, 1);            assertEquals(0xFF0000FF, c.argb);            assertEquals(0x0000FF, c.rgb);            assertEquals(0xFF, c.alpha);            assertEquals(0, c.red);            assertEquals(0, c.green);            assertEquals(0xFF, c.blue);            assertEquals(240, c.h);            assertEquals(100, c.s);            assertEquals(100, c.v);        }        test function hsv_ALPHA():void        {            var c:Color = Color.fromHSV(240, 100, 100, .5);            assertEquals(0x7f0000FF, c.argb);            assertEquals(0x0000FF, c.rgb);            assertEquals(127.5, c.alpha);            assertEquals(0, c.red);            assertEquals(0, c.green);            assertEquals(0xFF, c.blue);            assertEquals(240, c.h);            assertEquals(100, c.s);            assertEquals(100, c.v);        }        after function teardownSample():void        {        }    }}