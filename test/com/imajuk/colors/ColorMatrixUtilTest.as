package com.imajuk.colors{    import com.imajuk.color.ColorMatrixUtil;            import flash.display.*;	import org.libspark.as3unit.after;	import org.libspark.as3unit.assert.*;	import org.libspark.as3unit.before;	import org.libspark.as3unit.test;	use namespace test;	use namespace before;	use namespace after;	internal class ColorMatrixUtilTest extends Sprite	{		private static const WHITE:uint = 0xFFFFFFFF;        private static const BLACK:uint = 0xFF000000;        before function setupSample():void        {        }                                test function brightness():void        {        	var baseColor:uint = 0xFFFF0000;        	var bmp:BitmapData = new BitmapData(100,100, true, baseColor);            var testBMP:BitmapData = bmp.clone();            var asset:Bitmap = new Bitmap(bmp);            assertEquals(baseColor, bmp.getPixel32(0, 0));                        //最大まで明るく（白）            asset.filters = [ ColorMatrixUtil.brightness(255)];            testBMP.draw(asset);            assertEquals(WHITE, testBMP.getPixel32(0, 0));            asset.filters = [ ColorMatrixUtil.brightness(512)];            testBMP.draw(asset);            assertEquals(WHITE, testBMP.getPixel32(0, 0));            //最大まで暗く（黒）            asset.filters = [ ColorMatrixUtil.brightness(-255)];            testBMP.draw(asset);            assertEquals(BLACK, testBMP.getPixel32(0, 0));            asset.filters = [ ColorMatrixUtil.brightness(-512)];            testBMP.draw(asset);            assertEquals(BLACK, testBMP.getPixel32(0, 0));                        //変更なし            asset.filters = [ ColorMatrixUtil.brightness(0)];            testBMP.draw(asset);            assertEquals(baseColor, testBMP.getPixel32(0, 0));                    }                test function invert():void        {        	var baseColor:uint = 0xFFFF0000;        	var bmp:BitmapData = new BitmapData(100,100, true, baseColor);            var testBMP:BitmapData = bmp.clone();            var asset:Bitmap = new Bitmap(bmp);            var invertColor:uint = 0xFF00FFFF;                        //最大まで反転（緑 0xFF00FFFF）            asset.filters = [ ColorMatrixUtil.invert(255)];            testBMP.draw(asset);            assertEquals(invertColor, testBMP.getPixel32(0, 0));            asset.filters = [ ColorMatrixUtil.invert(512)];            testBMP.draw(asset);            assertEquals(invertColor, testBMP.getPixel32(0, 0));            //変更なし            asset.filters = [ ColorMatrixUtil.invert(0)];            testBMP.draw(asset);            assertEquals(baseColor, testBMP.getPixel32(0, 0));            asset.filters = [ ColorMatrixUtil.invert(-255)];            testBMP.draw(asset);            assertEquals(baseColor, testBMP.getPixel32(0, 0));                    }                test function colorize():void        {        	var baseColor:uint = 0xFFFF0000;        	var bmp:BitmapData = new BitmapData(100,100, true, baseColor);            var testBMP:BitmapData = bmp.clone();            var asset:Bitmap = new Bitmap(bmp);            var applyColor:uint = 0x0064c8;                        //0xFF0064c8(0,100,200)に着色 100%            asset.filters = [ ColorMatrixUtil.colorize(applyColor, 1)];            testBMP.draw(asset);            assertEquals(applyColor, testBMP.getPixel(0, 0));                        //0xFF0064c8(0,100,200)に着色 50%            asset.filters = [ ColorMatrixUtil.colorize(applyColor, .5)];            testBMP.draw(asset);            assertEquals(0xFF803264, testBMP.getPixel32(0, 0));            //変更なし            asset.filters = [ ColorMatrixUtil.colorize(applyColor, 0)];            testBMP.draw(asset);            assertEquals(baseColor, testBMP.getPixel32(0, 0));            asset.filters = [ ColorMatrixUtil.colorize(applyColor, -1)];            testBMP.draw(asset);            assertEquals(baseColor, testBMP.getPixel32(0, 0));        }                after function teardownSample():void        {        }	}}