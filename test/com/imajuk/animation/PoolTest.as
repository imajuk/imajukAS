package com.imajuk.animation{    import com.imajuk.animations.Pool;	
    import flash.display.Sprite;
    import org.libspark.as3unit.after;    import org.libspark.as3unit.assert.*;    import org.libspark.as3unit.before;    import org.libspark.as3unit.test;        use namespace test;        use namespace before;        use namespace after;
    internal class PoolTest extends Sprite    {        test function hasMaxSize():void        {            var p:Pool = new Pool(10);            assertEquals(10, p.size);            assertEquals(0, p.currentSize);                        p.checkIn(1, {});            assertEquals(1, p.currentSize);            p.checkOut(1);            assertEquals(0, p.currentSize);        }        test function checkIn():void        {            var p:Pool = new Pool(10);            //チェックインにはユニークなキーを使用する            var o:Object = {};            p.checkIn(1, o);            //同じキーでチェックインしようとするとエラー            try            {                p.checkIn(1, {});                fail("このメソッドは実行されない.");            }            catch(e:Error)            {                assertEquals("キー1は既にチェックインされています.", e.message);            }            //チェックアウトすれば、再びそのキーは使用できる            var o2:Object = p.checkOut(1);            try            {                p.checkIn(1, o);            }            catch(e:Error)            {                fail("このメソッドは実行されない.");            }            assertTrue(o == o2);        }                test function invalidCheckIn():void        {        	 var o:Object = {};        	 var o2:Object = {};        	         	 var p:Pool = new Pool(1);        	 p.checkIn(1, o);        	 //許容量を超えるチェックインは出来ない        	 p.checkIn(2, o2);        	 assertFalse(o2 == p.checkOut(2));        }                test function checkOut():void        {        	 var key:int = 1;        	 var a:Array = ["A", "B", "C"];        	 var p:Pool = new Pool(3);        	         	 p.checkIn(key, a[0]);        	 assertEquals(a[0], p.checkOut(key));        	 //プールが空で取得できないときはnullを返す             assertEquals(null, p.checkOut(key));        	        	//キー指定のないチェックアウト        	p.checkIn(0, a[0]);        	p.checkIn(1, a[1]);        	p.checkIn(2, a[2]);        	assertEquals(3, p.currentSize);            assertFalse(p.checkOut() == null);            assertEquals(2, p.currentSize);            assertFalse(p.checkOut() == null);            assertEquals(1, p.currentSize);            assertFalse(p.checkOut() == null);            assertEquals(0, p.currentSize);            assertTrue(p.checkOut() == null);        }    }}