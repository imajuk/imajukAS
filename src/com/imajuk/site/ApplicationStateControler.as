package com.imajuk.site{    import org.libspark.thread.Thread;    /**     * アプリケーションのStateを管理する     * アプリケーションはchangeState()が呼ばれると、Stateの変更をこのクラスに委譲します.     * ApplicationStateInvokerはApplicationStateModelで定義されたロジックにより指定されたStateを開始します.     * またディープリンクの解決もこのクラスが行います     *      * @author shinyamaharu     */    internal class ApplicationStateControler    {        /**    	 * @private         * ステート定義         */        internal var stateModel : ApplicationStateModel;        private var invorker : Thread = new Thread();        /**         * コンストラクタ         * ApplicationStateInvokerインスタンスはフレームワークが生成します.         * ユーザがコンストラクタを呼び出す事はできません.         * @param application   Applicationインスタンス         * @param state         アプリケーションの全ステート定義         */        public function ApplicationStateControler(stateModel : ApplicationStateModel)        {            this.stateModel = stateModel;        }                /**         * @private         * デフォルトに設定されたステートを開始します         */        internal function startDefaultState() : void         {        	//=================================        	// デフォルトのステートを実行        	// （DeeplinkSolverから予約されたステートがあればそのステート）        	//=================================            change(stateModel.defaultStateType);        }                /**         * @private         * ステートを変更します.         * 現在実行中のステートThreadを終了し、指定した新しいステートThreadを開始します         */        internal function change(stateType : Reference) : Boolean         {            //ディープリンク            DeepLinkSolver.update(stateType);                            //モデルにステートの変更を要求            var queue:StateTransitionInfo = stateModel.change(stateType);                        //変更失敗            if (!queue)                return false;                
            //新しいステートをスタート            invorker.interrupt();            invorker = new StateInvoker(queue);            invorker.start();                        return true;        }    }}