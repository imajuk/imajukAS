package com.imajuk.ui.scroll{    import com.imajuk.ui.slider.UISliderThread;    import com.imajuk.ui.IUIView;    import com.imajuk.logs.Logger;    import com.imajuk.ui.MouseWheel;
    import flash.events.MouseEvent;    import org.libspark.thread.Thread;    /**     * @author shinyamaharu     */    public class UIScrollBarInteractionThread extends Thread     {    	private var wheelSimurate : WheelSimurateThread;        private var bar : IUIView;        private var lowArrow : IUIView;        private var highArrow : IUIView;        private var bg : IUIView;        private var executer : IScrollCommandFactory;        private var uiScrollBar : UIScrollBar;
        public function UIScrollBarInteractionThread(                            uiScrollBar:UIScrollBar,                            executer:IScrollCommandFactory                        )        {            super();            this.uiScrollBar = uiScrollBar;            this.bg = uiScrollBar.backGround;            this.bar = uiScrollBar.bar;            this.lowArrow = uiScrollBar.lowArrow;            this.highArrow = uiScrollBar.highArrow;            this.executer = executer;        }        override protected function run() : void        {
            // ホイール            MouseWheel.register(executer);            //スライダー            new UISliderThread(uiScrollBar, executer.model).start();                    	next(interaction);        }                private function interaction():void        {            interrupted(function():void            {            });                        if (lowArrow)                event(lowArrow,  MouseEvent.MOUSE_DOWN, arrowClicked);            if (highArrow)                event(highArrow, MouseEvent.MOUSE_DOWN, arrowClicked);        }        private function arrowClicked(e : MouseEvent) : void        {            if (wheelSimurate)                wheelSimurate.interrupt();                            //e.targetはアローの子供のイベントになることがあるからe.currentTarget            var direction : int = (e.currentTarget == lowArrow) ? -1 : 1;            wheelSimurate = new WheelSimurateThread(executer, direction, executer.model.amount);            wheelSimurate.start();            wheelSimurate.join();            next(interaction);        }        override protected function finalize() : void        {        	MouseWheel.unRegister(executer);        	Logger.debug(this);        }    }}