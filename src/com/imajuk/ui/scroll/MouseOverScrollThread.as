package com.imajuk.ui.scroll{    import com.imajuk.ui.ScrollLock;    import com.imajuk.utils.StageReference;    import flash.display.DisplayObject;    import org.libspark.thread.Thread;    /**     * @author shin.yamaharu     */    public class MouseOverScrollThread extends Thread    {        protected var scrollContainer:MouseOverScrollContainer;        protected var mask:IScrollContainerMask;        protected var scrollHitArea:DisplayObject;        protected var maxScrollSpeed:Number;        private var scrollLock:ScrollLock;        private var rolloverArea : Number;        public function MouseOverScrollThread(                                scrollContainer:MouseOverScrollContainer,                                maxScrollSpeed:Number = 10,                                scrollLock:ScrollLock = null,                                rolloverArea:Number = 30            //ロールオーバ適用エリア                                )        {            super();                        this.scrollContainer = scrollContainer;            this.scrollHitArea = scrollContainer.contentHitArea;            this.mask = scrollContainer.contentMask;            this.maxScrollSpeed = maxScrollSpeed;            this.scrollLock = scrollLock;            this.rolloverArea = rolloverArea;        }        override protected function run():void        {        	interrupted(function():void            {            });                        if (isInterrupted)                return;                            next(run);                        if (scrollLock && scrollLock.isLock)                return;                        if (!scrollHitArea.hitTestPoint(StageReference.stage.mouseX, StageReference.stage.mouseY, false))                return;                            execScroll();                        }                protected function execScroll():void        {            var h:Number = mask.height;        	var calculator:ScrollCaluculator = new ScrollCaluculator(h, h, scrollContainer.actualHeight);        	            var mouseY:Number = mask.mouseY;            var ch:Number = scrollContainer.actualHeight;            var destination:Number;                        if (scrollContainer.content.y + ch < mask.y + h)            {                /**                 * コンテナのサイズが変わった場合、                 * もしコンテナの最下部がマスク最下部の上にあったら                 * コンテナとマスクの最下部をそろえる                 */                destination = 0;            }            else            {            	if (!calculator.isNeedScroll)                    return;                                    if (mouseY > rolloverArea && mouseY < h - rolloverArea)                    return;                                    if (mouseY < rolloverArea)                    mouseY = 0;                else if (mouseY > h - rolloverArea)                   mouseY = h;                                   destination = calculator.getDestination(mouseY);             }                        var speed:Number = (destination - scrollContainer.content.y) * .3;            speed = (speed < 0) ? Math.max(-maxScrollSpeed, speed) : Math.min(maxScrollSpeed, speed);             scrollContainer.content.y += speed;         }        override protected function finalize():void        {        }    }}