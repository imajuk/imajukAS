package com.imajuk.ui.buttons.group{    import com.imajuk.ui.buttons.IButton;    import flash.display.Sprite;    import flash.events.MouseEvent;    import flash.utils.Dictionary;    /**     * XORGroupInteractionは排他的グループのインタラクションを実装します.     *      * 排他的グループとは、グループ内のある要素が操作されたとき、     * その要素以外の要素に対して逆の操作が加えられるグループです.     * 排他的グループは一つ以上の排他的オペレーションをもち、     * どのようなインタラクションに対してオペレーションを実行するか指定できます.     * たとえば、MouseUpインタラクションにDisabled,Selectedオペレーションをアサインする事で     * 排他的ボタングループを表現できます.     *      * @author shinyamaharu     */    internal class XORGroupInteraction    {        protected var buttons : Array;        protected var interactionTypes : Array;
        protected var oparation : ButtonOparation;
        protected var buttonToIndex:Dictionary = new Dictionary(true);
        /**         *          * @param buttonn                       グループ化したいInteractiveObjectを要素にもつ配列です         * @param defaultSelectedButtonIndex    デフォルトで選択されているInteractiveObjectのインデックスです         *                                      -1を指定するとデフォルトで無選択状態になります.         * @param interactionTypes              排他的操作がアサインされるインタラクションです.         *          */        public function XORGroupInteraction(
        					buttons : Array,        					defaultSelectedButtonIndex:int,        					interactionTypes:Array,
        					oparation:ButtonOparation        					)
        {
            this.buttons = buttons;            this.interactionTypes = interactionTypes;            this.oparation = oparation;

            buttons.forEach(                function(btn:IButton, idx:int, ...param):void                {                    buttonToIndex[btn] = idx;                }            );                        //デフォルト動作を実行            setXORStatus(defaultSelectedButtonIndex);        }                internal function startInteraction():void
        {            stopInteraction();            interactionTypes.forEach(                function(eventType:String, ...param) : void                {
                    buttons.forEach(                        function(btn:IButton, ...param):void
                        {                            btn.addEventListener(eventType, mouseHandler);                        }                    );                }            );        }        internal function stopInteraction():void        {            interactionTypes.forEach(                function(eventType:String, ...param) : void                {                    buttons.forEach(                        function(btn:Sprite, ...param):void                        {                            btn.removeEventListener(eventType, mouseHandler);                        }                    );                }            );        }                internal function dspose() : void        {            stopInteraction();            buttons.forEach(                function(btn:IButton, ...param):void                {                    oparation.oparate(btn, false);                }            );        }                private function mouseHandler(e : MouseEvent) : void        {            var button : IButton = e.target as IButton;            if (button)                setXORStatus(buttonToIndex[button]);        }        internal function setXORStatus(inactiveButtonIndex : int) : void        {            if (inactiveButtonIndex < 0) return;            buttons.forEach(                function(btn:IButton, idx:int, ...param):void                {                    var oparateValue:Boolean = idx == inactiveButtonIndex;                    oparation.oparate(btn, oparateValue);                }            );        }    }}