package com.imajuk.commands.loading {
    import flash.system.LoaderContext;    import com.imajuk.commands.CommandLeaf;
    import com.imajuk.commands.IAsynchronousCommand;
    import com.imajuk.data.IComponent;
    import com.imajuk.interfaces.IDisposable;
    import com.imajuk.interfaces.IProgess;

    import flash.display.LoaderInfo;
    import flash.net.URLRequest;    /**     * <code>LoadCommand</code>を内包するための<code>CommandLeaf</code>です.     *      * <p><code>CommandLeaf</code>を特化した具象<code>CommandLeaf</code>で、ファイルのロードをする<code>LoadCommand</code>を一つ保持します.</p>     * <p>This is concrete <code>CommandLeaf</code>, and includes a <code>LoadCommand</code>.</p>     *      * @author	yamaharu     * @see		ILoadable     * @see		CommandLeaf     * @see		CommandComponent     */    public class LoadCommandLeaf extends CommandLeaf implements IComponent, ILoadComponent, IAsynchronousCommand, IDisposable, IProgess
    {
        //--------------------------------------------------------------------------        //        //  Constructor        //        //--------------------------------------------------------------------------                /**         * コンストラクタ.         *          * @param urlRequest	ロード対象が記述された<code>URLRequest</code>         * 						<p><code>URLRequest</code> written loaded URL.</p>         */        public function LoadCommandLeaf(urlRequest:URLRequest, defaultLoader:Class = null, context:LoaderContext = null, asBinary:Boolean = false)        {            super(new LoadCommand(urlRequest, defaultLoader, context, asBinary));            LoadCommandUtil.relayCommonEvent(myCommand, this);        }                //--------------------------------------------------------------------------        //        //  implementation of IProgessComponent        //        //--------------------------------------------------------------------------        public function get value() : Number        {            return LoadCommand(myCommand).value;        };        public function get total() : Number        {            return LoadCommand(myCommand).total;        }        public function get percent() : Number        {            return LoadCommand(myCommand).percent;        };        public function set value(value:Number) : void {};        public function set total(value:Number) : void {};                //--------------------------------------------------------------------------        //        //  implementation of ILoadComponent        //        //--------------------------------------------------------------------------        /**         * @copy ILoadComponent#waitInitialize         */        public function get waitInitialize():Boolean        {            return LoadCommand(myCommand).waitInitialize;        }        public function set waitInitialize(value:Boolean):void        {            LoadCommand(myCommand).waitInitialize = value;        }        //--------------------------------------------------------------------------        //        //  properties        //        //--------------------------------------------------------------------------        /**         * @copy LoadCommand#content         */        public function get content():*        {            return LoadCommand(myCommand).content;        }        /**         * @copy LoadCommand#loaderInfo         */        public function get loaderInfo():LoaderInfo        {            return LoadCommand(myCommand).loaderInfo;        }        //--------------------------------------------------------------------------        //        //  Overridden methods        //        //--------------------------------------------------------------------------        override public function toString():String        {            return "LoadCommandLeaf[" + myCommand + "]";        }                override public function stop():Boolean        {        	return LoadCommand(myCommand).stop();        }                public function dispose() : void        {        	IDisposable(myCommand).dispose();        }    }
}
