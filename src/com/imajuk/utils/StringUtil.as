package com.imajuk.utils {
    /**
     * @author yamaharu
     */
    public class StringUtil     {        public static function format(value:Object, digit:Number, char:String = null):String        {            var s:String = String(value) ;            var l:Number = (s.length < digit) ? digit - s.length : 0;            var c:String = (char) ? char : "0";            for (var i:Number = 0;i < l; i++)             {                s = c + s;            }            return s;        }        public static function formatNumber(number:Number):String        {            //      trace("\nXString connma() : " + [__num]);//            var s:String = String(Math.abs(__num));//            var l:Number = s.length;//            var temp:String = "";//            for (var i:int = 1;i < l + 1; i++) //            {//                temp = (s.substr(l - i, 1)) + temp;//                temp = (i % 3 == 0 && i != l) ? "," + temp : temp;//            }//            var resule:String = (__num < 0) ? "-" + temp : temp;//            return resule;                        var  a : Array = Math.abs(number).toString().split(''),                   s : String,                 i : int, j : int;            for (i = a.length - 1; i >= 0; i--)            {                s = a[i];                if (j != 0 && j % 3 == 0)                    a[i] = s + ',';                j++;            }            if (number < 0) a.unshift('-');            return a.join('');        }        /**         * 任意の1文字が半角英字かどうかを返す          * ユニコードで0x21から0x7eの範囲。数字、記号を含みます         * @param alsoSpace 半角スペース（0x20）を半角英字に含めるかどうか         */        public static function checkStrEN(s:String, alsoSpace:Boolean = true):Boolean        {            var cCode:Number = s.charCodeAt(0);            var min:uint = alsoSpace ? 0x20 : 0x21;            return (cCode >= min && cCode <= 0x7e);        }                /**         * 任意の文字列に半角英字が含まれているかどうかを返す          */        public static function checkincludedEN(s:String):Boolean        {        	for (var i:int = 0;i < s.length; i++)             {            	if (checkStrEN(s.charAt(i)))            	   return true;            }            return false;        }        /**         * 任意の文字列に半角英字以外が含まれているかどうかを返す          */        public static function checkincExpectEn(s:String):Boolean        {            for (var i:int = 0;i < s.length; i++)             {            	if (!checkStrEN(s.charAt(i)))            	   return true;             }            return false;        }                /* CRLFを<br>タグに変換します。         * MacはCRなので、CRを<br>に変換しLFは削除します。         * @param   任意の文字列         * @return  CRLFを<br>タグに変換した文字列         */        public static function convertCRLFtoBR(__str:String):String        {            var result:String = "";            for (var i:Number = 0;i < __str.length; i++)            {                var s:String = __str.substr(i, 1);                //          trace(["%",s,s.charCodeAt(0),s.charCodeAt(0)==10]);                result += (s.charCodeAt(0) == 10) ? "" : (s.charCodeAt(0) == 13) ? "<br>" : s;            }            return result;        }        public static function toZenkaku(s:String):String        {            var s2:String = "";            for (var i:int = 0;i < s.length; i++) 
            {                var s3:String = s.charAt(i);                if (checkStrEN(s3))                    s2 += String.fromCharCode(s3.charCodeAt(0) + 65248);        		else        		    s2 += s3;            }            return s2;        }        /**         * テキスト中の$を任意の文字列と置き換えます         * trace(StringUtil.replace("The cat meow $ times.", 3))         * //result          * //The cat meow 3 times.         */        public static function replace(string : String, ...replaced) : String        {        	if (replaced.length == 0)        	   return string;        	           	var result:String = "";        	var a:Array = string.split("$");        	        	if (replaced.length > 1 && a.length != replaced.length)        	   throw new Error("amount of $ doesn't match replaced charactors.");        	               a.forEach(function(s:String, idx:int, ...param) : void            {            	result += s + (replaced[idx] || "");            });        	return result;        }        /**         * 与えられた文字列の空白を削除して返す         */        public static function trimSpace(s : String) : String        {            return s.split(" ").join("");        }        
        
    }
}
