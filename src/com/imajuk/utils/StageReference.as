﻿package com.imajuk.utils{    import com.imajuk.testImajuk;    import flash.display.*;    import flash.events.Event;    import flash.geom.Point;    import flash.geom.Rectangle;	/**     * グローバルに<code>Stage</code>、およびドキュメントクラスにアクセスするためのクラス.     *      * @author    yamaharu     */        public class StageReference    {        //--------------------------------------------------------------------------        //        //  Class properties        //        //--------------------------------------------------------------------------                /**         * @private         */        private static var _stageReferer:DisplayObject = null;        private static var _stage : Stage;        /**         * <code>Stage</code>オブジェクトの参照を返します.         *          * @return  Stageオブジェクトの参照         */        public static function get stage():Stage        {            checkInitialize();            return _stage;        }                /**         * @private         */        private static var _documentClass:DisplayObjectContainer = null;                /**         * ドキュメントクラスの参照を返します.         * @return  ドキュメントクラスの参照         */        public static function get documentClass():DisplayObjectContainer        {            checkInitialize();            var stageChildren:int = stage.numChildren;            for (var i:Number = 0; i < stageChildren; i++)             {                var child:DisplayObject = stage.getChildAt(i) as DisplayObject;                 if (child.root == child)                    return child as DisplayObjectContainer;            }            return null;        }                   /**         * <code>stage</code>プロパティ、または<code>documentClass</code>プロパティが使用可能かどうかを返します.         * @return  <code>stage</code>プロパティ、または<code>documentClass</code>プロパティが使用可能な場合は<code>true</code>、そうでない場合は<code>false</code>を返します         */        public static function get isEnabled():Boolean        {            return _stageReferer != null;        }                /**         * <code>Stage</code>の中央を<code>Point</code>で返します.         */        public static function get center():Point        {            checkInitialize();            return new Point(width >> 1, height >> 1);        }                /**         * <code>Stage</code>の幅を返します.         */        public static function get width() : uint        {            checkInitialize();            return _stage.stageWidth;        }                /**         * <code>Stage</code>の高さを返します.         */        public static function get height() : uint        {            checkInitialize();            return _stage.stageHeight;        }        /**         * <code>Stage</code>の幅と高さで生成された<code>Rectangle</code>を返します.         */        public static function get stageRect() : Rectangle        {            checkInitialize();            return new Rectangle(0, 0, width, height);        }                /**         * StageがRenderイベントを配信するかどうかを指定します.         * <code>true</code>を指定すると任意の<code>DisplayObject</code>は         * <code>Event.RENDER</code>を受け取れるようになります.         */        private static var _dispatchRenderEvent : Boolean;        public static function set dispatchRenderEvent(value:Boolean) : void        {            _dispatchRenderEvent = value;            _stage.removeEventListener(Event.ENTER_FRAME, onEnterframe);            if (value)                _stage.addEventListener(Event.ENTER_FRAME, onEnterframe);        }        static public function get dispatchRenderEvent() : Boolean        {            return _dispatchRenderEvent;        }        //--------------------------------------------------------------------------        //        //  Class methods          //        //--------------------------------------------------------------------------                /**         * <code>StageReference</code>を初期化します.         *          * <p><code>StageReference</code>を使用するためには、一度だけ初期化する必要があります.<br/>         * 通常、ドキュメントクラスで初期化します.</p>         *          * @throws jp.imgsrc.utils.StageReferenceError 初期化に失敗すると<code>StageReferenceError</code>をスローします.         * @param stageReferer	表示リストに含まれている任意の<code>DisplayObject</code>を渡します.         * 						<p>通常は表示リストに含まれていることが保証されている<code>DocummentClass</code>を指定します.</p>         */        public static function initialize(stageReferer:DisplayObject):void        {            if (!stageReferer)                throw new StageReferenceError(1);            if (!(stageReferer is Stage) && !stageReferer.stage)                throw new StageReferenceError(2);                            _stageReferer = stageReferer;            _stage = (stageReferer is Stage) ? Stage(_stageReferer) : _stageReferer.stage;            _documentClass = DisplayObjectContainer(_stage.getChildAt(0));        }                            /**         * ドキュメントクラス直下に存在する任意の名前の<code>DisplayObject</code>インスタンスを返します.         * @param name	参照を得たい<code>DisplayObject</code>インスタンスの名前         * @return		任意の名前の<code>DisplayObject</code>インスタンス         */        public static function getDisplayObjectByName(name:String):DisplayObject        {            checkInitialize();            return _documentClass.getChildByName(name);        }            /**         * <code>StageReference</code>の初期化内容をリセットします.         * <p>通常は使用しません</p>         */        public static function reset():void        {            _stageReferer = null;            _documentClass = null;        }            /**        * @private         */        private static function checkInitialize():void        {            if (!_stageReferer)                throw new StageReferenceError(0);            if (!_documentClass)                throw new StageReferenceError(0);        }            testImajuk static function clear():void        {        	_stageReferer = null;        }        testImajuk static function repair(stageRef:Stage):void        {            _stageReferer = stageRef;        }        private static function onEnterframe(event : Event) : void        {            _stage.invalidate();        }    }}