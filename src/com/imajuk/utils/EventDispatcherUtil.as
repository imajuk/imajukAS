package com.imajuk.utils {
    import com.imajuk.testImajuk;	
    
    import flash.events.Event;		import flash.utils.Dictionary;		import flash.events.IEventDispatcher;		/**	 * リスナの登録と解除をサポートするヘルパー
	 * @author yamaharu
	 */
	public class EventDispatcherUtil 	{
		private static var _dispatchInfo : Dictionary;		//---------------------------------------------------------------------------------command		/**		 * 指定されたDispatcherのリスナを追加します		 * リスナの追加時に、イベントを受け取る回数を指定できます。		 * リスナは指定された回数イベントを受け取ると、自動的にDispatcherのリスナから登録解除されます。		 * @param __dispatcher	ターゲトとなるDispatcher		 * @param __eventType	ターゲットとなるイベントタイプ		 * @param __listener	リスナ		 * @param __times		イベントを受け取る回数		 */		public static function addEventListenr (__dispatcher : IEventDispatcher, __eventType : String, __listener : Function, __times : int = 0) : void		{			if(! _dispatchInfo)				reset();							if(! _dispatchInfo[__dispatcher])				_dispatchInfo[__dispatcher] = [];							var info : Array;			info = _dispatchInfo[__dispatcher];			info.push(new DispatchingInfo(__eventType, __listener, __times));							__dispatcher.addEventListener(__eventType, __listener);			__dispatcher.addEventListener(__eventType, onDispatched);		}						/**		 * 引数で渡されたEventDispatcherのイベントタイプが保持するリスナの登録を削除します		 * イベントタイプを指定しない場合は、全てのイベントタイプについてリスナの登録を解除します		 * @param __dispatcher	ターゲットとなるEventDispatcher		 * @param __eventType	ターゲットとなるイベントタイプ		 * 						指定されなかった場合は、全てのイベントタイプが対象になります		 */		public static function removeEventListener (__dispatcher : IEventDispatcher, __eventType : String = null) : void		{			var info : Array = _dispatchInfo[__dispatcher];			if(! info)				return;						info.filter(function(item : DispatchingInfo, ...param):Boolean            			{            				var eventType : String = item.eventType;            				return (__eventType == null || __eventType == eventType);            			})			.forEach(function(item : DispatchingInfo, ...param):void            			{            				var eventType : String = item.eventType;            				__dispatcher.removeEventListener(eventType, item.listener);            				__dispatcher.removeEventListener(eventType, onDispatched);            			});			if(! hasEventListener(__dispatcher))				_dispatchInfo[__dispatcher] = null;		}				/**		 * 管理しているDispatcherの記録を削除します		 */		public static function reset () : void		{			_dispatchInfo = new Dictionary(true);		}				/**		 * 指定されたDispatcherが何らかのイベントタイプのリスナを保持しているかどうかを返します。		 * @param __dispatcher	ターゲットとなるDispatcher		 */		public static function hasEventListener (__dispatcher : IEventDispatcher) : Boolean		{			var info : Array = _dispatchInfo[__dispatcher];			if(! info)				return false;					return info.some(function(item : DispatchingInfo, ...param):Boolean                			{                				return __dispatcher.hasEventListener(item.eventType);                			});		}						//---------------------------------------------------------------------------------event		static private function onDispatched (__e : Event) : void		{			var dispatcher : IEventDispatcher = IEventDispatcher(__e.currentTarget);			var info : Array = _dispatchInfo[dispatcher];			if(! info)				return;							info.filter(function(item : DispatchingInfo, ...param):Boolean            			{            				return item.eventType == __e.type;            			})			.forEach(function(item : DispatchingInfo, ...param):void            			{            				item.count ++;            				var times : int = item.times;            				if(times > 0 && item.count >= times)            					removeEventListener(dispatcher, item.eventType);            			});		}						//---------------------------------------------------------------------------------forTest		testImajuk static function hasManagingDispatcher () : int		{			var c : int = 0;			for each (var i : String in _dispatchInfo) 			{				if(i != null)					c ++;			}			return c;		}	}
}class DispatchingInfo{	private var _eventType : String;	private var _listener : Function;	private var _times : int;	private var _count : int;	public function DispatchingInfo (__eventType : String, __listener : Function, __times : int) 	{		_eventType = __eventType;		_listener = __listener;		_times = __times;		_count = 0;	}			public function get eventType () : String	{		return _eventType;	}			public function get listener () : Function	{		return _listener;	}			public function get times () : int	{		return _times;	}			public function get count () : int	{		return _count;	}			public function set count (__value : int) : void	{		_count = __value;		}}
