package com.imajuk.media{    import com.imajuk.threads.ThreadUtil;    import com.imajuk.utils.StageReference;    import fl.video.VideoEvent;    import flash.events.Event;    import flash.events.MouseEvent;    import org.libspark.thread.Thread;    /**     * @author shinyamaharu     */    public class VideoUIThread extends Thread     {        private var videoUI : IVideoUI;
        private var video : SimpleFLVPlayer;
        
        private var videoLoadingProgressThread : Thread = new Thread();
        private var videoHeadThread : Thread = new Thread();
        private var videoPlayButtonThread : Thread = new Thread();
        private var videoSoundThread : Thread = new Thread();
        private var videoSize : VideoSize;
        private var videoPlaybackProgressThread : Thread;
        private var videoFullThread : Thread;        private var visible : Thread;        private var autoStart : Boolean;        public function VideoUIThread(                            video : SimpleFLVPlayer,                             videoUI : IVideoUI,                             videoSize:VideoSize,                            autoStart:Boolean                        )
        {
            super();
            
            this.videoUI = videoUI;            this.video = video;            this.videoSize = videoSize;            this.autoStart = autoStart;                        if (videoUI && videoUI.autoVisibleManagement)                videoUI.alpha = 0;                            layout();        }        override protected function run() : void        {        	if (isInterrupted) return;        	interrupted(function():void{});        	            event(video, VideoEvent.READY, videoReadyHandler);        }        private function videoReadyHandler(e : VideoEvent) : void         {        	if (isInterrupted) return;            interrupted(function():void{});            videoSize.originalWidth = video.width;            videoSize.originalHeight = video.height;                        layout();            setup();            waitInput();
        }
        private function setup() : void         {        	videoLoadingProgressThread = new VideoLoadingProgressThread(video, videoUI);        	videoLoadingProgressThread.start();        	        	if (videoUI.playHead)        	{                videoHeadThread = new VideoPlayHeadDraggingThread(video, videoUI);                videoHeadThread.start();        	}                        videoPlaybackProgressThread = new VideoPlaybackProgressThread(video, videoUI);            videoPlaybackProgressThread.start();                        videoPlayButtonThread = new VideoPlayButtonThread(video, videoUI, autoStart);            videoPlayButtonThread.start();                        videoSoundThread = new VideoSoundThread(videoUI);            videoSoundThread.start();                        if (videoUI.fullscreenUI)            {                videoFullThread = new VideoFullScreenThread(videoUI, video);                videoFullThread.start();            }        }        
        private function waitInput() : void         {        	if (isInterrupted) return;            interrupted(function():void{});        	//=================================        	// layout UI        	//=================================            event(StageReference.stage, Event.RESIZE, stageResizedHandler);                        //=================================            // show and hide UI            // =================================            if (videoUI.autoVisibleManagement)            {                event(videoUI, MouseEvent.ROLL_OVER, rollOverHandler);                event(videoUI, MouseEvent.ROLL_OUT, rollOutHandler);            }
        }
        private function stageResizedHandler(e : Event) : void         {            layout();
            waitInput();
        }        private function rollOutHandler(e : MouseEvent) : void         {        	if (visible)        	   visible.interrupt();            visible = videoUI.hiddingBehavior;            visible.start();            waitInput();        }        private function rollOverHandler(e : MouseEvent) : void         {        	if (visible)               visible.interrupt();            visible = videoUI.showingBehavior;            visible.start();            waitInput();        }                private function layout(e : Event = null) : void        {        	if (!videoUI.stage)        	   return;        	               //=================================            // ビデオUI内のコントロールをレイアウト            //=================================             videoUI.layout(videoSize.width);        }        override protected function finalize() : void        {        	ThreadUtil.interrupt(videoLoadingProgressThread);        	ThreadUtil.interrupt(videoPlaybackProgressThread);        	ThreadUtil.interrupt(videoHeadThread);        	ThreadUtil.interrupt(videoPlayButtonThread);
            ThreadUtil.interrupt(videoSoundThread);            ThreadUtil.interrupt(videoFullThread);
        }    }}