package com.imajuk.media{    import com.imajuk.logs.Logger;
    import com.imajuk.media.simpleVideo;            import fl.video.VideoState;    import fl.video.VideoEvent;        import fl.video.MetadataEvent;        	import flash.events.Event;    import flash.events.TimerEvent;        import flash.utils.Timer;        import flash.utils.Dictionary;        import flash.net.ObjectEncoding;        import flash.events.AsyncErrorEvent;        import flash.media.Video;        import flash.net.NetStream;        import flash.events.SecurityErrorEvent;        import flash.events.NetStatusEvent;        import flash.net.NetConnection;        import flash.display.Sprite;    import flash.utils.getTimer;    /**     * @author yamaharu     */    public class SimpleFLVPlayer extends Sprite     {        //--------------------------------------------------------------------------        //        //  Class constants        //        //--------------------------------------------------------------------------        public static const CONNECTING:String = "connecting";        public static const READY:String = "ready";        public static const SEEKING:String = "seeking";        public static const PLAYING:String = "playing";        private var previousPlayHead:Number;        //--------------------------------------------------------------------------        //        //  Class mixins        //        //--------------------------------------------------------------------------    	        //--------------------------------------------------------------------------        //        //  Class properties        //        //--------------------------------------------------------------------------    	        //--------------------------------------------------------------------------        //        //  Class methods        //        //--------------------------------------------------------------------------    	        //--------------------------------------------------------------------------        //        //  Constructor        //        //--------------------------------------------------------------------------        public function SimpleFLVPlayer()        {            _cue = new Dictionary(true);            _cueClosure = new Dictionary(true);            _id = getTimer();        }                //--------------------------------------------------------------------------        //        //  Variables        //        //--------------------------------------------------------------------------        private var _id:int;        private var nc:NetConnection;        private var stream:NetStream;        private var video:Video;        private var _sourceName:String;        private var _fmsApplication:String;        private var _cue:Dictionary;        private var _cueClosure:Dictionary;        simpleVideo var _status:String;        private var _duration:Number;        private var _isPausing:Boolean = false;        use namespace simpleVideo;        //--------------------------------------------------------------------------        //        //  Overridden properties        //        //--------------------------------------------------------------------------    	        //--------------------------------------------------------------------------        //        //  properties        //        //--------------------------------------------------------------------------        public function get bufferLength():Number        {        	if (stream == null)                return 0;                             return stream.bufferLength;        }                //default value of NetStream.bufferTime        private var _bufferTime:Number = .1;                public function get bufferTime():Number        {            return _bufferTime;        }                public function set bufferTime(value:Number):void         {            _bufferTime = value;            if (stream == null)                return;                             stream.bufferTime = _bufferTime;        }                public function get playheadTime():Number        {            if (stream)                return stream.time;            else                return 0;        }                public function get duration():Number        {            return _duration;        }                public function getBytesTotal():Number        {            if (!stream)                return 0;            return stream.bytesTotal;        }        public function getBytesLoaded():Number        {            if (!stream)                return 0;                            return stream.bytesLoaded;        }                public function get isBuffering() : Boolean        {            return bufferLength < bufferTime;        }        //--------------------------------------------------------------------------        //        //  Overridden methods        //        //--------------------------------------------------------------------------                override public function toString():String        {        	return "SimpleFLVPlayer" + String(_id);        }        //--------------------------------------------------------------------------        //        //  Methods: discription        //        //--------------------------------------------------------------------------                public function connectStream():void         {            stream = new NetStream(nc);            stream.checkPolicyFile = true;            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);            stream.client = new CustomClient(this);            video = new Video();            video.smoothing = true;            video.addEventListener(Event.ENTER_FRAME, function(e:Event):void            {            	if (previousPlayHead == playheadTime)            	   return;            	               	   previousPlayHead = playheadTime;            	   dispatchEvent(new VideoEvent(VideoEvent.PLAYHEAD_UPDATE, true, false, VideoState.PLAYING, playheadTime));            });            video.attachNetStream(stream);            stream.play(_sourceName);                        hideVideo();            addChild(video);        }                private function hideVideo():void        {            video.visible = false;        }        public function play(fmsApplication:String, sourceName:String):void        {        	Logger.debug(this, " play ++++++" + [fmsApplication, sourceName]);        	_status = CONNECTING;        	        	_fmsApplication = fmsApplication;        	_sourceName = sourceName;        	        	nc = new NetConnection();        	nc.proxyType = "best";            nc.objectEncoding = ObjectEncoding.AMF3;            nc.client = new CustomClient(this);            nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);            nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);                        /**             * protocol:[//host][:port]/appname[/instanceName]             */            nc.connect(_fmsApplication);        }                private function reSize(width:Number, height:Number):void        {            video.width = width;            video.height = height;        }        private function showVideo():void        {            video.visible = true;        }                //--------------------------------------------------------------------------        //        //  Event handlers: discription        //        //--------------------------------------------------------------------------    	        private function netStatusHandler(event:NetStatusEvent):void         {//            trace(this + " netStatusHandler " + [ _status , playheadTime]);//            ObjectUtil.dump(event.info);            var code:String = String(event.info["code"]);            switch (code)             {                case "NetConnection.Connect.Success":                {                    connectStream();                    break;                }                case "NetStream.Play.StreamNotFound":                {                    Logger.debug(this, "Stream not found: ");                    throw new Error("Stream not found: ");                    break;                }                case "NetStream.Buffer.Full":                {                    SeekWatchingHelper.finishedBufferFull();                    break;                }                case "NetStream.Play.Start":                {                    if (_status == READY)                        _status = PLAYING;                    break;                }                case "NetStream.Seek.Notify":                {                	SeekWatchingHelper.finishedBufferFull();                    break;                }                //ダーティパッチ                //プログレスダウンロードではNetStream.onPlayStatusが呼ばれないため                //ここで擬似的に呼び出している.                //ストリーミングの際はこのコードが問題になるかもしれない                case "NetStream.Play.Stop":                {                	playingStatusHandler({code:"NetStream.Play.Complete"});                    break;                }//                case "NetStream.Pause.Notify"://                {//                	_isPausing = true;//                	break;//                }//                case "NetStream.Unpause.Notify"://                {//                    _isPausing = false;//                    break;//                }            }        }                simpleVideo function seekedFinished():void        {            _status = PLAYING;            resume();            Logger.debug(this, "////////////////////////////////////SEEKED", this);            dispatchEvent(new VideoEvent(VideoEvent.SEEKED, true));        }        public function playingStatusHandler(info:Object):void        {        	var code:String = String(info["code"]);            switch (code)             {                case "NetStream.Play.Complete":                    dispatchEvent(new VideoEvent(VideoEvent.COMPLETE, true));                    break;            }        }        private function securityErrorHandler(event:SecurityErrorEvent):void         {            Logger.debug(this, "securityErrorHandler: " + event);        }        private function asyncErrorHandler(event:AsyncErrorEvent):void        {            Logger.debug(this, "asyncErrorHandler: " + event);        }                public function onMetaDataHandler(info:Object):void        {        	info["owner"] = this;//                    	ObjectUtil.dump(info);        	dispatchEvent(new MetadataEvent(MetadataEvent.METADATA_RECEIVED, false, false, info));        }                public function onCueHandler(info:Object):void        {//        	ObjectUtil.dump(info);        }                public function videoReadyHandler(info:Object):void        {            if (_status == CONNECTING)            {                _status = READY;                _duration = info["duration"];                reSize(info["width"], info["height"]);                showVideo();                dispatchEvent(new VideoEvent(VideoEvent.READY, true));            }        }
        
        public function addASCuePoint(cueObj:Object):Object        {        	var cueWatcher:Timer = new Timer(500);        	var f:Function = function(event:TimerEvent):void                                {                                    if (playheadTime >= cueObj["time"])                                    {                                        Timer(event.target).removeEventListener(TimerEvent.TIMER, arguments.callee);                                        var mev:MetadataEvent = new MetadataEvent(MetadataEvent.CUE_POINT, false);                                        mev.info = cueObj;                                         dispatchEvent(mev);                                    }                                };            cueWatcher.addEventListener(TimerEvent.TIMER, f);            cueWatcher.start();                        _cue[cueObj] = cueWatcher;            _cueClosure[cueWatcher] = f;            return cueObj;        }                public function removeASCuePoint(cueObj:Object):void        {        	_cue[cueObj] = null;        }                public function pause():void        {            if (_isPausing || !stream)                return;                        	Logger.debug(this ," pause " + [ _status , playheadTime]);        	_isPausing = true;        	            if (stream)                stream.pause();        }                public function resume():void        {            Logger.debug(this ," resume " + [ _status, playheadTime ]);        	_isPausing = false;            stream.resume();        }                public function destroy():void        {        	Logger.debug(this ," destroyed. ");        	            SeekWatchingHelper.stop();        	            if (stream)            {                stream.close();                stream.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);                stream = null;            }                        if (nc)            {                nc.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);                nc.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);                nc.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);                nc.close();                nc = null;            }                        for (var tmr : Object in _cueClosure)             {            	var timer:Timer = Timer(tmr);                timer.stop();                timer.removeEventListener(TimerEvent.TIMER, _cueClosure[tmr]);                _cueClosure[tmr] = null;            }            for (var o : String in _cue)                         {                _cue[o] = null;            }            _cueClosure = null;            _cue = null;                        if (video)            {            	removeChild(video);                video = null;            }        }                public function stop():void        {            if (!stream)                return;                            stream.close();        }                public function seek(offset:Number):void        {        	SeekWatchingHelper.initialize(this);        	            if (offset > duration)                offset = duration - .5;            else if (offset < 0)                offset = 0;        	Logger.debug(this, " seek " + [offset, _status ]);                            if (!stream)            {            	Logger.debug(this, "stream is not prepared.");            	return;            }            stream.seek(offset);            _status = SEEKING;                        if (offset == 0)            {            	pause();                seekedFinished();            }            else            {                SeekWatchingHelper.watchSeeking(playheadTime);            }        }
        
        public function get sourceName():String
        {            return _sourceName;
        }
    }}////////////////////////////////////////////////////////////////////////////////////  Helper class: MethodQueueElement//////////////////////////////////////////////////////////////////////////////////import com.imajuk.media.SimpleFLVPlayer;

class CustomClient {    private var _owner:SimpleFLVPlayer;    public function CustomClient(owner:SimpleFLVPlayer)     {    	_owner = owner;    }    public function onMetaData(info:Object):void     {        _owner.onMetaDataHandler(info);        _owner.videoReadyHandler(info);    }    public function onCuePoint(info:Object):void     {        _owner.onCueHandler(info);    }        public function onBWDone():void     {    }        public function onXMPData(...param):void     {    }        //onPlayStatus このイベントはストリーミングでしか発生しないらしい    //プログレスダウンロードでは発生しない    public function onPlayStatus(info:Object):void     {        _owner.playingStatusHandler(info);    }}import flash.utils.setInterval;import flash.utils.clearInterval;import flash.utils.Timer;import flash.events.TimerEvent;import com.imajuk.media.simpleVideo;class SeekWatchingHelper{    private static var seekingBufferFull:Boolean;    private static var playHeadTimeReady:Boolean;    private static var owner:SimpleFLVPlayer;    private static var _startSeekingTime:Number;    private static var _seekWatcher:Timer;    private static var bufferWatcher:uint;    use namespace simpleVideo;        public static function initialize(o:SimpleFLVPlayer):void    {        owner = o;        seekingBufferFull = false;        playHeadTimeReady = false;        killWatchSeeking();        killBufferWatcher();    }        private static function killBufferWatcher():void    {         clearInterval(bufferWatcher);    }    public static function finishSeekingPlayHeadTime():void    {    	playHeadTimeReady = true;    	        if (seekingBufferFull)    	   //すでにバッファ済みならシーク終了            seekedFinished();        else            //バッファを監視            bufferWatcher = setInterval(function():void                                        {                                            if (seekingBufferFull)                                            {                                                killBufferWatcher();                                                seekedFinished();                                            }                                        }, 10);    }        private static function seekedFinished():void    {    	killWatchSeeking();    	seekingBufferFull = false;        owner.seekedFinished();        owner = null;    }        public static function finishedBufferFull():void    {        if (!owner)            return;                    seekingBufferFull = true;        if (playHeadTimeReady)            seekedFinished();    }    public static function watchSeeking(initTime:Number):void    {        _startSeekingTime = initTime;        _seekWatcher = new Timer(10);        _seekWatcher.addEventListener(TimerEvent.TIMER, watchSeekingHandler);        _seekWatcher.start();    }    private static function killWatchSeeking():void    {        if(!_seekWatcher)                return;                        _seekWatcher.stop();        _seekWatcher.removeEventListener(TimerEvent.TIMER, watchSeekingHandler);        _seekWatcher = null;        _startSeekingTime = NaN;    }    private static function watchSeekingHandler(event:TimerEvent):void    {    	if (_startSeekingTime == owner.playheadTime)    	   return;    	           if (owner._status == SimpleFLVPlayer.SEEKING)        {            killWatchSeeking();            owner.pause();            SeekWatchingHelper.finishSeekingPlayHeadTime();        }    }        public static function stop():void    {    	killWatchSeeking();    }}