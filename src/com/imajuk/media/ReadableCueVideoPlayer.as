package com.imajuk.media {    import com.imajuk.commands.EventCommand;        import com.imajuk.commands.ICommand;        import fl.video.VideoEvent;        import fl.video.VideoState;        import fl.video.MetadataEvent;        import fl.video.VideoPlayer;    import fl.video.NCManager;    import flash.utils.getTimer;        import flash.utils.Dictionary;        import flash.events.TimerEvent;    
    import flash.utils.Timer;
    
    /**     * @author yamaharu     */    public class ReadableCueVideoPlayer extends VideoPlayer     {        //--------------------------------------------------------------------------        //        //  Class constants        //        //--------------------------------------------------------------------------    	                 //--------------------------------------------------------------------------        //        //  Class mixins        //        //--------------------------------------------------------------------------    	                //--------------------------------------------------------------------------        //        //  Class properties        //        //--------------------------------------------------------------------------    	                //--------------------------------------------------------------------------        //        //  Class methods        //        //--------------------------------------------------------------------------    	                //--------------------------------------------------------------------------        //        //  Constructor        //        //--------------------------------------------------------------------------        public function ReadableCueVideoPlayer(width:int = 320, height:int = 240)        {            var _forceNCManager:fl.video.NCManager;            _forceNCManager;        	            super(width, height);            _id = getTimer();            _cue = new Dictionary(true);            _cueClosure = new Dictionary(true);                        addEventListener(VideoEvent.STATE_CHANGE, stateChangeHandler);            addEventListener(MetadataEvent.METADATA_RECEIVED, metaDataRecievedHandler);        }                //--------------------------------------------------------------------------        //        //  Variables        //        //--------------------------------------------------------------------------        private var _cue:Dictionary;        private var _cueClosure:Dictionary;        private var _seekWatcher:Timer;        private var stateBeforeSeek:String;        private var _duration:Number;        private var bufferMonitor:Timer;        private var seekTime:Number = NaN;        private var _id:int;        //--------------------------------------------------------------------------        //        //  Overridden properties        //        //--------------------------------------------------------------------------    	                //--------------------------------------------------------------------------        //        //  properties        //        //--------------------------------------------------------------------------        public function get duration():Number        {            return _duration;        }                public function get isReady():ICommand        {            return new EventCommand(this, VideoEvent.READY);        }                public function get isSeeked():ICommand        {            return new EventCommand(this, VideoEvent.SEEKED);        }                public function get isReachCue():ICommand        {            return new EventCommand(this, MetadataEvent.CUE_POINT);        }                public function get isComplete():ICommand        {            return new EventCommand(this, VideoEvent.COMPLETE);        }                public function get isStateChanged():ICommand        {            return new EventCommand(this, VideoEvent.STATE_CHANGE);        }        //--------------------------------------------------------------------------        //        //  Overridden methods        //        //--------------------------------------------------------------------------        override public function seek(time:Number):void        {        	seekTime = time;            stateBeforeSeek = state;            if (stateBeforeSeek == VideoState.PAUSED)               resume();                           super.seek(time);        }        override public function toString():String        {            return "ReadableCueVideoPlayer" + String(_id);        }        //--------------------------------------------------------------------------        //        //  Methods: discription        //        //--------------------------------------------------------------------------        public function addASCuePoint(cueObj:Object):Object        {            var cueWatcher:Timer = new Timer(500);            var f:Function = function(event:TimerEvent):void            {                if (playheadTime >= cueObj["time"])                {                    Timer(event.target).removeEventListener(TimerEvent.TIMER, arguments.callee);                    dispatchEvent(new MetadataEvent(MetadataEvent.CUE_POINT, false, false, cueObj));                }            };            cueWatcher.addEventListener(TimerEvent.TIMER, f);            cueWatcher.start();                        _cue[cueObj] = cueWatcher;            _cueClosure[cueWatcher] = f;            return cueObj;        }        public function removeASCuePoint(cueObj:Object):void        {            var cueWatcher:Timer = _cue[cueObj] as Timer;            if (!cueWatcher)                return;                            cueWatcher.stop();            cueWatcher.removeEventListener(TimerEvent.TIMER, _cueClosure[cueWatcher]);            _cue[cueObj] = null;            _cueClosure[cueWatcher] = null;        }        public function destroy():void        {            trace(this + " destroyed. ");                        stop();            close();                        destroySeekingWatcher();            _seekWatcher = null;                        stopMonitorBuffering();            bufferMonitor = null;                        for (var cueObj : Object in _cue)             {                removeASCuePoint(cueObj);            }            _cueClosure = null;            _cue = null;                        removeEventListener(VideoEvent.PLAYHEAD_UPDATE, playheadUpdateHandler);            removeEventListener(VideoEvent.STATE_CHANGE, stateChangeHandler);            removeEventListener(MetadataEvent.METADATA_RECEIVED, metaDataRecievedHandler);        }        public function resume():void        {            if (state != VideoState.PAUSED )        	   return;        	               play();        }        private function recoverRemindedState():void        {            if (stateBeforeSeek == VideoState.PAUSED)               pause();        }        private function destroySeekingWatcher():void        {        	if (!_seekWatcher)        	   return;        	               _seekWatcher.removeEventListener(TimerEvent.TIMER, watchSeekingHandler);            _seekWatcher.stop();        }        private function startWatchingSeekFinish():void        {        	if (_seekWatcher && _seekWatcher.running)        	   return;        	               _seekWatcher = new Timer(100);            _seekWatcher.addEventListener(TimerEvent.TIMER, watchSeekingHandler);            _seekWatcher.start();        }        private function startMonitorBuffering():void        {        	stopMonitorBuffering();            bufferMonitor = new Timer(100);            bufferMonitor.addEventListener(TimerEvent.TIMER, monitorBufferHandler);            bufferMonitor.start();        }                private function stopMonitorBuffering():void        {            if (!bufferMonitor)                return;                        	bufferMonitor.removeEventListener(TimerEvent.TIMER, monitorBufferHandler);            bufferMonitor.stop();        }        //--------------------------------------------------------------------------        //        //  Event handlers: discription        //        //--------------------------------------------------------------------------        private function metaDataRecievedHandler(event:MetadataEvent):void        {//                        ObjectUtil.dump(event.info);            _duration = event.info["duration"];        }        private function stateChangeHandler(event:VideoEvent):void        {            trace("\t", state);            switch(state)            {                case VideoState.LOADING:                {            		//バッファリングのモニタ開始            		startMonitorBuffering();            		break;            	}            	case VideoState.PLAYING:            	{            		//バッファリングのモニタ終了            		stopMonitorBuffering();            		break;            	}            	case VideoState.SEEKING:            	{            	   //シーク終了の監視開始            	   startWatchingSeekFinish();            	   break;            	}            }        }                private function watchSeekingHandler(event:TimerEvent):void        {            trace("\t.", state, playheadTime);                    	if (state != VideoState.PLAYING)        	   return;        	           	if (hasEventListener(VideoEvent.PLAYHEAD_UPDATE))        	   return;            //VideoStatusがPLAYINGになったからといって、ビューがアップデートされているとは限らない.            //ビューがアップデートを待つためにVideoEvent.PLAYHEAD_UPDATEを受け取る.        	addEventListener(VideoEvent.PLAYHEAD_UPDATE, playheadUpdateHandler);        }        private function playheadUpdateHandler(event:VideoEvent):void        {        	if (isNaN(seekTime))        	   return;        	           	if (playheadTime >= seekTime)            {            	seekTime = NaN;            	//シーク前にポーズがかかっていたらポーズをかける.            	recoverRemindedState();                //バッファリングが終わりシーク終了したらイベント配信.                destroySeekingWatcher();                removeEventListener(VideoEvent.PLAYHEAD_UPDATE, playheadUpdateHandler);                dispatchEvent(new VideoEvent(VideoEvent.SEEKED));            }        	        }        private function monitorBufferHandler(event:TimerEvent):void        {        	if (netStream)        	   trace("\t-", netStream.bufferLength);        }
        
        ////////////////////////////////////////////////////////////////////////////////        //        //  Helper class: MethodQueueElement        //        ////////////////////////////////////////////////////////////////////////////////    }}