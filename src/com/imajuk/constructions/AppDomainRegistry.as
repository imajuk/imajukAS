package com.imajuk.constructions{    import avmplus.getQualifiedClassName;    import com.imajuk.site.ApplicationError;    import com.imajuk.site.Reference;    import com.imajuk.utils.AppDomainUtils;    import flash.display.DisplayObject;    import flash.display.DisplayObjectContainer;    import flash.display.Loader;    import flash.display.LoaderInfo;    import flash.system.ApplicationDomain;    public class AppDomainRegistry    {        //--------------------------------------------------------------------------        //        //  Class properties        //        //--------------------------------------------------------------------------        private static var _instance:AppDomainRegistry;        
        //--------------------------------------------------------------------------        //        //  Class methods        //        //--------------------------------------------------------------------------        public static function getInstance():AppDomainRegistry        {            if (!_instance)                _instance = new AppDomainRegistry(new PrivateClass());            return _instance;        }        //--------------------------------------------------------------------------        //        //  Constructor        //        //--------------------------------------------------------------------------        public function AppDomainRegistry(privateClass:PrivateClass)        {        	privateClass;        	id = uint(Math.random() * 100000);        }        //--------------------------------------------------------------------------        //        //  Variables        //        //--------------------------------------------------------------------------        private var appDomain:Array = [];        private var lInfo:Array = [];        private var id : uint;        //--------------------------------------------------------------------------        //        //  Methods        //        //--------------------------------------------------------------------------        public function toString() : String         {            return "AppDomainRegistry[" + id + "]";        }        /**         * ApplicationDomainを登録すます.         * @param appDomainContainer    ApplicationDomainを参照できるDisplayObjectです.         *                              ロードされたもの、または表示リスト内にあるものでなければいけません.         */        public function resisterAppDomain(appDomainContainer:DisplayObject):void        {            //MovieClipLoaderAsset has no LoaderInfo object but its internal asset has.            if (getQualifiedClassName(appDomainContainer) == "mx.core.MovieClipLoaderAsset")                appDomainContainer = Loader(DisplayObjectContainer(appDomainContainer).getChildAt(0)).content;                        var loaderInfo:LoaderInfo = appDomainContainer.loaderInfo;             if (!loaderInfo)                throw ApplicationError.create(ApplicationError.FAILED_RESISTER_APP_DOMAIN);            //get application domain                        var domain:ApplicationDomain = loaderInfo.applicationDomain;            if (!domain) return;                    	//check duplication            if(                appDomain.some(function(ad:ApplicationDomain, ...param) : Boolean                {                    return AppDomainUtils.equals(domain, ad);                })                 &&                 lInfo.some(function(info:LoaderInfo, ...param) : Boolean                {                    return info.url === loaderInfo.url;                })            ) return;                         //register application domain            appDomain.push(domain);            lInfo.push(loaderInfo);        }        /**         * 登録されたアプリケーションドメインから渡されたクラス名が含まれるアプリケーションドメインを返す.         * アプリケーションドメインが見つからない場合例外を投げる.         * 複数のアプリケーションドメインが見つかった場合例外を投げる.         */        public function getAppDomain(className:String):ApplicationDomain        {            if (appDomain.length == 0)                throw ApplicationError.create(ApplicationError.FAILED_LOOK_UP_APP_DOMAIN, className);                        var result:Array =                 appDomain.filter(                    function(domain:ApplicationDomain, ...param):Boolean                    {                        return domain.hasDefinition(className);                    }                );            switch(result.length)            {                case 0:                    throw ApplicationError.create(ApplicationError.FAILED_LOOK_UP_APP_CLASS, className);                    break;                case 1:                    return ApplicationDomain(result[0]);                    break;                           default:                     throw new Error("登録されたコンテナにクラス[" + className + "]が複数含まれています.");            }        }        public function getDefinition(className : String) : Class         {            className = Reference.decodeType(className);        	var domain:ApplicationDomain = getAppDomain(className);         	            return domain.getDefinition(className) as Class;
        }
        public function reset() : void         {            appDomain = [];
        }
    }}class PrivateClass{}