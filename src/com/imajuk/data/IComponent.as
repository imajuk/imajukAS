package com.imajuk.data {
    /**     * コンポジット構造のインターフェイス定義.     *      * <p>Interface of composite structure.</p>     *      * @author	yamaharu     * @see		AbstractComponent     * 			CommandComponent     */    public interface IComponent     {        /**         * 内包している子コンポーネントの数を取得します.         *          * <p>returns number of included child components.</p>         */        function get numChildren():int;        /**         * 内包している子孫コンポーネントをすべてイテレートする<code>IIterator</code>を取得します.         *          * <p><code>childIterator</code>は直下の子コンポーネントを反復するイテレータを返すのに対し、<br/>         * このプロパティは、子コンポーネントがさらに子コンポーネントを持っていた場合、再帰的に子コンポーネントを反復する         * イテレータを返します.</p>         * <p>Returns Iteretor that can access all descendant of component.<br/>         * This property gives you Iterator that reflective iterate when child node has grandchild node,          * against <code>childIterator</code> iteration - only directly children.</p>         *          * @see	#childIterator         * @see	IIterator         */        function get iterator():IIterator;        /**         * 内包している子コンポーネントをイテレートする<code>IIterator</code>を取得します.         *          * <p>子コンポーネントが持っている孫コンポーネントに再帰的にアクセスしたい場合は、<br/>         * <code>iterator</code> プロパティを使用します。</p>         * <p>Returns <code>IIterator</code> that iterates only directly child component.<br/>         * if you want to reflective access to grandchild components that child components has,<br/>          * use <code>iterator</code> property.</p>         *          * @see	#iterator         * @see	IIterator         */        function get childIterator():IIterator;        /**         * 子コンポーネントを追加します.         *          * <p>add a child to component.</p>         *          * @param child	追加する子コンポーネント         * 				<p>leaf or node in composite structure.</p>         */        function add(child:IComponent):void        /**         * 指定した子ノードを削除します.         *          * <p>Remove a child component from component.</p>         *          * @param child	削除するコンポーネント         * 				<p>leaf of node will be removed.</p>         */        function remove(child:IComponent):void        /**         * 指定したノードがコンポーネントに含まれているかどうかを返します.         *          * <p>Return whether the component is contained in this component.</p>         *          * @param child	コンポーネントに含まれているかどうか調べたいコンポーネント         * 				<p>examined component</p>         */        function contains(child:IComponent):Boolean        /**         * 内包する全てのコンポーネントを出力します.         *          * <p>Refrectively prints all child component.</p>         *          * @param indent	階層を表現するのに使用する文字列.         * 					<p>パラメータを渡した場合は、その文字が階層を表す文字として出力されます.</br>         * 					通常 '\t' などを使用します.</p>         * 					<p>indent character used representation of hierarchy.</p>         */        function print(indent:String = null):void    }
}
