package com.imajuk.data {
    /**     * コンポーネント用のイテレータ.     *      * <p>コンポーネントが内包する全てのコンポーネントを再帰的にイテレートします.</p>     * <p>Iterator for component.<br/>     * this iterates reflective all included components.</p>     *      * @author	yamaharu     * @see		IIterator     */    public class ComponentIterator implements IIterator     {        //--------------------------------------------------------------------------        //        //  Constructor        //        //--------------------------------------------------------------------------                /**         * コンストラクタ.         *          * <p>コンストラクタには走査対象となるコンポーネントを渡します.</p>         * <p>set iterated component to constractor.</p>         *          * @param	component	イテレートの対象となるコンポーネント.         * 						<p>iterated component.</p>         */        public function ComponentIterator(component:IComponent)         {            children = [ component.childIterator ];        }        //--------------------------------------------------------------------------        //        //  Variables        //        //--------------------------------------------------------------------------                /**         * @private         * temporaly for iterative function.         */        private var children:Array;        //--------------------------------------------------------------------------        //        //  properties        //        //--------------------------------------------------------------------------                /**         * @private         * position of current iteration.         */        private var _position:int;        /**         * @copy IIterator#position         */        public function get position():int        {            return _position;        }        //--------------------------------------------------------------------------        //        //  Methods: discription        //        //--------------------------------------------------------------------------                /**         * まだイテレートする対象となるコンポーネントがあるかどうかを返します.         *          * <p>Returns whether component has a next iterated conponent.</p>         */        public function hasNext():Boolean        {            while (children.length > 0)            {                if (peek().hasNext())					return true;				else					//if the last item of temporaly is terminate object, deleted it.					children.pop();            }	            return false;        }        /**         * イテレーションの次の対象となるコンポーネントを返します.         *          * <p>Returns a next iterated component.</p>         */        public function next():*        {            var component:IComponent = peek().next();            //last item of temporaly is expanded as it's children, and add in last of temporaly.            children.push(component.childIterator);            _position ++;            return component;         }        /**         * @private         * return last Component of temporaly item.         */        private function peek():IIterator        {            return IIterator(children[children.length - 1]);        }    }
}
