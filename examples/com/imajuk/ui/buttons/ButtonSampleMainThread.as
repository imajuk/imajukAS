package com.imajuk.ui.buttons{    import com.imajuk.behaviors.BehaviorDetail;    import com.imajuk.behaviors.ColorBehavior;    import com.imajuk.behaviors.ColorlizeBehavior;    import com.imajuk.behaviors.FrameStepBehavior;    import com.imajuk.behaviors.ImageSwapBehavior;    import com.imajuk.behaviors.MatrixBehavior;    import com.imajuk.behaviors.TransparentBehavior;    import com.imajuk.color.Color;    import com.imajuk.constructions.AppDomainRegistry;    import com.imajuk.constructions.AssetFactory;    import com.imajuk.service.AssetLocation;    import com.imajuk.service.IAssetLocation;    import com.imajuk.service.PreLoader;    import com.imajuk.service.PreLoaderThread;    import com.imajuk.ui.buttons.fluent.BehaviorContext;    import com.imajuk.ui.buttons.fluent.IBehaviorFluentAPI;    import com.imajuk.ui.buttons.group.ButtonGroup;    import org.libspark.thread.Thread;    import flash.display.DisplayObject;    import flash.display.Sprite;    import flash.filters.DropShadowFilter;    import flash.geom.Matrix;    import flash.net.URLRequest;    /**     * @author shinyamaharu     */    public class ButtonSampleMainThread extends Thread     {        private var timeline : Sprite;        private var asset : Sprite;        private var detail : BehaviorDetail;
        //TODO 選択状態ビヘイビアとロールアウトの問題を解決してサンプルを動くようにする        public function ButtonSampleMainThread(timeline:Sprite)        {            super();            this.timeline = timeline;        }        override protected function run() : void        {        	next(loadAssets);        }                private function loadAssets() : void        {        	var a : IAssetLocation =         		new AssetLocation()        			.add(		            	new URLRequest("buttonSampleAsset.swf"), 			            function(d : Sprite):void			            {			                AppDomainRegistry.getInstance().resisterAppDomain(d);			            	asset = timeline.addChild(d) as Sprite;			            });                        var preloader : PreLoader = new PreLoader();            var t : Thread = new PreLoaderThread(preloader, a);            t.start();            t.join();                        next(buildButton);        }                private function buildButton() : void        {        	detail = new BehaviorDetail();            detail.enabledDuration = .3;            detail.disabledDuration = .3;        	            createFlat();            createImageSwap();            createColorlize();            createMatrix();            createFramestep();            createTransparent();            createComplex();        }        private function createFlat() : void         {        	//=================================        	// FlatColorButton        	// flatという名前を含むアセットをFlatColorButtonにする.        	// カラーターゲットはアセットに内包されたpicという名前のオブジェクト        	//=================================            var closeButtons:ButtonGroup =                 AbstractButton.wrapByName(asset, "flat")                    .context(BehaviorContext.ROLL_OVER_OUT)                        .behave(ColorBehavior.createTint(ColorConfig.RG_RED, 1, "pic", ColorConfig.RG_CREAM, 1))                    .context(BehaviorContext.SELECT_UNSELECT)                        .behave(ColorBehavior.createTint(ColorConfig.RG_RED, 1, "pic", ColorConfig.RG_CREAM, 1))                    .context(BehaviorContext.ENABLE_DISABLE)                        .behave(ColorBehavior.createTint(ColorConfig.RG_GRAY2, 1, "pic", ColorConfig.RG_CREAM, 1)) as ButtonGroup;                                      closeButtons.getButton(1).mouseEnabled = false;              closeButtons.getButton(2).selectable = true;        }
        private function createImageSwap() : void         {		    //=================================		    // ImageSwapButton		    // iswapという名前のアセットをImageSwapButtonにする		    //=================================            var imageSwapButton:ButtonGroup =                 AbstractButton.wrapByName(asset, "iswap")                    .context(BehaviorContext.ROLL_OVER_OUT)                    .behave(ImageSwapBehavior.create("over", "out"))                    .context(BehaviorContext.SELECT_UNSELECT)                    .behave(ImageSwapBehavior.create("over", null)) as ButtonGroup;                        imageSwapButton.getButton(1).mouseEnabled = false;            imageSwapButton.getButton(3).selectable= true;        }

        private function createColorlize() : void         {            //=================================            // ColorlizeButton            // messageという名前を含むアセットをColorlizeButtonにする            //=================================                     var colorizeButtons:ButtonGroup =                 AbstractButton.wrapByName(asset, "colorlize")                    .context(BehaviorContext.ROLL_OVER_OUT)                    .behave(ColorlizeBehavior.create(Color.fromHSV(120, 80, 50), 1, "pic", 0))                     .context(BehaviorContext.SELECT_UNSELECT)                    .behave(ColorlizeBehavior.create(Color.fromHSV(220, 80, 50), 1, "pic", 0)) as ButtonGroup;                         colorizeButtons.getButton(1).mouseEnabled = false;            colorizeButtons.getButton(2).selectable= true;        }                private function createMatrix() : void         {            //=================================            // matrixという名前を含むアセットをボタン化し、            // MatrixBehaviorを適用            //=================================                     var m:Matrix = new Matrix();            m.translate(-30, -30);            m.scale(1.3, 1.3);            m.translate(30, 30);                        var m2:Matrix = new Matrix();            m2.translate(-30, -30);            m2.rotate(Math.PI);            m2.translate(30, 30);                        var matrixButtons:ButtonGroup =                 AbstractButton.wrapByName(asset, "matrix")                    .context(BehaviorContext.ROLL_OVER_OUT)                    .behave(MatrixBehavior.create(m, null, "pic"))                     .context(BehaviorContext.SELECT_UNSELECT)                    .behave(MatrixBehavior.create(m2, null, "pic")) as ButtonGroup;                         matrixButtons.getButton(1).selectable= true;            matrixButtons.getButton(2).mouseEnabled = false;        }                private function createFramestep() : void         {            //=================================            // fsという名前を含むアセットをボタン化し、            // FrameStepBehaviorを適用            //=================================                     var framestepButtons:ButtonGroup =                 AbstractButton.wrapByName(asset, "fs")                    .context(BehaviorContext.ROLL_OVER_OUT)                    .behave(FrameStepBehavior.create(4, 1, null))                     .context(BehaviorContext.SELECT_UNSELECT)                    .behave(FrameStepBehavior.create(7, null, null)) as ButtonGroup;                        framestepButtons.getButton(1).selectable= true;            framestepButtons.getButton(2).mouseEnabled = false;        }                private function createTransparent() : void         {            //=================================            // fsという名前を含むアセットをボタン化し、            // FrameStepBehaviorを適用            //=================================                     var transparentButtons:ButtonGroup =                 AbstractButton.wrapByName(asset, "trans")                    .context(BehaviorContext.ROLL_OVER_OUT)                    .behave(TransparentBehavior.create(1, .5, "pic"))                     .context(BehaviorContext.SELECT_UNSELECT)                    .behave(TransparentBehavior.create(1, .5, "pic")) as ButtonGroup;                         transparentButtons.getButton(1).selectable= true;            transparentButtons.getButton(2).mouseEnabled = false;        }
        private function createComplex() : void         {            //=================================            // MultipleBehaviorButton            // フルスクラッチ            //=================================            var complexButton1:IButton = buildComplexAssets() as IButton;            		    var guide:DisplayObject = asset.getChildByName("multi2");            guide.visible = false;            complexButton1.x = guide.x;            complexButton1.y = guide.y;		                var complexButton2 : IButton = buildComplexAssets() as IButton;		                 var guide2 : DisplayObject = asset.getChildByName("multi");            guide2.visible = false;            complexButton2.x = guide2.x;            complexButton2.y = guide2.y;            complexButton2.mouseEnabled = false;        }        private function buildComplexAssets() : IBehaviorFluentAPI         {        	 var complexAsset:Sprite = timeline.addChild(new Sprite()) as Sprite;                         //ボタンベース                         var btnBase:ButtonBase =                 new ButtonBase(                            93, //width                            36, //height                            24, //ellipseWidth                            [new DropShadowFilter(2, 26.5651, 0, .53, 9, 9)],                            ColorConfig.RG_CREAM,                            1,                            ColorConfig.RG_RED                         );                              var submit_icon:DisplayObject = AssetFactory.create("$Mobile_submit_icon");            submit_icon.x = 10;            submit_icon.y = 10;                        var submit_label:DisplayObject = AssetFactory.create("$Mobile_submit_text");            submit_label.x = 45;            submit_label.y = 10;                        complexAsset.addChild(btnBase);            complexAsset.addChild(submit_icon);            complexAsset.addChild(submit_label);                                    var complexButton:IButton =                 AbstractButton.wrap(complexAsset)                    .context(BehaviorContext.ROLL_OVER_OUT)                    .behave(ColorBehavior.createTint(ColorConfig.RG_RED2, 1, btnBase.base, ColorConfig.RG_CREAM))                    .behave(ColorBehavior.createTint(ColorConfig.RG_CREAM, 1, submit_icon, ColorConfig.RG_RED2))                    .behave(ColorBehavior.createTint(ColorConfig.RG_CREAM, 1, submit_label, ColorConfig.RG_RED2));                            return complexButton;
        }
        override protected function finalize() : void        {        }    }}