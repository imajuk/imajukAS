package com.imajuk.media {    import com.imajuk.constructions.AppDomainRegistry;    import com.imajuk.constructions.AssetFactory;    import com.imajuk.constructions.DocumentClass;    import com.imajuk.logs.Logger;    import org.libspark.thread.EnterFrameThreadExecutor;    import org.libspark.thread.Thread;    import flash.display.Loader;    import flash.display.Sprite;    import flash.display.StageQuality;    import flash.events.Event;    import flash.net.URLRequest;    /**     * @author shinyamaharu     */    public class VideoThreadSample extends DocumentClass     {        private var videoThread : VideoThread;        private var asset : Sprite;
        public function VideoThreadSample()        {            super(StageQuality.HIGH);                        Thread.initialize(new EnterFrameThreadExecutor());            
            Logger.filter(Logger.RELEASE, Logger.INFO);            Logger.release(" VideoThreadSample ");        }        override protected function start() : void        {            var loader : Loader = new Loader();            loader.contentLoaderInfo.addEventListener(                Event.COMPLETE,                 function():void                {                	//ロードされたアセット                	asset = addChild(loader.content) as Sprite;                	//アセットのApplicationDomainを登録                    AppDomainRegistry.getInstance().resisterAppDomain(asset);                    //ビデオの再生開始                    startVideo();                }            );            loader.load(new URLRequest("videoAsset.swf"));        }        private function startVideo() : void         {        	//ビデオのURL            var sourceURL : String = "HD_vs_VGA_SMALL.flv";                        //UIの邪魔をしないようにグラフィックがマウスに反応しないようにする            var m : Sprite = Sprite(asset.getChildByName("mobile"));            m.mouseEnabled = m.mouseChildren = false;                        //ビデオのコンテナ            var vContainer : Sprite = Sprite(asset.getChildByName("video"));                        //ビデオのUI（AbstractVideoUIを継承したconcrete classです）            var videoUI : IVideoUI =                 asset.addChild(                    new FeatureVideoUI(AssetFactory.create("$Controler2") as Sprite)                ) as IVideoUI;            videoUI.x = vContainer.x + 20;            videoUI.y = vContainer.y + vContainer.height - 15;            videoUI.name = "_videoUI_";                        //ビデオサイズ            var videoSize : VideoSize =                 new VideoSize(VideoSize.FIXED_SIZE, vContainer.width, vContainer.height);                        //ビデオ終了時のコールバック            var callBack : Function =                 function():void                {                	trace("finish");                };                        //バファリングアラート            var alert:IBufferingAlert =                 new AbstractBufferingAlert(asset.getChildByName("alert") as Sprite);                        //ビデオの再生開始            videoThread = new VideoThread(sourceURL, vContainer, true, true, videoSize, videoUI, null, alert);            videoThread.start();        }
    }}import com.imajuk.behaviors.ColorBehavior;import com.imajuk.color.Color;import com.imajuk.constructions.AssetWrapper;import com.imajuk.media.AbstractVideoUI;import com.imajuk.media.IVideoUI;import com.imajuk.ui.IUIViewAdapter;import com.imajuk.ui.buttons.AbstractButton;import com.imajuk.ui.buttons.IButton;import com.imajuk.ui.buttons.fluent.BehaviorContext;import com.imajuk.ui.slider.AbstractUISlider;import com.imajuk.ui.slider.UIFillSlider;import flash.display.DisplayObject;import flash.display.DisplayObjectContainer;import flash.display.MovieClip;import flash.display.Sprite;class FeatureVideoUI extends AbstractVideoUI implements IVideoUI {    public function FeatureVideoUI(asset : Sprite)    {        super(asset);    }    override public function layout(videoWidth : int) : void     {        //bar        _barHolder.width = videoWidth - (_playButton.width + DisplayObject(_soundUI).width + 30);        //play button        _playButton.x = _barHolder.x + _barHolder.width + 15;         //sound UI        _soundUI.x = _playButton.x + _playButton.width + 5;    }        override protected function createPlayBtn() : DisplayObject    {    	var btnAsset : MovieClip = asset.getChildByName("btn_play") as MovieClip;        btnAsset.gotoAndStop(1);        return  AbstractButton.wrap(btnAsset)                    .context(BehaviorContext.ROLL_OVER_OUT)                    .behave(ColorBehavior.createTint(Color.fromARGB(0xFF8BC5D5), 1, btnAsset)               ) as DisplayObject;    }    override protected function createSoudSlider() : AbstractUISlider     {    	var btnAsset : Sprite = asset.getChildByName("btn_sound") as Sprite;        var cover:Sprite = btnAsset.getChildByName("cover") as Sprite;                var bar:IButton =                 AbstractButton.wrapByName(btnAsset, "bar")                    .context(BehaviorContext.ROLL_OVER_OUT)                    .behave(ColorBehavior.createTint(Color.fromRGB(0x8BC5D5), 1, null, Color.fromRGB(0xFF0000)));                            var bg:IUIViewAdapter =             AssetWrapper.wrapAsDisplayObject(                IUIViewAdapter,                 btnAsset.getChildByName("bg")            ) as IUIViewAdapter;        btnAsset.swapChildren(cover, Sprite(bar));                            return UIFillSlider.create(                   btnAsset,                    bar,                    bg,                    cover               );    }    override protected function createPlayHead() : DisplayObject    {        return AbstractButton.wrapByName(asset, "playHead")                    .context(BehaviorContext.ROLL_OVER_OUT)                    .behave(ColorBehavior.createTint(Color.fromHSV(0, 0, 100), .3)) as DisplayObject;    }        override protected function createLoadingBar() : DisplayObject     {        return _barHolder.getChildByName("loadingBar");    }    override protected function createProgressBar() : DisplayObject     {        return _barHolder.getChildByName("bar");    }    override protected function createBarHolder() : DisplayObjectContainer     {        return asset.getChildByName("barHolder") as DisplayObjectContainer;    }        override protected function createFull() : DisplayObject    {        return new Sprite();    }}